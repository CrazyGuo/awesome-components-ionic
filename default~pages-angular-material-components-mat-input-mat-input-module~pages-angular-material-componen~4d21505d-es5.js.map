{"version":3,"sources":["default~pages-angular-material-components-mat-input-mat-input-module~pages-angular-material-componen~4d21505d-es5.js","webpack:///node_modules/@angular/cdk/esm2015/stepper.js","webpack:///node_modules/@angular/common/fesm2015/http.js","webpack:///node_modules/@angular/material/esm2015/button.js","webpack:///node_modules/@angular/material/esm2015/icon.js","webpack:///node_modules/@angular/material/esm2015/stepper.js"],"names":[],"mappings":"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","file":"x","sourcesContent":["(window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || []).push([[\"default~pages-angular-material-components-mat-input-mat-input-module~pages-angular-material-componen~4d21505d\"],{\n\n/***/ \"./node_modules/@angular/cdk/esm2015/stepper.js\":\n/*!******************************************************!*\\\n  !*** ./node_modules/@angular/cdk/esm2015/stepper.js ***!\n  \\******************************************************/\n/*! exports provided: StepperSelectionEvent, STEP_STATE, STEPPER_GLOBAL_OPTIONS, MAT_STEPPER_GLOBAL_OPTIONS, CdkStep, CdkStepper, CdkStepLabel, CdkStepperNext, CdkStepperPrevious, CdkStepperModule, CdkStepHeader */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"StepperSelectionEvent\", function() { return StepperSelectionEvent; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"STEP_STATE\", function() { return STEP_STATE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"STEPPER_GLOBAL_OPTIONS\", function() { return STEPPER_GLOBAL_OPTIONS; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MAT_STEPPER_GLOBAL_OPTIONS\", function() { return MAT_STEPPER_GLOBAL_OPTIONS; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CdkStep\", function() { return CdkStep; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CdkStepper\", function() { return CdkStepper; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CdkStepLabel\", function() { return CdkStepLabel; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CdkStepperNext\", function() { return CdkStepperNext; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CdkStepperPrevious\", function() { return CdkStepperPrevious; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CdkStepperModule\", function() { return CdkStepperModule; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CdkStepHeader\", function() { return CdkStepHeader; });\n/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ \"./node_modules/@angular/core/fesm2015/core.js\");\n/* harmony import */ var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/cdk/a11y */ \"./node_modules/@angular/cdk/esm2015/a11y.js\");\n/* harmony import */ var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/cdk/bidi */ \"./node_modules/@angular/cdk/esm2015/bidi.js\");\n/* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/cdk/coercion */ \"./node_modules/@angular/cdk/esm2015/coercion.js\");\n/* harmony import */ var _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/cdk/keycodes */ \"./node_modules/@angular/cdk/esm2015/keycodes.js\");\n/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/common */ \"./node_modules/@angular/common/fesm2015/common.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! rxjs */ \"./node_modules/rxjs/_esm2015/index.js\");\n/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! rxjs/operators */ \"./node_modules/rxjs/_esm2015/operators/index.js\");\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n\n\n\n\n\n\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass CdkStepHeader {\n    /**\n     * @param {?} _elementRef\n     */\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n    /**\n     * Focuses the step header.\n     * @return {?}\n     */\n    focus() {\n        this._elementRef.nativeElement.focus();\n    }\n}\nCdkStepHeader.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Directive\"], args: [{\n                selector: '[cdkStepHeader]',\n                host: {\n                    'role': 'tab',\n                },\n            },] },\n];\n/** @nocollapse */\nCdkStepHeader.ctorParameters = () => [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"ElementRef\"] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass CdkStepLabel {\n    /**\n     * @param {?} template\n     */\n    constructor(/** @docs-private */ template) {\n        this.template = template;\n    }\n}\nCdkStepLabel.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Directive\"], args: [{\n                selector: '[cdkStepLabel]',\n            },] },\n];\n/** @nocollapse */\nCdkStepLabel.ctorParameters = () => [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"TemplateRef\"] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Used to generate unique ID for each stepper component.\n * @type {?}\n */\nlet nextId = 0;\n/**\n * Change event emitted on selection changes.\n */\nclass StepperSelectionEvent {\n}\n/**\n * Enum to represent the different states of the steps.\n * @type {?}\n */\nconst STEP_STATE = {\n    NUMBER: 'number',\n    EDIT: 'edit',\n    DONE: 'done',\n    ERROR: 'error'\n};\n/**\n * InjectionToken that can be used to specify the global stepper options.\n * @type {?}\n */\nconst STEPPER_GLOBAL_OPTIONS = new _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"InjectionToken\"]('STEPPER_GLOBAL_OPTIONS');\n/**\n * InjectionToken that can be used to specify the global stepper options.\n * @deprecated Use `STEPPER_GLOBAL_OPTIONS` instead.\n * \\@breaking-change 8.0.0.\n * @type {?}\n */\nconst MAT_STEPPER_GLOBAL_OPTIONS = STEPPER_GLOBAL_OPTIONS;\nclass CdkStep {\n    /**\n     * \\@breaking-change 8.0.0 remove the `?` after `stepperOptions`\n     * @param {?} _stepper\n     * @param {?=} stepperOptions\n     */\n    constructor(_stepper, stepperOptions) {\n        this._stepper = _stepper;\n        /**\n         * Whether user has seen the expanded step content or not.\n         */\n        this.interacted = false;\n        this._editable = true;\n        this._optional = false;\n        this._completedOverride = null;\n        this._customError = null;\n        this._stepperOptions = stepperOptions ? stepperOptions : {};\n        this._displayDefaultIndicatorType = this._stepperOptions.displayDefaultIndicatorType !== false;\n        this._showError = !!this._stepperOptions.showError;\n    }\n    /**\n     * Whether the user can return to this step once it has been marked as completed.\n     * @return {?}\n     */\n    get editable() {\n        return this._editable;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set editable(value) {\n        this._editable = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__[\"coerceBooleanProperty\"])(value);\n    }\n    /**\n     * Whether the completion of step is optional.\n     * @return {?}\n     */\n    get optional() {\n        return this._optional;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set optional(value) {\n        this._optional = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__[\"coerceBooleanProperty\"])(value);\n    }\n    /**\n     * Whether step is marked as completed.\n     * @return {?}\n     */\n    get completed() {\n        return this._completedOverride == null ? this._getDefaultCompleted() : this._completedOverride;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set completed(value) {\n        this._completedOverride = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__[\"coerceBooleanProperty\"])(value);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _getDefaultCompleted() {\n        return this.stepControl ? this.stepControl.valid && this.interacted : this.interacted;\n    }\n    /**\n     * Whether step has an error.\n     * @return {?}\n     */\n    get hasError() {\n        return this._customError == null ? this._getDefaultError() : this._customError;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set hasError(value) {\n        this._customError = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__[\"coerceBooleanProperty\"])(value);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _getDefaultError() {\n        return this.stepControl && this.stepControl.invalid && this.interacted;\n    }\n    /**\n     * Selects this step component.\n     * @return {?}\n     */\n    select() {\n        this._stepper.selected = this;\n    }\n    /**\n     * Resets the step to its initial state. Note that this includes resetting form data.\n     * @return {?}\n     */\n    reset() {\n        this.interacted = false;\n        if (this._completedOverride != null) {\n            this._completedOverride = false;\n        }\n        if (this._customError != null) {\n            this._customError = false;\n        }\n        if (this.stepControl) {\n            this.stepControl.reset();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnChanges() {\n        // Since basically all inputs of the MatStep get proxied through the view down to the\n        // underlying MatStepHeader, we have to make sure that change detection runs correctly.\n        this._stepper._stateChanged();\n    }\n}\nCdkStep.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Component\"], args: [{selector: 'cdk-step',\n                exportAs: 'cdkStep',\n                template: '<ng-template><ng-content></ng-content></ng-template>',\n                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"ViewEncapsulation\"].None,\n                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"ChangeDetectionStrategy\"].OnPush,\n            },] },\n];\n/** @nocollapse */\nCdkStep.ctorParameters = () => [\n    { type: CdkStepper, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Inject\"], args: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__[\"forwardRef\"])((/**\n                     * @return {?}\n                     */\n                    () => CdkStepper)),] }] },\n    { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Optional\"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Inject\"], args: [STEPPER_GLOBAL_OPTIONS,] }] }\n];\nCdkStep.propDecorators = {\n    stepLabel: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"ContentChild\"], args: [CdkStepLabel, { static: false },] }],\n    content: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"ViewChild\"], args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__[\"TemplateRef\"], { static: true },] }],\n    stepControl: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Input\"] }],\n    label: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Input\"] }],\n    errorMessage: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Input\"] }],\n    ariaLabel: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Input\"], args: ['aria-label',] }],\n    ariaLabelledby: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Input\"], args: ['aria-labelledby',] }],\n    state: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Input\"] }],\n    editable: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Input\"] }],\n    optional: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Input\"] }],\n    completed: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Input\"] }],\n    hasError: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Input\"] }]\n};\nclass CdkStepper {\n    /**\n     * @param {?} _dir\n     * @param {?} _changeDetectorRef\n     * @param {?=} _elementRef\n     * @param {?=} _document\n     */\n    constructor(_dir, _changeDetectorRef, _elementRef, _document) {\n        this._dir = _dir;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        /**\n         * Emits when the component is destroyed.\n         */\n        this._destroyed = new rxjs__WEBPACK_IMPORTED_MODULE_6__[\"Subject\"]();\n        this._linear = false;\n        this._selectedIndex = 0;\n        /**\n         * Event emitted when the selected step has changed.\n         */\n        this.selectionChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"EventEmitter\"]();\n        this._orientation = 'horizontal';\n        this._groupId = nextId++;\n        this._document = _document;\n    }\n    /**\n     * The list of step components that the stepper is holding.\n     * @return {?}\n     */\n    get steps() {\n        return this._steps;\n    }\n    /**\n     * Whether the validity of previous steps should be checked or not.\n     * @return {?}\n     */\n    get linear() {\n        return this._linear;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set linear(value) {\n        this._linear = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__[\"coerceBooleanProperty\"])(value);\n    }\n    /**\n     * The index of the selected step.\n     * @return {?}\n     */\n    get selectedIndex() {\n        return this._selectedIndex;\n    }\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n    set selectedIndex(index) {\n        /** @type {?} */\n        const newIndex = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__[\"coerceNumberProperty\"])(index);\n        if (this.steps) {\n            // Ensure that the index can't be out of bounds.\n            if (newIndex < 0 || newIndex > this.steps.length - 1) {\n                throw Error('cdkStepper: Cannot assign out-of-bounds value to `selectedIndex`.');\n            }\n            if (this._selectedIndex != newIndex && !this._anyControlsInvalidOrPending(newIndex) &&\n                (newIndex >= this._selectedIndex || this.steps.toArray()[newIndex].editable)) {\n                this._updateSelectedItemIndex(index);\n            }\n        }\n        else {\n            this._selectedIndex = newIndex;\n        }\n    }\n    /**\n     * The step that is selected.\n     * @return {?}\n     */\n    get selected() {\n        // @breaking-change 8.0.0 Change return type to `CdkStep | undefined`.\n        return this.steps ? this.steps.toArray()[this.selectedIndex] : (/** @type {?} */ (undefined));\n    }\n    /**\n     * @param {?} step\n     * @return {?}\n     */\n    set selected(step) {\n        this.selectedIndex = this.steps ? this.steps.toArray().indexOf(step) : -1;\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        // Note that while the step headers are content children by default, any components that\n        // extend this one might have them as view chidren. We initialize the keyboard handling in\n        // AfterViewInit so we're guaranteed for both view and content children to be defined.\n        this._keyManager = new _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_1__[\"FocusKeyManager\"](this._stepHeader)\n            .withWrap()\n            .withVerticalOrientation(this._orientation === 'vertical');\n        (this._dir ? ((/** @type {?} */ (this._dir.change))) : Object(rxjs__WEBPACK_IMPORTED_MODULE_6__[\"of\"])())\n            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_7__[\"startWith\"])(this._layoutDirection()), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_7__[\"takeUntil\"])(this._destroyed))\n            .subscribe((/**\n         * @param {?} direction\n         * @return {?}\n         */\n        direction => this._keyManager.withHorizontalOrientation(direction)));\n        this._keyManager.updateActiveItemIndex(this._selectedIndex);\n        this.steps.changes.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_7__[\"takeUntil\"])(this._destroyed)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            if (!this.selected) {\n                this._selectedIndex = Math.max(this._selectedIndex - 1, 0);\n            }\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Selects and focuses the next step in list.\n     * @return {?}\n     */\n    next() {\n        this.selectedIndex = Math.min(this._selectedIndex + 1, this.steps.length - 1);\n    }\n    /**\n     * Selects and focuses the previous step in list.\n     * @return {?}\n     */\n    previous() {\n        this.selectedIndex = Math.max(this._selectedIndex - 1, 0);\n    }\n    /**\n     * Resets the stepper to its initial state. Note that this includes clearing form data.\n     * @return {?}\n     */\n    reset() {\n        this._updateSelectedItemIndex(0);\n        this.steps.forEach((/**\n         * @param {?} step\n         * @return {?}\n         */\n        step => step.reset()));\n        this._stateChanged();\n    }\n    /**\n     * Returns a unique id for each step label element.\n     * @param {?} i\n     * @return {?}\n     */\n    _getStepLabelId(i) {\n        return `cdk-step-label-${this._groupId}-${i}`;\n    }\n    /**\n     * Returns unique id for each step content element.\n     * @param {?} i\n     * @return {?}\n     */\n    _getStepContentId(i) {\n        return `cdk-step-content-${this._groupId}-${i}`;\n    }\n    /**\n     * Marks the component to be change detected.\n     * @return {?}\n     */\n    _stateChanged() {\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Returns position state of the step with the given index.\n     * @param {?} index\n     * @return {?}\n     */\n    _getAnimationDirection(index) {\n        /** @type {?} */\n        const position = index - this._selectedIndex;\n        if (position < 0) {\n            return this._layoutDirection() === 'rtl' ? 'next' : 'previous';\n        }\n        else if (position > 0) {\n            return this._layoutDirection() === 'rtl' ? 'previous' : 'next';\n        }\n        return 'current';\n    }\n    /**\n     * Returns the type of icon to be displayed.\n     * @param {?} index\n     * @param {?=} state\n     * @return {?}\n     */\n    _getIndicatorType(index, state = STEP_STATE.NUMBER) {\n        /** @type {?} */\n        const step = this.steps.toArray()[index];\n        /** @type {?} */\n        const isCurrentStep = this._isCurrentStep(index);\n        return step._displayDefaultIndicatorType ? this._getDefaultIndicatorLogic(step, isCurrentStep) :\n            this._getGuidelineLogic(step, isCurrentStep, state);\n    }\n    /**\n     * @private\n     * @param {?} step\n     * @param {?} isCurrentStep\n     * @return {?}\n     */\n    _getDefaultIndicatorLogic(step, isCurrentStep) {\n        if (step._showError && step.hasError && !isCurrentStep) {\n            return STEP_STATE.ERROR;\n        }\n        else if (!step.completed || isCurrentStep) {\n            return STEP_STATE.NUMBER;\n        }\n        else {\n            return step.editable ? STEP_STATE.EDIT : STEP_STATE.DONE;\n        }\n    }\n    /**\n     * @private\n     * @param {?} step\n     * @param {?} isCurrentStep\n     * @param {?=} state\n     * @return {?}\n     */\n    _getGuidelineLogic(step, isCurrentStep, state = STEP_STATE.NUMBER) {\n        if (step._showError && step.hasError && !isCurrentStep) {\n            return STEP_STATE.ERROR;\n        }\n        else if (step.completed && !isCurrentStep) {\n            return STEP_STATE.DONE;\n        }\n        else if (step.completed && isCurrentStep) {\n            return state;\n        }\n        else if (step.editable && isCurrentStep) {\n            return STEP_STATE.EDIT;\n        }\n        else {\n            return state;\n        }\n    }\n    /**\n     * @private\n     * @param {?} index\n     * @return {?}\n     */\n    _isCurrentStep(index) {\n        return this._selectedIndex === index;\n    }\n    /**\n     * Returns the index of the currently-focused step header.\n     * @return {?}\n     */\n    _getFocusIndex() {\n        return this._keyManager ? this._keyManager.activeItemIndex : this._selectedIndex;\n    }\n    /**\n     * @private\n     * @param {?} newIndex\n     * @return {?}\n     */\n    _updateSelectedItemIndex(newIndex) {\n        /** @type {?} */\n        const stepsArray = this.steps.toArray();\n        this.selectionChange.emit({\n            selectedIndex: newIndex,\n            previouslySelectedIndex: this._selectedIndex,\n            selectedStep: stepsArray[newIndex],\n            previouslySelectedStep: stepsArray[this._selectedIndex],\n        });\n        // If focus is inside the stepper, move it to the next header, otherwise it may become\n        // lost when the active step content is hidden. We can't be more granular with the check\n        // (e.g. checking whether focus is inside the active step), because we don't have a\n        // reference to the elements that are rendering out the content.\n        this._containsFocus() ? this._keyManager.setActiveItem(newIndex) :\n            this._keyManager.updateActiveItemIndex(newIndex);\n        this._selectedIndex = newIndex;\n        this._stateChanged();\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _onKeydown(event) {\n        /** @type {?} */\n        const hasModifier = Object(_angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_4__[\"hasModifierKey\"])(event);\n        /** @type {?} */\n        const keyCode = event.keyCode;\n        /** @type {?} */\n        const manager = this._keyManager;\n        if (manager.activeItemIndex != null && !hasModifier &&\n            (keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_4__[\"SPACE\"] || keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_4__[\"ENTER\"])) {\n            this.selectedIndex = manager.activeItemIndex;\n            event.preventDefault();\n        }\n        else if (keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_4__[\"HOME\"]) {\n            manager.setFirstItemActive();\n            event.preventDefault();\n        }\n        else if (keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_4__[\"END\"]) {\n            manager.setLastItemActive();\n            event.preventDefault();\n        }\n        else {\n            manager.onKeydown(event);\n        }\n    }\n    /**\n     * @private\n     * @param {?} index\n     * @return {?}\n     */\n    _anyControlsInvalidOrPending(index) {\n        /** @type {?} */\n        const steps = this.steps.toArray();\n        steps[this._selectedIndex].interacted = true;\n        if (this._linear && index >= 0) {\n            return steps.slice(0, index).some((/**\n             * @param {?} step\n             * @return {?}\n             */\n            step => {\n                /** @type {?} */\n                const control = step.stepControl;\n                /** @type {?} */\n                const isIncomplete = control ? (control.invalid || control.pending || !step.interacted) : !step.completed;\n                return isIncomplete && !step.optional && !step._completedOverride;\n            }));\n        }\n        return false;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _layoutDirection() {\n        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n    /**\n     * Checks whether the stepper contains the focused element.\n     * @private\n     * @return {?}\n     */\n    _containsFocus() {\n        if (!this._document || !this._elementRef) {\n            return false;\n        }\n        /** @type {?} */\n        const stepperElement = this._elementRef.nativeElement;\n        /** @type {?} */\n        const focusedElement = this._document.activeElement;\n        return stepperElement === focusedElement || stepperElement.contains(focusedElement);\n    }\n}\nCdkStepper.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Directive\"], args: [{\n                selector: '[cdkStepper]',\n                exportAs: 'cdkStepper',\n            },] },\n];\n/** @nocollapse */\nCdkStepper.ctorParameters = () => [\n    { type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_2__[\"Directionality\"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Optional\"] }] },\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"ChangeDetectorRef\"] },\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"ElementRef\"] },\n    { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Inject\"], args: [_angular_common__WEBPACK_IMPORTED_MODULE_5__[\"DOCUMENT\"],] }] }\n];\nCdkStepper.propDecorators = {\n    _steps: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"ContentChildren\"], args: [CdkStep,] }],\n    _stepHeader: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"ContentChildren\"], args: [CdkStepHeader,] }],\n    linear: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Input\"] }],\n    selectedIndex: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Input\"] }],\n    selected: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Input\"] }],\n    selectionChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Output\"] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Button that moves to the next step in a stepper workflow.\n */\nclass CdkStepperNext {\n    /**\n     * @param {?} _stepper\n     */\n    constructor(_stepper) {\n        this._stepper = _stepper;\n        /**\n         * Type of the next button. Defaults to \"submit\" if not specified.\n         */\n        this.type = 'submit';\n    }\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    /**\n     * @return {?}\n     */\n    _handleClick() {\n        this._stepper.next();\n    }\n}\nCdkStepperNext.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Directive\"], args: [{\n                selector: 'button[cdkStepperNext]',\n                host: {\n                    '[type]': 'type',\n                }\n            },] },\n];\n/** @nocollapse */\nCdkStepperNext.ctorParameters = () => [\n    { type: CdkStepper }\n];\nCdkStepperNext.propDecorators = {\n    type: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Input\"] }],\n    _handleClick: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"HostListener\"], args: ['click',] }]\n};\n/**\n * Button that moves to the previous step in a stepper workflow.\n */\nclass CdkStepperPrevious {\n    /**\n     * @param {?} _stepper\n     */\n    constructor(_stepper) {\n        this._stepper = _stepper;\n        /**\n         * Type of the previous button. Defaults to \"button\" if not specified.\n         */\n        this.type = 'button';\n    }\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    /**\n     * @return {?}\n     */\n    _handleClick() {\n        this._stepper.previous();\n    }\n}\nCdkStepperPrevious.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Directive\"], args: [{\n                selector: 'button[cdkStepperPrevious]',\n                host: {\n                    '[type]': 'type',\n                }\n            },] },\n];\n/** @nocollapse */\nCdkStepperPrevious.ctorParameters = () => [\n    { type: CdkStepper }\n];\nCdkStepperPrevious.propDecorators = {\n    type: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Input\"] }],\n    _handleClick: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"HostListener\"], args: ['click',] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass CdkStepperModule {\n}\nCdkStepperModule.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"NgModule\"], args: [{\n                imports: [_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_2__[\"BidiModule\"], _angular_common__WEBPACK_IMPORTED_MODULE_5__[\"CommonModule\"]],\n                exports: [\n                    CdkStep,\n                    CdkStepper,\n                    CdkStepHeader,\n                    CdkStepLabel,\n                    CdkStepperNext,\n                    CdkStepperPrevious,\n                ],\n                declarations: [\n                    CdkStep,\n                    CdkStepper,\n                    CdkStepHeader,\n                    CdkStepLabel,\n                    CdkStepperNext,\n                    CdkStepperPrevious,\n                ]\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\n//# sourceMappingURL=stepper.js.map\n\n\n/***/ }),\n\n/***/ \"./node_modules/@angular/common/fesm2015/http.js\":\n/*!*******************************************************!*\\\n  !*** ./node_modules/@angular/common/fesm2015/http.js ***!\n  \\*******************************************************/\n/*! exports provided: ɵangular_packages_common_http_http_a, ɵangular_packages_common_http_http_b, ɵangular_packages_common_http_http_c, ɵangular_packages_common_http_http_d, ɵangular_packages_common_http_http_g, ɵangular_packages_common_http_http_h, ɵangular_packages_common_http_http_e, ɵangular_packages_common_http_http_f, HttpBackend, HttpHandler, HttpClient, HttpHeaders, HTTP_INTERCEPTORS, JsonpClientBackend, JsonpInterceptor, HttpClientJsonpModule, HttpClientModule, HttpClientXsrfModule, ɵHttpInterceptingHandler, HttpParams, HttpUrlEncodingCodec, HttpRequest, HttpErrorResponse, HttpEventType, HttpHeaderResponse, HttpResponse, HttpResponseBase, HttpXhrBackend, XhrFactory, HttpXsrfTokenExtractor */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵangular_packages_common_http_http_a\", function() { return NoopInterceptor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵangular_packages_common_http_http_b\", function() { return JsonpCallbackContext; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵangular_packages_common_http_http_c\", function() { return jsonpCallbackContext; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵangular_packages_common_http_http_d\", function() { return BrowserXhr; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵangular_packages_common_http_http_g\", function() { return HttpXsrfCookieExtractor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵangular_packages_common_http_http_h\", function() { return HttpXsrfInterceptor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵangular_packages_common_http_http_e\", function() { return XSRF_COOKIE_NAME; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵangular_packages_common_http_http_f\", function() { return XSRF_HEADER_NAME; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"HttpBackend\", function() { return HttpBackend; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"HttpHandler\", function() { return HttpHandler; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"HttpClient\", function() { return HttpClient; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"HttpHeaders\", function() { return HttpHeaders; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"HTTP_INTERCEPTORS\", function() { return HTTP_INTERCEPTORS; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"JsonpClientBackend\", function() { return JsonpClientBackend; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"JsonpInterceptor\", function() { return JsonpInterceptor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"HttpClientJsonpModule\", function() { return HttpClientJsonpModule; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"HttpClientModule\", function() { return HttpClientModule; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"HttpClientXsrfModule\", function() { return HttpClientXsrfModule; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵHttpInterceptingHandler\", function() { return HttpInterceptingHandler; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"HttpParams\", function() { return HttpParams; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"HttpUrlEncodingCodec\", function() { return HttpUrlEncodingCodec; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"HttpRequest\", function() { return HttpRequest; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"HttpErrorResponse\", function() { return HttpErrorResponse; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"HttpEventType\", function() { return HttpEventType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"HttpHeaderResponse\", function() { return HttpHeaderResponse; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"HttpResponse\", function() { return HttpResponse; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"HttpResponseBase\", function() { return HttpResponseBase; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"HttpXhrBackend\", function() { return HttpXhrBackend; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"XhrFactory\", function() { return XhrFactory; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"HttpXsrfTokenExtractor\", function() { return HttpXsrfTokenExtractor; });\n/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ \"./node_modules/@angular/core/fesm2015/core.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rxjs */ \"./node_modules/rxjs/_esm2015/index.js\");\n/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs/operators */ \"./node_modules/rxjs/_esm2015/operators/index.js\");\n/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/common */ \"./node_modules/@angular/common/fesm2015/common.js\");\n/**\n * @license Angular v8.2.14\n * (c) 2010-2019 Google LLC. https://angular.io/\n * License: MIT\n */\n\n\n\n\n\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\n * `HttpResponse`.\n *\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\n * `HttpBackend`.\n *\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\n *\n * \\@publicApi\n * @abstract\n */\nclass HttpHandler {\n}\nif (false) {}\n/**\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\n *\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\n *\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\n * through the interceptor chain.\n *\n * \\@publicApi\n * @abstract\n */\nclass HttpBackend {\n}\nif (false) {}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @record\n */\nfunction Update() { }\nif (false) {}\n/**\n * Represents the header configuration options for an HTTP request.\n * Instances are immutable. Modifying methods return a cloned\n * instance with the change. The original object is never changed.\n *\n * \\@publicApi\n */\nclass HttpHeaders {\n    /**\n     * Constructs a new HTTP header object with the given values.\n     * @param {?=} headers\n     */\n    constructor(headers) {\n        /**\n         * Internal map of lowercased header names to the normalized\n         * form of the name (the form seen first).\n         */\n        this.normalizedNames = new Map();\n        /**\n         * Queued updates to be materialized the next initialization.\n         */\n        this.lazyUpdate = null;\n        if (!headers) {\n            this.headers = new Map();\n        }\n        else if (typeof headers === 'string') {\n            this.lazyInit = (/**\n             * @return {?}\n             */\n            () => {\n                this.headers = new Map();\n                headers.split('\\n').forEach((/**\n                 * @param {?} line\n                 * @return {?}\n                 */\n                line => {\n                    /** @type {?} */\n                    const index = line.indexOf(':');\n                    if (index > 0) {\n                        /** @type {?} */\n                        const name = line.slice(0, index);\n                        /** @type {?} */\n                        const key = name.toLowerCase();\n                        /** @type {?} */\n                        const value = line.slice(index + 1).trim();\n                        this.maybeSetNormalizedName(name, key);\n                        if (this.headers.has(key)) {\n                            (/** @type {?} */ (this.headers.get(key))).push(value);\n                        }\n                        else {\n                            this.headers.set(key, [value]);\n                        }\n                    }\n                }));\n            });\n        }\n        else {\n            this.lazyInit = (/**\n             * @return {?}\n             */\n            () => {\n                this.headers = new Map();\n                Object.keys(headers).forEach((/**\n                 * @param {?} name\n                 * @return {?}\n                 */\n                name => {\n                    /** @type {?} */\n                    let values = headers[name];\n                    /** @type {?} */\n                    const key = name.toLowerCase();\n                    if (typeof values === 'string') {\n                        values = [values];\n                    }\n                    if (values.length > 0) {\n                        this.headers.set(key, values);\n                        this.maybeSetNormalizedName(name, key);\n                    }\n                }));\n            });\n        }\n    }\n    /**\n     * Checks for existence of a given header.\n     *\n     * @param {?} name The header name to check for existence.\n     *\n     * @return {?} True if the header exists, false otherwise.\n     */\n    has(name) {\n        this.init();\n        return this.headers.has(name.toLowerCase());\n    }\n    /**\n     * Retrieves the first value of a given header.\n     *\n     * @param {?} name The header name.\n     *\n     * @return {?} The value string if the header exists, null otherwise\n     */\n    get(name) {\n        this.init();\n        /** @type {?} */\n        const values = this.headers.get(name.toLowerCase());\n        return values && values.length > 0 ? values[0] : null;\n    }\n    /**\n     * Retrieves the names of the headers.\n     *\n     * @return {?} A list of header names.\n     */\n    keys() {\n        this.init();\n        return Array.from(this.normalizedNames.values());\n    }\n    /**\n     * Retrieves a list of values for a given header.\n     *\n     * @param {?} name The header name from which to retrieve values.\n     *\n     * @return {?} A string of values if the header exists, null otherwise.\n     */\n    getAll(name) {\n        this.init();\n        return this.headers.get(name.toLowerCase()) || null;\n    }\n    /**\n     * Appends a new value to the existing set of values for a header\n     * and returns them in a clone of the original instance.\n     *\n     * @param {?} name The header name for which to append the value or values.\n     * @param {?} value The new value or array of values.\n     *\n     * @return {?} A clone of the HTTP headers object with the value appended to the given header.\n     */\n    append(name, value) {\n        return this.clone({ name, value, op: 'a' });\n    }\n    /**\n     * Sets or modifies a value for a given header in a clone of the original instance.\n     * If the header already exists, its value is replaced with the given value\n     * in the returned object.\n     *\n     * @param {?} name The header name.\n     * @param {?} value The value or values to set or overide for the given header.\n     *\n     * @return {?} A clone of the HTTP headers object with the newly set header value.\n     */\n    set(name, value) {\n        return this.clone({ name, value, op: 's' });\n    }\n    /**\n     * Deletes values for a given header in a clone of the original instance.\n     *\n     * @param {?} name The header name.\n     * @param {?=} value The value or values to delete for the given header.\n     *\n     * @return {?} A clone of the HTTP headers object with the given value deleted.\n     */\n    delete(name, value) {\n        return this.clone({ name, value, op: 'd' });\n    }\n    /**\n     * @private\n     * @param {?} name\n     * @param {?} lcName\n     * @return {?}\n     */\n    maybeSetNormalizedName(name, lcName) {\n        if (!this.normalizedNames.has(lcName)) {\n            this.normalizedNames.set(lcName, name);\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    init() {\n        if (!!this.lazyInit) {\n            if (this.lazyInit instanceof HttpHeaders) {\n                this.copyFrom(this.lazyInit);\n            }\n            else {\n                this.lazyInit();\n            }\n            this.lazyInit = null;\n            if (!!this.lazyUpdate) {\n                this.lazyUpdate.forEach((/**\n                 * @param {?} update\n                 * @return {?}\n                 */\n                update => this.applyUpdate(update)));\n                this.lazyUpdate = null;\n            }\n        }\n    }\n    /**\n     * @private\n     * @param {?} other\n     * @return {?}\n     */\n    copyFrom(other) {\n        other.init();\n        Array.from(other.headers.keys()).forEach((/**\n         * @param {?} key\n         * @return {?}\n         */\n        key => {\n            this.headers.set(key, (/** @type {?} */ (other.headers.get(key))));\n            this.normalizedNames.set(key, (/** @type {?} */ (other.normalizedNames.get(key))));\n        }));\n    }\n    /**\n     * @private\n     * @param {?} update\n     * @return {?}\n     */\n    clone(update) {\n        /** @type {?} */\n        const clone = new HttpHeaders();\n        clone.lazyInit =\n            (!!this.lazyInit && this.lazyInit instanceof HttpHeaders) ? this.lazyInit : this;\n        clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\n        return clone;\n    }\n    /**\n     * @private\n     * @param {?} update\n     * @return {?}\n     */\n    applyUpdate(update) {\n        /** @type {?} */\n        const key = update.name.toLowerCase();\n        switch (update.op) {\n            case 'a':\n            case 's':\n                /** @type {?} */\n                let value = (/** @type {?} */ (update.value));\n                if (typeof value === 'string') {\n                    value = [value];\n                }\n                if (value.length === 0) {\n                    return;\n                }\n                this.maybeSetNormalizedName(update.name, key);\n                /** @type {?} */\n                const base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\n                base.push(...value);\n                this.headers.set(key, base);\n                break;\n            case 'd':\n                /** @type {?} */\n                const toDelete = (/** @type {?} */ (update.value));\n                if (!toDelete) {\n                    this.headers.delete(key);\n                    this.normalizedNames.delete(key);\n                }\n                else {\n                    /** @type {?} */\n                    let existing = this.headers.get(key);\n                    if (!existing) {\n                        return;\n                    }\n                    existing = existing.filter((/**\n                     * @param {?} value\n                     * @return {?}\n                     */\n                    value => toDelete.indexOf(value) === -1));\n                    if (existing.length === 0) {\n                        this.headers.delete(key);\n                        this.normalizedNames.delete(key);\n                    }\n                    else {\n                        this.headers.set(key, existing);\n                    }\n                }\n                break;\n        }\n    }\n    /**\n     * \\@internal\n     * @param {?} fn\n     * @return {?}\n     */\n    forEach(fn) {\n        this.init();\n        Array.from(this.normalizedNames.keys())\n            .forEach((/**\n         * @param {?} key\n         * @return {?}\n         */\n        key => fn((/** @type {?} */ (this.normalizedNames.get(key))), (/** @type {?} */ (this.headers.get(key))))));\n    }\n}\nif (false) {}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A codec for encoding and decoding parameters in URLs.\n *\n * Used by `HttpParams`.\n *\n * \\@publicApi\n *\n * @record\n */\nfunction HttpParameterCodec() { }\nif (false) {}\n/**\n * Provides encoding and decoding of URL parameter and query-string values.\n *\n * Serializes and parses URL parameter keys and values to encode and decode them.\n * If you pass URL query parameters without encoding,\n * the query parameters can be misinterpreted at the receiving end.\n *\n *\n * \\@publicApi\n */\nclass HttpUrlEncodingCodec {\n    /**\n     * Encodes a key name for a URL parameter or query-string.\n     * @param {?} key The key name.\n     * @return {?} The encoded key name.\n     */\n    encodeKey(key) { return standardEncoding(key); }\n    /**\n     * Encodes the value of a URL parameter or query-string.\n     * @param {?} value The value.\n     * @return {?} The encoded value.\n     */\n    encodeValue(value) { return standardEncoding(value); }\n    /**\n     * Decodes an encoded URL parameter or query-string key.\n     * @param {?} key The encoded key name.\n     * @return {?} The decoded key name.\n     */\n    decodeKey(key) { return decodeURIComponent(key); }\n    /**\n     * Decodes an encoded URL parameter or query-string value.\n     * @param {?} value The encoded value.\n     * @return {?} The decoded value.\n     */\n    decodeValue(value) { return decodeURIComponent(value); }\n}\n/**\n * @param {?} rawParams\n * @param {?} codec\n * @return {?}\n */\nfunction paramParser(rawParams, codec) {\n    /** @type {?} */\n    const map = new Map();\n    if (rawParams.length > 0) {\n        /** @type {?} */\n        const params = rawParams.split('&');\n        params.forEach((/**\n         * @param {?} param\n         * @return {?}\n         */\n        (param) => {\n            /** @type {?} */\n            const eqIdx = param.indexOf('=');\n            const [key, val] = eqIdx == -1 ?\n                [codec.decodeKey(param), ''] :\n                [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))];\n            /** @type {?} */\n            const list = map.get(key) || [];\n            list.push(val);\n            map.set(key, list);\n        }));\n    }\n    return map;\n}\n/**\n * @param {?} v\n * @return {?}\n */\nfunction standardEncoding(v) {\n    return encodeURIComponent(v)\n        .replace(/%40/gi, '@')\n        .replace(/%3A/gi, ':')\n        .replace(/%24/gi, '$')\n        .replace(/%2C/gi, ',')\n        .replace(/%3B/gi, ';')\n        .replace(/%2B/gi, '+')\n        .replace(/%3D/gi, '=')\n        .replace(/%3F/gi, '?')\n        .replace(/%2F/gi, '/');\n}\n/**\n * @record\n */\nfunction Update$1() { }\nif (false) {}\n/**\n * Options used to construct an `HttpParams` instance.\n *\n * \\@publicApi\n * @record\n */\nfunction HttpParamsOptions() { }\nif (false) {}\n/**\n * An HTTP request/response body that represents serialized parameters,\n * per the MIME type `application/x-www-form-urlencoded`.\n *\n * This class is immutable; all mutation operations return a new instance.\n *\n * \\@publicApi\n */\nclass HttpParams {\n    /**\n     * @param {?=} options\n     */\n    constructor(options = (/** @type {?} */ ({}))) {\n        this.updates = null;\n        this.cloneFrom = null;\n        this.encoder = options.encoder || new HttpUrlEncodingCodec();\n        if (!!options.fromString) {\n            if (!!options.fromObject) {\n                throw new Error(`Cannot specify both fromString and fromObject.`);\n            }\n            this.map = paramParser(options.fromString, this.encoder);\n        }\n        else if (!!options.fromObject) {\n            this.map = new Map();\n            Object.keys(options.fromObject).forEach((/**\n             * @param {?} key\n             * @return {?}\n             */\n            key => {\n                /** @type {?} */\n                const value = ((/** @type {?} */ (options.fromObject)))[key];\n                (/** @type {?} */ (this.map)).set(key, Array.isArray(value) ? value : [value]);\n            }));\n        }\n        else {\n            this.map = null;\n        }\n    }\n    /**\n     * Reports whether the body includes one or more values for a given parameter.\n     * @param {?} param The parameter name.\n     * @return {?} True if the parameter has one or more values,\n     * false if it has no value or is not present.\n     */\n    has(param) {\n        this.init();\n        return (/** @type {?} */ (this.map)).has(param);\n    }\n    /**\n     * Retrieves the first value for a parameter.\n     * @param {?} param The parameter name.\n     * @return {?} The first value of the given parameter,\n     * or `null` if the parameter is not present.\n     */\n    get(param) {\n        this.init();\n        /** @type {?} */\n        const res = (/** @type {?} */ (this.map)).get(param);\n        return !!res ? res[0] : null;\n    }\n    /**\n     * Retrieves all values for a  parameter.\n     * @param {?} param The parameter name.\n     * @return {?} All values in a string array,\n     * or `null` if the parameter not present.\n     */\n    getAll(param) {\n        this.init();\n        return (/** @type {?} */ (this.map)).get(param) || null;\n    }\n    /**\n     * Retrieves all the parameters for this body.\n     * @return {?} The parameter names in a string array.\n     */\n    keys() {\n        this.init();\n        return Array.from((/** @type {?} */ (this.map)).keys());\n    }\n    /**\n     * Appends a new value to existing values for a parameter.\n     * @param {?} param The parameter name.\n     * @param {?} value The new value to add.\n     * @return {?} A new body with the appended value.\n     */\n    append(param, value) { return this.clone({ param, value, op: 'a' }); }\n    /**\n     * Replaces the value for a parameter.\n     * @param {?} param The parameter name.\n     * @param {?} value The new value.\n     * @return {?} A new body with the new value.\n     */\n    set(param, value) { return this.clone({ param, value, op: 's' }); }\n    /**\n     * Removes a given value or all values from a parameter.\n     * @param {?} param The parameter name.\n     * @param {?=} value The value to remove, if provided.\n     * @return {?} A new body with the given value removed, or with all values\n     * removed if no value is specified.\n     */\n    delete(param, value) { return this.clone({ param, value, op: 'd' }); }\n    /**\n     * Serializes the body to an encoded string, where key-value pairs (separated by `=`) are\n     * separated by `&`s.\n     * @return {?}\n     */\n    toString() {\n        this.init();\n        return this.keys()\n            .map((/**\n         * @param {?} key\n         * @return {?}\n         */\n        key => {\n            /** @type {?} */\n            const eKey = this.encoder.encodeKey(key);\n            return (/** @type {?} */ ((/** @type {?} */ (this.map)).get(key))).map((/**\n             * @param {?} value\n             * @return {?}\n             */\n            value => eKey + '=' + this.encoder.encodeValue(value)))\n                .join('&');\n        }))\n            .join('&');\n    }\n    /**\n     * @private\n     * @param {?} update\n     * @return {?}\n     */\n    clone(update) {\n        /** @type {?} */\n        const clone = new HttpParams((/** @type {?} */ ({ encoder: this.encoder })));\n        clone.cloneFrom = this.cloneFrom || this;\n        clone.updates = (this.updates || []).concat([update]);\n        return clone;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    init() {\n        if (this.map === null) {\n            this.map = new Map();\n        }\n        if (this.cloneFrom !== null) {\n            this.cloneFrom.init();\n            this.cloneFrom.keys().forEach((/**\n             * @param {?} key\n             * @return {?}\n             */\n            key => (/** @type {?} */ (this.map)).set(key, (/** @type {?} */ ((/** @type {?} */ ((/** @type {?} */ (this.cloneFrom)).map)).get(key))))));\n            (/** @type {?} */ (this.updates)).forEach((/**\n             * @param {?} update\n             * @return {?}\n             */\n            update => {\n                switch (update.op) {\n                    case 'a':\n                    case 's':\n                        /** @type {?} */\n                        const base = (update.op === 'a' ? (/** @type {?} */ (this.map)).get(update.param) : undefined) || [];\n                        base.push((/** @type {?} */ (update.value)));\n                        (/** @type {?} */ (this.map)).set(update.param, base);\n                        break;\n                    case 'd':\n                        if (update.value !== undefined) {\n                            /** @type {?} */\n                            let base = (/** @type {?} */ (this.map)).get(update.param) || [];\n                            /** @type {?} */\n                            const idx = base.indexOf(update.value);\n                            if (idx !== -1) {\n                                base.splice(idx, 1);\n                            }\n                            if (base.length > 0) {\n                                (/** @type {?} */ (this.map)).set(update.param, base);\n                            }\n                            else {\n                                (/** @type {?} */ (this.map)).delete(update.param);\n                            }\n                        }\n                        else {\n                            (/** @type {?} */ (this.map)).delete(update.param);\n                            break;\n                        }\n                }\n            }));\n            this.cloneFrom = this.updates = null;\n        }\n    }\n}\nif (false) {}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Construction interface for `HttpRequest`s.\n *\n * All values are optional and will override default values if provided.\n * @record\n */\nfunction HttpRequestInit() { }\nif (false) {}\n/**\n * Determine whether the given HTTP method may include a body.\n * @param {?} method\n * @return {?}\n */\nfunction mightHaveBody(method) {\n    switch (method) {\n        case 'DELETE':\n        case 'GET':\n        case 'HEAD':\n        case 'OPTIONS':\n        case 'JSONP':\n            return false;\n        default:\n            return true;\n    }\n}\n/**\n * Safely assert whether the given value is an ArrayBuffer.\n *\n * In some execution environments ArrayBuffer is not defined.\n * @param {?} value\n * @return {?}\n */\nfunction isArrayBuffer(value) {\n    return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\n}\n/**\n * Safely assert whether the given value is a Blob.\n *\n * In some execution environments Blob is not defined.\n * @param {?} value\n * @return {?}\n */\nfunction isBlob(value) {\n    return typeof Blob !== 'undefined' && value instanceof Blob;\n}\n/**\n * Safely assert whether the given value is a FormData instance.\n *\n * In some execution environments FormData is not defined.\n * @param {?} value\n * @return {?}\n */\nfunction isFormData(value) {\n    return typeof FormData !== 'undefined' && value instanceof FormData;\n}\n/**\n * An outgoing HTTP request with an optional typed body.\n *\n * `HttpRequest` represents an outgoing request, including URL, method,\n * headers, body, and other request configuration options. Instances should be\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\n * method should be used.\n *\n * \\@publicApi\n * @template T\n */\nclass HttpRequest {\n    /**\n     * @param {?} method\n     * @param {?} url\n     * @param {?=} third\n     * @param {?=} fourth\n     */\n    constructor(method, url, third, fourth) {\n        this.url = url;\n        /**\n         * The request body, or `null` if one isn't set.\n         *\n         * Bodies are not enforced to be immutable, as they can include a reference to any\n         * user-defined data type. However, interceptors should take care to preserve\n         * idempotence by treating them as such.\n         */\n        this.body = null;\n        /**\n         * Whether this request should be made in a way that exposes progress events.\n         *\n         * Progress events are expensive (change detection runs on each event) and so\n         * they should only be requested if the consumer intends to monitor them.\n         */\n        this.reportProgress = false;\n        /**\n         * Whether this request should be sent with outgoing credentials (cookies).\n         */\n        this.withCredentials = false;\n        /**\n         * The expected response type of the server.\n         *\n         * This is used to parse the response appropriately before returning it to\n         * the requestee.\n         */\n        this.responseType = 'json';\n        this.method = method.toUpperCase();\n        // Next, need to figure out which argument holds the HttpRequestInit\n        // options, if any.\n        /** @type {?} */\n        let options;\n        // Check whether a body argument is expected. The only valid way to omit\n        // the body argument is to use a known no-body method like GET.\n        if (mightHaveBody(this.method) || !!fourth) {\n            // Body is the third argument, options are the fourth.\n            this.body = (third !== undefined) ? (/** @type {?} */ (third)) : null;\n            options = fourth;\n        }\n        else {\n            // No body required, options are the third argument. The body stays null.\n            options = (/** @type {?} */ (third));\n        }\n        // If options have been passed, interpret them.\n        if (options) {\n            // Normalize reportProgress and withCredentials.\n            this.reportProgress = !!options.reportProgress;\n            this.withCredentials = !!options.withCredentials;\n            // Override default response type of 'json' if one is provided.\n            if (!!options.responseType) {\n                this.responseType = options.responseType;\n            }\n            // Override headers if they're provided.\n            if (!!options.headers) {\n                this.headers = options.headers;\n            }\n            if (!!options.params) {\n                this.params = options.params;\n            }\n        }\n        // If no headers have been passed in, construct a new HttpHeaders instance.\n        if (!this.headers) {\n            this.headers = new HttpHeaders();\n        }\n        // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\n        if (!this.params) {\n            this.params = new HttpParams();\n            this.urlWithParams = url;\n        }\n        else {\n            // Encode the parameters to a string in preparation for inclusion in the URL.\n            /** @type {?} */\n            const params = this.params.toString();\n            if (params.length === 0) {\n                // No parameters, the visible URL is just the URL given at creation time.\n                this.urlWithParams = url;\n            }\n            else {\n                // Does the URL already have query parameters? Look for '?'.\n                /** @type {?} */\n                const qIdx = url.indexOf('?');\n                // There are 3 cases to handle:\n                // 1) No existing parameters -> append '?' followed by params.\n                // 2) '?' exists and is followed by existing query string ->\n                //    append '&' followed by params.\n                // 3) '?' exists at the end of the url -> append params directly.\n                // This basically amounts to determining the character, if any, with\n                // which to join the URL and parameters.\n                /** @type {?} */\n                const sep = qIdx === -1 ? '?' : (qIdx < url.length - 1 ? '&' : '');\n                this.urlWithParams = url + sep + params;\n            }\n        }\n    }\n    /**\n     * Transform the free-form body into a serialized format suitable for\n     * transmission to the server.\n     * @return {?}\n     */\n    serializeBody() {\n        // If no body is present, no need to serialize it.\n        if (this.body === null) {\n            return null;\n        }\n        // Check whether the body is already in a serialized form. If so,\n        // it can just be returned directly.\n        if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) ||\n            typeof this.body === 'string') {\n            return this.body;\n        }\n        // Check whether the body is an instance of HttpUrlEncodedParams.\n        if (this.body instanceof HttpParams) {\n            return this.body.toString();\n        }\n        // Check whether the body is an object or array, and serialize with JSON if so.\n        if (typeof this.body === 'object' || typeof this.body === 'boolean' ||\n            Array.isArray(this.body)) {\n            return JSON.stringify(this.body);\n        }\n        // Fall back on toString() for everything else.\n        return ((/** @type {?} */ (this.body))).toString();\n    }\n    /**\n     * Examine the body and attempt to infer an appropriate MIME type\n     * for it.\n     *\n     * If no such type can be inferred, this method will return `null`.\n     * @return {?}\n     */\n    detectContentTypeHeader() {\n        // An empty body has no content type.\n        if (this.body === null) {\n            return null;\n        }\n        // FormData bodies rely on the browser's content type assignment.\n        if (isFormData(this.body)) {\n            return null;\n        }\n        // Blobs usually have their own content type. If it doesn't, then\n        // no type can be inferred.\n        if (isBlob(this.body)) {\n            return this.body.type || null;\n        }\n        // Array buffers have unknown contents and thus no type can be inferred.\n        if (isArrayBuffer(this.body)) {\n            return null;\n        }\n        // Technically, strings could be a form of JSON data, but it's safe enough\n        // to assume they're plain strings.\n        if (typeof this.body === 'string') {\n            return 'text/plain';\n        }\n        // `HttpUrlEncodedParams` has its own content-type.\n        if (this.body instanceof HttpParams) {\n            return 'application/x-www-form-urlencoded;charset=UTF-8';\n        }\n        // Arrays, objects, and numbers will be encoded as JSON.\n        if (typeof this.body === 'object' || typeof this.body === 'number' ||\n            Array.isArray(this.body)) {\n            return 'application/json';\n        }\n        // No type could be inferred.\n        return null;\n    }\n    /**\n     * @param {?=} update\n     * @return {?}\n     */\n    clone(update = {}) {\n        // For method, url, and responseType, take the current value unless\n        // it is overridden in the update hash.\n        /** @type {?} */\n        const method = update.method || this.method;\n        /** @type {?} */\n        const url = update.url || this.url;\n        /** @type {?} */\n        const responseType = update.responseType || this.responseType;\n        // The body is somewhat special - a `null` value in update.body means\n        // whatever current body is present is being overridden with an empty\n        // body, whereas an `undefined` value in update.body implies no\n        // override.\n        /** @type {?} */\n        const body = (update.body !== undefined) ? update.body : this.body;\n        // Carefully handle the boolean options to differentiate between\n        // `false` and `undefined` in the update args.\n        /** @type {?} */\n        const withCredentials = (update.withCredentials !== undefined) ? update.withCredentials : this.withCredentials;\n        /** @type {?} */\n        const reportProgress = (update.reportProgress !== undefined) ? update.reportProgress : this.reportProgress;\n        // Headers and params may be appended to if `setHeaders` or\n        // `setParams` are used.\n        /** @type {?} */\n        let headers = update.headers || this.headers;\n        /** @type {?} */\n        let params = update.params || this.params;\n        // Check whether the caller has asked to add headers.\n        if (update.setHeaders !== undefined) {\n            // Set every requested header.\n            headers =\n                Object.keys(update.setHeaders)\n                    .reduce((/**\n                 * @param {?} headers\n                 * @param {?} name\n                 * @return {?}\n                 */\n                (headers, name) => headers.set(name, (/** @type {?} */ (update.setHeaders))[name])), headers);\n        }\n        // Check whether the caller has asked to set params.\n        if (update.setParams) {\n            // Set every requested param.\n            params = Object.keys(update.setParams)\n                .reduce((/**\n             * @param {?} params\n             * @param {?} param\n             * @return {?}\n             */\n            (params, param) => params.set(param, (/** @type {?} */ (update.setParams))[param])), params);\n        }\n        // Finally, construct the new HttpRequest using the pieces from above.\n        return new HttpRequest(method, url, body, {\n            params, headers, reportProgress, responseType, withCredentials,\n        });\n    }\n}\nif (false) {}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @enum {number} */\nconst HttpEventType = {\n    /**\n     * The request was sent out over the wire.\n     */\n    Sent: 0,\n    /**\n     * An upload progress event was received.\n     */\n    UploadProgress: 1,\n    /**\n     * The response status code and headers were received.\n     */\n    ResponseHeader: 2,\n    /**\n     * A download progress event was received.\n     */\n    DownloadProgress: 3,\n    /**\n     * The full response including the body was received.\n     */\n    Response: 4,\n    /**\n     * A custom event from an interceptor or a backend.\n     */\n    User: 5,\n};\nHttpEventType[HttpEventType.Sent] = 'Sent';\nHttpEventType[HttpEventType.UploadProgress] = 'UploadProgress';\nHttpEventType[HttpEventType.ResponseHeader] = 'ResponseHeader';\nHttpEventType[HttpEventType.DownloadProgress] = 'DownloadProgress';\nHttpEventType[HttpEventType.Response] = 'Response';\nHttpEventType[HttpEventType.User] = 'User';\n/**\n * Base interface for progress events.\n *\n * \\@publicApi\n * @record\n */\nfunction HttpProgressEvent() { }\nif (false) {}\n/**\n * A download progress event.\n *\n * \\@publicApi\n * @record\n */\nfunction HttpDownloadProgressEvent() { }\nif (false) {}\n/**\n * An upload progress event.\n *\n * \\@publicApi\n * @record\n */\nfunction HttpUploadProgressEvent() { }\nif (false) {}\n/**\n * An event indicating that the request was sent to the server. Useful\n * when a request may be retried multiple times, to distinguish between\n * retries on the final event stream.\n *\n * \\@publicApi\n * @record\n */\nfunction HttpSentEvent() { }\nif (false) {}\n/**\n * A user-defined event.\n *\n * Grouping all custom events under this type ensures they will be handled\n * and forwarded by all implementations of interceptors.\n *\n * \\@publicApi\n * @record\n * @template T\n */\nfunction HttpUserEvent() { }\nif (false) {}\n/**\n * An error that represents a failed attempt to JSON.parse text coming back\n * from the server.\n *\n * It bundles the Error object with the actual response body that failed to parse.\n *\n *\n * @record\n */\nfunction HttpJsonParseError() { }\nif (false) {}\n/**\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\n *\n * \\@publicApi\n * @abstract\n */\nclass HttpResponseBase {\n    /**\n     * Super-constructor for all responses.\n     *\n     * The single parameter accepted is an initialization hash. Any properties\n     * of the response passed there will override the default values.\n     * @param {?} init\n     * @param {?=} defaultStatus\n     * @param {?=} defaultStatusText\n     */\n    constructor(init, defaultStatus = 200, defaultStatusText = 'OK') {\n        // If the hash has values passed, use them to initialize the response.\n        // Otherwise use the default values.\n        this.headers = init.headers || new HttpHeaders();\n        this.status = init.status !== undefined ? init.status : defaultStatus;\n        this.statusText = init.statusText || defaultStatusText;\n        this.url = init.url || null;\n        // Cache the ok value to avoid defining a getter.\n        this.ok = this.status >= 200 && this.status < 300;\n    }\n}\nif (false) {}\n/**\n * A partial HTTP response which only includes the status and header data,\n * but no response body.\n *\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\n * event stream, only when progress events are requested.\n *\n * \\@publicApi\n */\nclass HttpHeaderResponse extends HttpResponseBase {\n    /**\n     * Create a new `HttpHeaderResponse` with the given parameters.\n     * @param {?=} init\n     */\n    constructor(init = {}) {\n        super(init);\n        this.type = HttpEventType.ResponseHeader;\n    }\n    /**\n     * Copy this `HttpHeaderResponse`, overriding its contents with the\n     * given parameter hash.\n     * @param {?=} update\n     * @return {?}\n     */\n    clone(update = {}) {\n        // Perform a straightforward initialization of the new HttpHeaderResponse,\n        // overriding the current parameters with new ones if given.\n        return new HttpHeaderResponse({\n            headers: update.headers || this.headers,\n            status: update.status !== undefined ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    }\n}\nif (false) {}\n/**\n * A full HTTP response, including a typed response body (which may be `null`\n * if one was not returned).\n *\n * `HttpResponse` is a `HttpEvent` available on the response event\n * stream.\n *\n * \\@publicApi\n * @template T\n */\nclass HttpResponse extends HttpResponseBase {\n    /**\n     * Construct a new `HttpResponse`.\n     * @param {?=} init\n     */\n    constructor(init = {}) {\n        super(init);\n        this.type = HttpEventType.Response;\n        this.body = init.body !== undefined ? init.body : null;\n    }\n    /**\n     * @param {?=} update\n     * @return {?}\n     */\n    clone(update = {}) {\n        return new HttpResponse({\n            body: (update.body !== undefined) ? update.body : this.body,\n            headers: update.headers || this.headers,\n            status: (update.status !== undefined) ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    }\n}\nif (false) {}\n/**\n * A response that represents an error or failure, either from a\n * non-successful HTTP status, an error while executing the request,\n * or some other failure which occurred during the parsing of the response.\n *\n * Any error returned on the `Observable` response stream will be\n * wrapped in an `HttpErrorResponse` to provide additional context about\n * the state of the HTTP layer when the error occurred. The error property\n * will contain either a wrapped Error object or the error response returned\n * from the server.\n *\n * \\@publicApi\n */\nclass HttpErrorResponse extends HttpResponseBase {\n    /**\n     * @param {?} init\n     */\n    constructor(init) {\n        // Initialize with a default status of 0 / Unknown Error.\n        super(init, 0, 'Unknown Error');\n        this.name = 'HttpErrorResponse';\n        /**\n         * Errors are never okay, even when the status code is in the 2xx success range.\n         */\n        this.ok = false;\n        // If the response was successful, then this was a parse error. Otherwise, it was\n        // a protocol-level failure of some sort. Either the request failed in transit\n        // or the server returned an unsuccessful status code.\n        if (this.status >= 200 && this.status < 300) {\n            this.message = `Http failure during parsing for ${init.url || '(unknown url)'}`;\n        }\n        else {\n            this.message =\n                `Http failure response for ${init.url || '(unknown url)'}: ${init.status} ${init.statusText}`;\n        }\n        this.error = init.error || null;\n    }\n}\nif (false) {}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Constructs an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\n * the given `body`. This function clones the object and adds the body.\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n *\n * @template T\n * @param {?} options\n * @param {?} body\n * @return {?}\n */\nfunction addBody(options, body) {\n    return {\n        body,\n        headers: options.headers,\n        observe: options.observe,\n        params: options.params,\n        reportProgress: options.reportProgress,\n        responseType: options.responseType,\n        withCredentials: options.withCredentials,\n    };\n}\n/**\n * Performs HTTP requests.\n * This service is available as an injectable class, with methods to perform HTTP requests.\n * Each request method has multiple signatures, and the return type varies based on\n * the signature that is called (mainly the values of `observe` and `responseType`).\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n *\n * \\@usageNotes\n * Sample HTTP requests for the [Tour of Heroes](/tutorial/toh-pt0) application.\n *\n * ### HTTP Request Example\n *\n * ```\n *  // GET heroes whose name contains search term\n * searchHeroes(term: string): observable<Hero[]>{\n *\n *  const params = new HttpParams({fromString: 'name=term'});\n *    return this.httpClient.request('GET', this.heroesUrl, {responseType:'json', params});\n * }\n * ```\n * ### JSONP Example\n * ```\n * requestJsonp(url, callback = 'callback') {\n *  return this.httpClient.jsonp(this.heroesURL, callback);\n * }\n * ```\n *\n * ### PATCH Example\n * ```\n * // PATCH one of the heroes' name\n * patchHero (id: number, heroName: string): Observable<{}> {\n * const url = `${this.heroesUrl}/${id}`;   // PATCH api/heroes/42\n *  return this.httpClient.patch(url, {name: heroName}, httpOptions)\n *    .pipe(catchError(this.handleError('patchHero')));\n * }\n * ```\n *\n * @see [HTTP Guide](guide/http)\n *\n * \\@publicApi\n */\nclass HttpClient {\n    /**\n     * @param {?} handler\n     */\n    constructor(handler) {\n        this.handler = handler;\n    }\n    /**\n     * Constructs an observable for a generic HTTP request that, when subscribed,\n     * fires the request through the chain of registered interceptors and on to the\n     * server.\n     *\n     * You can pass an `HttpRequest` directly as the only parameter. In this case,\n     * the call returns an observable of the raw `HttpEvent` stream.\n     *\n     * Alternatively you can pass an HTTP method as the first parameter,\n     * a URL string as the second, and an options hash containing the request body as the third.\n     * See `addBody()`. In this case, the specified `responseType` and `observe` options determine the\n     * type of returned observable.\n     *   * The `responseType` value determines how a successful response body is parsed.\n     *   * If `responseType` is the default `json`, you can pass a type interface for the resulting\n     * object as a type parameter to the call.\n     *\n     * The `observe` value determines the return type, according to what you are interested in\n     * observing.\n     *   * An `observe` value of events returns an observable of the raw `HttpEvent` stream, including\n     * progress events by default.\n     *   * An `observe` value of response returns an observable of `HttpResponse<T>`,\n     * where the `T` parameter depends on the `responseType` and any optionally provided type\n     * parameter.\n     *   * An `observe` value of body returns an observable of `<T>` with the same `T` body type.\n     *\n     * @param {?} first\n     * @param {?=} url\n     * @param {?=} options\n     * @return {?}\n     */\n    request(first, url, options = {}) {\n        /** @type {?} */\n        let req;\n        // First, check whether the primary argument is an instance of `HttpRequest`.\n        if (first instanceof HttpRequest) {\n            // It is. The other arguments must be undefined (per the signatures) and can be\n            // ignored.\n            req = (/** @type {?} */ (first));\n        }\n        else {\n            // It's a string, so it represents a URL. Construct a request based on it,\n            // and incorporate the remaining arguments (assuming `GET` unless a method is\n            // provided.\n            // Figure out the headers.\n            /** @type {?} */\n            let headers = undefined;\n            if (options.headers instanceof HttpHeaders) {\n                headers = options.headers;\n            }\n            else {\n                headers = new HttpHeaders(options.headers);\n            }\n            // Sort out parameters.\n            /** @type {?} */\n            let params = undefined;\n            if (!!options.params) {\n                if (options.params instanceof HttpParams) {\n                    params = options.params;\n                }\n                else {\n                    params = new HttpParams((/** @type {?} */ ({ fromObject: options.params })));\n                }\n            }\n            // Construct the request.\n            req = new HttpRequest(first, (/** @type {?} */ (url)), (options.body !== undefined ? options.body : null), {\n                headers,\n                params,\n                reportProgress: options.reportProgress,\n                // By default, JSON is assumed to be returned for all calls.\n                responseType: options.responseType || 'json',\n                withCredentials: options.withCredentials,\n            });\n        }\n        // Start with an Observable.of() the initial request, and run the handler (which\n        // includes all interceptors) inside a concatMap(). This way, the handler runs\n        // inside an Observable chain, which causes interceptors to be re-run on every\n        // subscription (this also makes retries re-run the handler, including interceptors).\n        /** @type {?} */\n        const events$ = Object(rxjs__WEBPACK_IMPORTED_MODULE_1__[\"of\"])(req).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__[\"concatMap\"])((/**\n         * @param {?} req\n         * @return {?}\n         */\n        (req) => this.handler.handle(req))));\n        // If coming via the API signature which accepts a previously constructed HttpRequest,\n        // the only option is to get the event stream. Otherwise, return the event stream if\n        // that is what was requested.\n        if (first instanceof HttpRequest || options.observe === 'events') {\n            return events$;\n        }\n        // The requested stream contains either the full response or the body. In either\n        // case, the first step is to filter the event stream to extract a stream of\n        // responses(s).\n        /** @type {?} */\n        const res$ = (/** @type {?} */ (events$.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__[\"filter\"])((/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => event instanceof HttpResponse)))));\n        // Decide which stream to return.\n        switch (options.observe || 'body') {\n            case 'body':\n                // The requested stream is the body. Map the response stream to the response\n                // body. This could be done more simply, but a misbehaving interceptor might\n                // transform the response body into a different format and ignore the requested\n                // responseType. Guard against this by validating that the response is of the\n                // requested type.\n                switch (req.responseType) {\n                    case 'arraybuffer':\n                        return res$.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__[\"map\"])((/**\n                         * @param {?} res\n                         * @return {?}\n                         */\n                        (res) => {\n                            // Validate that the body is an ArrayBuffer.\n                            if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\n                                throw new Error('Response is not an ArrayBuffer.');\n                            }\n                            return res.body;\n                        })));\n                    case 'blob':\n                        return res$.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__[\"map\"])((/**\n                         * @param {?} res\n                         * @return {?}\n                         */\n                        (res) => {\n                            // Validate that the body is a Blob.\n                            if (res.body !== null && !(res.body instanceof Blob)) {\n                                throw new Error('Response is not a Blob.');\n                            }\n                            return res.body;\n                        })));\n                    case 'text':\n                        return res$.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__[\"map\"])((/**\n                         * @param {?} res\n                         * @return {?}\n                         */\n                        (res) => {\n                            // Validate that the body is a string.\n                            if (res.body !== null && typeof res.body !== 'string') {\n                                throw new Error('Response is not a string.');\n                            }\n                            return res.body;\n                        })));\n                    case 'json':\n                    default:\n                        // No validation needed for JSON responses, as they can be of any type.\n                        return res$.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__[\"map\"])((/**\n                         * @param {?} res\n                         * @return {?}\n                         */\n                        (res) => res.body)));\n                }\n            case 'response':\n                // The response stream was requested directly, so return it.\n                return res$;\n            default:\n                // Guard against new future observe types being added.\n                throw new Error(`Unreachable: unhandled observe type ${options.observe}}`);\n        }\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `DELETE` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     *\n     * @param {?} url     The endpoint URL.\n     * @param {?=} options The HTTP options to send with the request.\n     *\n     * @return {?}\n     */\n    delete(url, options = {}) {\n        return this.request('DELETE', url, (/** @type {?} */ (options)));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `GET` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    get(url, options = {}) {\n        return this.request('GET', url, (/** @type {?} */ (options)));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `HEAD` request to execute on the server. The `HEAD` method returns\n     * meta information about the resource without transferring the\n     * resource itself. See the individual overloads for\n     * details on the return type.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    head(url, options = {}) {\n        return this.request('HEAD', url, (/** @type {?} */ (options)));\n    }\n    /**\n     * Constructs an `Observable` that, when subscribed, causes a request with the special method\n     * `JSONP` to be dispatched via the interceptor pipeline.\n     * The [JSONP pattern](https://en.wikipedia.org/wiki/JSONP) works around limitations of certain\n     * API endpoints that don't support newer,\n     * and preferable [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) protocol.\n     * JSONP treats the endpoint API as a JavaScript file and tricks the browser to process the\n     * requests even if the API endpoint is not located on the same domain (origin) as the client-side\n     * application making the request.\n     * The endpoint API must support JSONP callback for JSONP requests to work.\n     * The resource API returns the JSON response wrapped in a callback function.\n     * You can pass the callback function name as one of the query parameters.\n     * Note that JSONP requests can only be used with `GET` requests.\n     *\n     * @template T\n     * @param {?} url The resource URL.\n     * @param {?} callbackParam The callback function name.\n     *\n     * @return {?}\n     */\n    jsonp(url, callbackParam) {\n        return this.request('JSONP', url, {\n            params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\n            observe: 'body',\n            responseType: 'json',\n        });\n    }\n    /**\n     * Constructs an `Observable` that, when subscribed, causes the configured\n     * `OPTIONS` request to execute on the server. This method allows the client\n     * to determine the supported HTTP methods and other capabilites of an endpoint,\n     * without implying a resource action. See the individual overloads for\n     * details on the return type.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    options(url, options = {}) {\n        return this.request('OPTIONS', url, (/** @type {?} */ (options)));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `PATCH` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    patch(url, body, options = {}) {\n        return this.request('PATCH', url, addBody(options, body));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `POST` request to execute on the server. The server responds with the location of\n     * the replaced resource. See the individual overloads for\n     * details on the return type.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    post(url, body, options = {}) {\n        return this.request('POST', url, addBody(options, body));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `PUT` request to execute on the server. The `PUT` method replaces an existing resource\n     * with a new set of values.\n     * See the individual overloads for details on the return type.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    put(url, body, options = {}) {\n        return this.request('PUT', url, addBody(options, body));\n    }\n}\nHttpClient.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Injectable\"] }\n];\n/** @nocollapse */\nHttpClient.ctorParameters = () => [\n    { type: HttpHandler }\n];\nif (false) {}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Intercepts and handles an `HttpRequest` or `HttpResponse`.\n *\n * Most interceptors transform the outgoing request before passing it to the\n * next interceptor in the chain, by calling `next.handle(transformedReq)`.\n * An interceptor may transform the\n * response event stream as well, by applying additional RxJS operators on the stream\n * returned by `next.handle()`.\n *\n * More rarely, an interceptor may handle the request entirely,\n * and compose a new event stream instead of invoking `next.handle()`. This is an\n * acceptable behavior, but keep in mind that further interceptors will be skipped entirely.\n *\n * It is also rare but valid for an interceptor to return multiple responses on the\n * event stream for a single request.\n *\n * \\@publicApi\n *\n * @see [HTTP Guide](guide/http#intercepting-requests-and-responses)\n *\n * \\@usageNotes\n *\n * To use the same instance of `HttpInterceptors` for the entire app, import the `HttpClientModule`\n * only in your `AppModule`, and add the interceptors to the root application injector .\n * If you import `HttpClientModule` multiple times across different modules (for example, in lazy\n * loading modules), each import creates a new copy of the `HttpClientModule`, which overwrites the interceptors\n * provided in the root module.\n *\n * @record\n */\nfunction HttpInterceptor() { }\nif (false) {}\n/**\n * `HttpHandler` which applies an `HttpInterceptor` to an `HttpRequest`.\n *\n *\n */\nclass HttpInterceptorHandler {\n    /**\n     * @param {?} next\n     * @param {?} interceptor\n     */\n    constructor(next, interceptor) {\n        this.next = next;\n        this.interceptor = interceptor;\n    }\n    /**\n     * @param {?} req\n     * @return {?}\n     */\n    handle(req) {\n        return this.interceptor.intercept(req, this.next);\n    }\n}\nif (false) {}\n/**\n * A multi-provider token that represents the array of registered\n * `HttpInterceptor` objects.\n *\n * \\@publicApi\n * @type {?}\n */\nconst HTTP_INTERCEPTORS = new _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"InjectionToken\"]('HTTP_INTERCEPTORS');\nclass NoopInterceptor {\n    /**\n     * @param {?} req\n     * @param {?} next\n     * @return {?}\n     */\n    intercept(req, next) {\n        return next.handle(req);\n    }\n}\nNoopInterceptor.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Injectable\"] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Every request made through JSONP needs a callback name that's unique across the\n// whole page. Each request is assigned an id and the callback name is constructed\n// from that. The next id to be assigned is tracked in a global variable here that\n// is shared among all applications on the page.\n/** @type {?} */\nlet nextRequestId = 0;\n// Error text given when a JSONP script is injected, but doesn't invoke the callback\n// passed in its URL.\n/** @type {?} */\nconst JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\n// Error text given when a request is passed to the JsonpClientBackend that doesn't\n// have a request method JSONP.\n/** @type {?} */\nconst JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\n/** @type {?} */\nconst JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';\n/**\n * DI token/abstract type representing a map of JSONP callbacks.\n *\n * In the browser, this should always be the `window` object.\n *\n *\n * @abstract\n */\nclass JsonpCallbackContext {\n}\n/**\n * Processes an `HttpRequest` with the JSONP method,\n * by performing JSONP style requests.\n * @see `HttpHandler`\n * @see `HttpXhrBackend`\n *\n * \\@publicApi\n */\nclass JsonpClientBackend {\n    /**\n     * @param {?} callbackMap\n     * @param {?} document\n     */\n    constructor(callbackMap, document) {\n        this.callbackMap = callbackMap;\n        this.document = document;\n    }\n    /**\n     * Get the name of the next callback method, by incrementing the global `nextRequestId`.\n     * @private\n     * @return {?}\n     */\n    nextCallback() { return `ng_jsonp_callback_${nextRequestId++}`; }\n    /**\n     * Processes a JSONP request and returns an event stream of the results.\n     * @param {?} req The request object.\n     * @return {?} An observable of the response events.\n     *\n     */\n    handle(req) {\n        // Firstly, check both the method and response type. If either doesn't match\n        // then the request was improperly routed here and cannot be handled.\n        if (req.method !== 'JSONP') {\n            throw new Error(JSONP_ERR_WRONG_METHOD);\n        }\n        else if (req.responseType !== 'json') {\n            throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);\n        }\n        // Everything else happens inside the Observable boundary.\n        return new rxjs__WEBPACK_IMPORTED_MODULE_1__[\"Observable\"]((/**\n         * @param {?} observer\n         * @return {?}\n         */\n        (observer) => {\n            // The first step to make a request is to generate the callback name, and replace the\n            // callback placeholder in the URL with the name. Care has to be taken here to ensure\n            // a trailing &, if matched, gets inserted back into the URL in the correct place.\n            /** @type {?} */\n            const callback = this.nextCallback();\n            /** @type {?} */\n            const url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, `=${callback}$1`);\n            // Construct the <script> tag and point it at the URL.\n            /** @type {?} */\n            const node = this.document.createElement('script');\n            node.src = url;\n            // A JSONP request requires waiting for multiple callbacks. These variables\n            // are closed over and track state across those callbacks.\n            // The response object, if one has been received, or null otherwise.\n            /** @type {?} */\n            let body = null;\n            // Whether the response callback has been called.\n            /** @type {?} */\n            let finished = false;\n            // Whether the request has been cancelled (and thus any other callbacks)\n            // should be ignored.\n            /** @type {?} */\n            let cancelled = false;\n            // Set the response callback in this.callbackMap (which will be the window\n            // object in the browser. The script being loaded via the <script> tag will\n            // eventually call this callback.\n            this.callbackMap[callback] = (/**\n             * @param {?=} data\n             * @return {?}\n             */\n            (data) => {\n                // Data has been received from the JSONP script. Firstly, delete this callback.\n                delete this.callbackMap[callback];\n                // Next, make sure the request wasn't cancelled in the meantime.\n                if (cancelled) {\n                    return;\n                }\n                // Set state to indicate data was received.\n                body = data;\n                finished = true;\n            });\n            // cleanup() is a utility closure that removes the <script> from the page and\n            // the response callback from the window. This logic is used in both the\n            // success, error, and cancellation paths, so it's extracted out for convenience.\n            /** @type {?} */\n            const cleanup = (/**\n             * @return {?}\n             */\n            () => {\n                // Remove the <script> tag if it's still on the page.\n                if (node.parentNode) {\n                    node.parentNode.removeChild(node);\n                }\n                // Remove the response callback from the callbackMap (window object in the\n                // browser).\n                delete this.callbackMap[callback];\n            });\n            // onLoad() is the success callback which runs after the response callback\n            // if the JSONP script loads successfully. The event itself is unimportant.\n            // If something went wrong, onLoad() may run without the response callback\n            // having been invoked.\n            /** @type {?} */\n            const onLoad = (/**\n             * @param {?} event\n             * @return {?}\n             */\n            (event) => {\n                // Do nothing if the request has been cancelled.\n                if (cancelled) {\n                    return;\n                }\n                // Cleanup the page.\n                cleanup();\n                // Check whether the response callback has run.\n                if (!finished) {\n                    // It hasn't, something went wrong with the request. Return an error via\n                    // the Observable error path. All JSONP errors have status 0.\n                    observer.error(new HttpErrorResponse({\n                        url,\n                        status: 0,\n                        statusText: 'JSONP Error',\n                        error: new Error(JSONP_ERR_NO_CALLBACK),\n                    }));\n                    return;\n                }\n                // Success. body either contains the response body or null if none was\n                // returned.\n                observer.next(new HttpResponse({\n                    body,\n                    status: 200,\n                    statusText: 'OK', url,\n                }));\n                // Complete the stream, the response is over.\n                observer.complete();\n            });\n            // onError() is the error callback, which runs if the script returned generates\n            // a Javascript error. It emits the error via the Observable error channel as\n            // a HttpErrorResponse.\n            /** @type {?} */\n            const onError = (/**\n             * @param {?} error\n             * @return {?}\n             */\n            (error) => {\n                // If the request was already cancelled, no need to emit anything.\n                if (cancelled) {\n                    return;\n                }\n                cleanup();\n                // Wrap the error in a HttpErrorResponse.\n                observer.error(new HttpErrorResponse({\n                    error,\n                    status: 0,\n                    statusText: 'JSONP Error', url,\n                }));\n            });\n            // Subscribe to both the success (load) and error events on the <script> tag,\n            // and add it to the page.\n            node.addEventListener('load', onLoad);\n            node.addEventListener('error', onError);\n            this.document.body.appendChild(node);\n            // The request has now been successfully sent.\n            observer.next({ type: HttpEventType.Sent });\n            // Cancellation handler.\n            return (/**\n             * @return {?}\n             */\n            () => {\n                // Track the cancellation so event listeners won't do anything even if already scheduled.\n                cancelled = true;\n                // Remove the event listeners so they won't run if the events later fire.\n                node.removeEventListener('load', onLoad);\n                node.removeEventListener('error', onError);\n                // And finally, clean up the page.\n                cleanup();\n            });\n        }));\n    }\n}\nJsonpClientBackend.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Injectable\"] }\n];\n/** @nocollapse */\nJsonpClientBackend.ctorParameters = () => [\n    { type: JsonpCallbackContext },\n    { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Inject\"], args: [_angular_common__WEBPACK_IMPORTED_MODULE_3__[\"DOCUMENT\"],] }] }\n];\nif (false) {}\n/**\n * Identifies requests with the method JSONP and\n * shifts them to the `JsonpClientBackend`.\n *\n * @see `HttpInterceptor`\n *\n * \\@publicApi\n */\nclass JsonpInterceptor {\n    /**\n     * @param {?} jsonp\n     */\n    constructor(jsonp) {\n        this.jsonp = jsonp;\n    }\n    /**\n     * Identifies and handles a given JSONP request.\n     * @param {?} req The outgoing request object to handle.\n     * @param {?} next The next interceptor in the chain, or the backend\n     * if no interceptors remain in the chain.\n     * @return {?} An observable of the event stream.\n     */\n    intercept(req, next) {\n        if (req.method === 'JSONP') {\n            return this.jsonp.handle((/** @type {?} */ (req)));\n        }\n        // Fall through for normal HTTP requests.\n        return next.handle(req);\n    }\n}\nJsonpInterceptor.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Injectable\"] }\n];\n/** @nocollapse */\nJsonpInterceptor.ctorParameters = () => [\n    { type: JsonpClientBackend }\n];\nif (false) {}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Determine an appropriate URL for the response, by checking either\n * XMLHttpRequest.responseURL or the X-Request-URL header.\n * @param {?} xhr\n * @return {?}\n */\nfunction getResponseUrl(xhr) {\n    if ('responseURL' in xhr && xhr.responseURL) {\n        return xhr.responseURL;\n    }\n    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n        return xhr.getResponseHeader('X-Request-URL');\n    }\n    return null;\n}\n/**\n * A wrapper around the `XMLHttpRequest` constructor.\n *\n * \\@publicApi\n * @abstract\n */\nclass XhrFactory {\n}\nif (false) {}\n/**\n * A factory for `HttpXhrBackend` that uses the `XMLHttpRequest` browser API.\n *\n */\nclass BrowserXhr {\n    constructor() { }\n    /**\n     * @return {?}\n     */\n    build() { return (/** @type {?} */ ((new XMLHttpRequest()))); }\n}\nBrowserXhr.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Injectable\"] }\n];\n/** @nocollapse */\nBrowserXhr.ctorParameters = () => [];\n/**\n * Tracks a response from the server that does not yet have a body.\n * @record\n */\nfunction PartialResponse() { }\nif (false) {}\n/**\n * Uses `XMLHttpRequest` to send requests to a backend server.\n * @see `HttpHandler`\n * @see `JsonpClientBackend`\n *\n * \\@publicApi\n */\nclass HttpXhrBackend {\n    /**\n     * @param {?} xhrFactory\n     */\n    constructor(xhrFactory) {\n        this.xhrFactory = xhrFactory;\n    }\n    /**\n     * Processes a request and returns a stream of response events.\n     * @param {?} req The request object.\n     * @return {?} An observable of the response events.\n     */\n    handle(req) {\n        // Quick check to give a better error message when a user attempts to use\n        // HttpClient.jsonp() without installing the JsonpClientModule\n        if (req.method === 'JSONP') {\n            throw new Error(`Attempted to construct Jsonp request without JsonpClientModule installed.`);\n        }\n        // Everything happens on Observable subscription.\n        return new rxjs__WEBPACK_IMPORTED_MODULE_1__[\"Observable\"]((/**\n         * @param {?} observer\n         * @return {?}\n         */\n        (observer) => {\n            // Start by setting up the XHR object with request method, URL, and withCredentials flag.\n            /** @type {?} */\n            const xhr = this.xhrFactory.build();\n            xhr.open(req.method, req.urlWithParams);\n            if (!!req.withCredentials) {\n                xhr.withCredentials = true;\n            }\n            // Add all the requested headers.\n            req.headers.forEach((/**\n             * @param {?} name\n             * @param {?} values\n             * @return {?}\n             */\n            (name, values) => xhr.setRequestHeader(name, values.join(','))));\n            // Add an Accept header if one isn't present already.\n            if (!req.headers.has('Accept')) {\n                xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');\n            }\n            // Auto-detect the Content-Type header if one isn't present already.\n            if (!req.headers.has('Content-Type')) {\n                /** @type {?} */\n                const detectedType = req.detectContentTypeHeader();\n                // Sometimes Content-Type detection fails.\n                if (detectedType !== null) {\n                    xhr.setRequestHeader('Content-Type', detectedType);\n                }\n            }\n            // Set the responseType if one was requested.\n            if (req.responseType) {\n                /** @type {?} */\n                const responseType = req.responseType.toLowerCase();\n                // JSON responses need to be processed as text. This is because if the server\n                // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\n                // xhr.response will be null, and xhr.responseText cannot be accessed to\n                // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\n                // is parsed by first requesting text and then applying JSON.parse.\n                xhr.responseType = (/** @type {?} */ (((responseType !== 'json') ? responseType : 'text')));\n            }\n            // Serialize the request body if one is present. If not, this will be set to null.\n            /** @type {?} */\n            const reqBody = req.serializeBody();\n            // If progress events are enabled, response headers will be delivered\n            // in two events - the HttpHeaderResponse event and the full HttpResponse\n            // event. However, since response headers don't change in between these\n            // two events, it doesn't make sense to parse them twice. So headerResponse\n            // caches the data extracted from the response whenever it's first parsed,\n            // to ensure parsing isn't duplicated.\n            /** @type {?} */\n            let headerResponse = null;\n            // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\n            // state, and memoizes it into headerResponse.\n            /** @type {?} */\n            const partialFromXhr = (/**\n             * @return {?}\n             */\n            () => {\n                if (headerResponse !== null) {\n                    return headerResponse;\n                }\n                // Read status and normalize an IE9 bug (http://bugs.jquery.com/ticket/1450).\n                /** @type {?} */\n                const status = xhr.status === 1223 ? 204 : xhr.status;\n                /** @type {?} */\n                const statusText = xhr.statusText || 'OK';\n                // Parse headers from XMLHttpRequest - this step is lazy.\n                /** @type {?} */\n                const headers = new HttpHeaders(xhr.getAllResponseHeaders());\n                // Read the response URL from the XMLHttpResponse instance and fall back on the\n                // request URL.\n                /** @type {?} */\n                const url = getResponseUrl(xhr) || req.url;\n                // Construct the HttpHeaderResponse and memoize it.\n                headerResponse = new HttpHeaderResponse({ headers, status, statusText, url });\n                return headerResponse;\n            });\n            // Next, a few closures are defined for the various events which XMLHttpRequest can\n            // emit. This allows them to be unregistered as event listeners later.\n            // First up is the load event, which represents a response being fully available.\n            /** @type {?} */\n            const onLoad = (/**\n             * @return {?}\n             */\n            () => {\n                // Read response state from the memoized partial data.\n                let { headers, status, statusText, url } = partialFromXhr();\n                // The body will be read out if present.\n                /** @type {?} */\n                let body = null;\n                if (status !== 204) {\n                    // Use XMLHttpRequest.response if set, responseText otherwise.\n                    body = (typeof xhr.response === 'undefined') ? xhr.responseText : xhr.response;\n                }\n                // Normalize another potential bug (this one comes from CORS).\n                if (status === 0) {\n                    status = !!body ? 200 : 0;\n                }\n                // ok determines whether the response will be transmitted on the event or\n                // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n                // but a successful status code can still result in an error if the user\n                // asked for JSON data and the body cannot be parsed as such.\n                /** @type {?} */\n                let ok = status >= 200 && status < 300;\n                // Check whether the body needs to be parsed as JSON (in many cases the browser\n                // will have done that already).\n                if (req.responseType === 'json' && typeof body === 'string') {\n                    // Save the original body, before attempting XSSI prefix stripping.\n                    /** @type {?} */\n                    const originalBody = body;\n                    body = body.replace(XSSI_PREFIX, '');\n                    try {\n                        // Attempt the parse. If it fails, a parse error should be delivered to the user.\n                        body = body !== '' ? JSON.parse(body) : null;\n                    }\n                    catch (error) {\n                        // Since the JSON.parse failed, it's reasonable to assume this might not have been a\n                        // JSON response. Restore the original body (including any XSSI prefix) to deliver\n                        // a better error response.\n                        body = originalBody;\n                        // If this was an error request to begin with, leave it as a string, it probably\n                        // just isn't JSON. Otherwise, deliver the parsing error to the user.\n                        if (ok) {\n                            // Even though the response status was 2xx, this is still an error.\n                            ok = false;\n                            // The parse error contains the text of the body that failed to parse.\n                            body = (/** @type {?} */ ({ error, text: body }));\n                        }\n                    }\n                }\n                if (ok) {\n                    // A successful response is delivered on the event stream.\n                    observer.next(new HttpResponse({\n                        body,\n                        headers,\n                        status,\n                        statusText,\n                        url: url || undefined,\n                    }));\n                    // The full body has been received and delivered, no further events\n                    // are possible. This request is complete.\n                    observer.complete();\n                }\n                else {\n                    // An unsuccessful request is delivered on the error channel.\n                    observer.error(new HttpErrorResponse({\n                        // The error in this case is the response body (error from the server).\n                        error: body,\n                        headers,\n                        status,\n                        statusText,\n                        url: url || undefined,\n                    }));\n                }\n            });\n            // The onError callback is called when something goes wrong at the network level.\n            // Connection timeout, DNS error, offline, etc. These are actual errors, and are\n            // transmitted on the error channel.\n            /** @type {?} */\n            const onError = (/**\n             * @param {?} error\n             * @return {?}\n             */\n            (error) => {\n                const { url } = partialFromXhr();\n                /** @type {?} */\n                const res = new HttpErrorResponse({\n                    error,\n                    status: xhr.status || 0,\n                    statusText: xhr.statusText || 'Unknown Error',\n                    url: url || undefined,\n                });\n                observer.error(res);\n            });\n            // The sentHeaders flag tracks whether the HttpResponseHeaders event\n            // has been sent on the stream. This is necessary to track if progress\n            // is enabled since the event will be sent on only the first download\n            // progerss event.\n            /** @type {?} */\n            let sentHeaders = false;\n            // The download progress event handler, which is only registered if\n            // progress events are enabled.\n            /** @type {?} */\n            const onDownProgress = (/**\n             * @param {?} event\n             * @return {?}\n             */\n            (event) => {\n                // Send the HttpResponseHeaders event if it hasn't been sent already.\n                if (!sentHeaders) {\n                    observer.next(partialFromXhr());\n                    sentHeaders = true;\n                }\n                // Start building the download progress event to deliver on the response\n                // event stream.\n                /** @type {?} */\n                let progressEvent = {\n                    type: HttpEventType.DownloadProgress,\n                    loaded: event.loaded,\n                };\n                // Set the total number of bytes in the event if it's available.\n                if (event.lengthComputable) {\n                    progressEvent.total = event.total;\n                }\n                // If the request was for text content and a partial response is\n                // available on XMLHttpRequest, include it in the progress event\n                // to allow for streaming reads.\n                if (req.responseType === 'text' && !!xhr.responseText) {\n                    progressEvent.partialText = xhr.responseText;\n                }\n                // Finally, fire the event.\n                observer.next(progressEvent);\n            });\n            // The upload progress event handler, which is only registered if\n            // progress events are enabled.\n            /** @type {?} */\n            const onUpProgress = (/**\n             * @param {?} event\n             * @return {?}\n             */\n            (event) => {\n                // Upload progress events are simpler. Begin building the progress\n                // event.\n                /** @type {?} */\n                let progress = {\n                    type: HttpEventType.UploadProgress,\n                    loaded: event.loaded,\n                };\n                // If the total number of bytes being uploaded is available, include\n                // it.\n                if (event.lengthComputable) {\n                    progress.total = event.total;\n                }\n                // Send the event.\n                observer.next(progress);\n            });\n            // By default, register for load and error events.\n            xhr.addEventListener('load', onLoad);\n            xhr.addEventListener('error', onError);\n            // Progress events are only enabled if requested.\n            if (req.reportProgress) {\n                // Download progress is always enabled if requested.\n                xhr.addEventListener('progress', onDownProgress);\n                // Upload progress depends on whether there is a body to upload.\n                if (reqBody !== null && xhr.upload) {\n                    xhr.upload.addEventListener('progress', onUpProgress);\n                }\n            }\n            // Fire the request, and notify the event stream that it was fired.\n            xhr.send((/** @type {?} */ (reqBody)));\n            observer.next({ type: HttpEventType.Sent });\n            // This is the return from the Observable function, which is the\n            // request cancellation handler.\n            return (/**\n             * @return {?}\n             */\n            () => {\n                // On a cancellation, remove all registered event listeners.\n                xhr.removeEventListener('error', onError);\n                xhr.removeEventListener('load', onLoad);\n                if (req.reportProgress) {\n                    xhr.removeEventListener('progress', onDownProgress);\n                    if (reqBody !== null && xhr.upload) {\n                        xhr.upload.removeEventListener('progress', onUpProgress);\n                    }\n                }\n                // Finally, abort the in-flight request.\n                xhr.abort();\n            });\n        }));\n    }\n}\nHttpXhrBackend.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Injectable\"] }\n];\n/** @nocollapse */\nHttpXhrBackend.ctorParameters = () => [\n    { type: XhrFactory }\n];\nif (false) {}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst XSRF_COOKIE_NAME = new _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"InjectionToken\"]('XSRF_COOKIE_NAME');\n/** @type {?} */\nconst XSRF_HEADER_NAME = new _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"InjectionToken\"]('XSRF_HEADER_NAME');\n/**\n * Retrieves the current XSRF token to use with the next outgoing request.\n *\n * \\@publicApi\n * @abstract\n */\nclass HttpXsrfTokenExtractor {\n}\nif (false) {}\n/**\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\n */\nclass HttpXsrfCookieExtractor {\n    /**\n     * @param {?} doc\n     * @param {?} platform\n     * @param {?} cookieName\n     */\n    constructor(doc, platform, cookieName) {\n        this.doc = doc;\n        this.platform = platform;\n        this.cookieName = cookieName;\n        this.lastCookieString = '';\n        this.lastToken = null;\n        /**\n         * \\@internal for testing\n         */\n        this.parseCount = 0;\n    }\n    /**\n     * @return {?}\n     */\n    getToken() {\n        if (this.platform === 'server') {\n            return null;\n        }\n        /** @type {?} */\n        const cookieString = this.doc.cookie || '';\n        if (cookieString !== this.lastCookieString) {\n            this.parseCount++;\n            this.lastToken = Object(_angular_common__WEBPACK_IMPORTED_MODULE_3__[\"ɵparseCookieValue\"])(cookieString, this.cookieName);\n            this.lastCookieString = cookieString;\n        }\n        return this.lastToken;\n    }\n}\nHttpXsrfCookieExtractor.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Injectable\"] }\n];\n/** @nocollapse */\nHttpXsrfCookieExtractor.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Inject\"], args: [_angular_common__WEBPACK_IMPORTED_MODULE_3__[\"DOCUMENT\"],] }] },\n    { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Inject\"], args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__[\"PLATFORM_ID\"],] }] },\n    { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Inject\"], args: [XSRF_COOKIE_NAME,] }] }\n];\nif (false) {}\n/**\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\n */\nclass HttpXsrfInterceptor {\n    /**\n     * @param {?} tokenService\n     * @param {?} headerName\n     */\n    constructor(tokenService, headerName) {\n        this.tokenService = tokenService;\n        this.headerName = headerName;\n    }\n    /**\n     * @param {?} req\n     * @param {?} next\n     * @return {?}\n     */\n    intercept(req, next) {\n        /** @type {?} */\n        const lcUrl = req.url.toLowerCase();\n        // Skip both non-mutating requests and absolute URLs.\n        // Non-mutating requests don't require a token, and absolute URLs require special handling\n        // anyway as the cookie set\n        // on our origin is not the same as the token expected by another origin.\n        if (req.method === 'GET' || req.method === 'HEAD' || lcUrl.startsWith('http://') ||\n            lcUrl.startsWith('https://')) {\n            return next.handle(req);\n        }\n        /** @type {?} */\n        const token = this.tokenService.getToken();\n        // Be careful not to overwrite an existing header of the same name.\n        if (token !== null && !req.headers.has(this.headerName)) {\n            req = req.clone({ headers: req.headers.set(this.headerName, token) });\n        }\n        return next.handle(req);\n    }\n}\nHttpXsrfInterceptor.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Injectable\"] }\n];\n/** @nocollapse */\nHttpXsrfInterceptor.ctorParameters = () => [\n    { type: HttpXsrfTokenExtractor },\n    { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Inject\"], args: [XSRF_HEADER_NAME,] }] }\n];\nif (false) {}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * An injectable `HttpHandler` that applies multiple interceptors\n * to a request before passing it to the given `HttpBackend`.\n *\n * The interceptors are loaded lazily from the injector, to allow\n * interceptors to themselves inject classes depending indirectly\n * on `HttpInterceptingHandler` itself.\n * @see `HttpInterceptor`\n */\nclass HttpInterceptingHandler {\n    /**\n     * @param {?} backend\n     * @param {?} injector\n     */\n    constructor(backend, injector) {\n        this.backend = backend;\n        this.injector = injector;\n        this.chain = null;\n    }\n    /**\n     * @param {?} req\n     * @return {?}\n     */\n    handle(req) {\n        if (this.chain === null) {\n            /** @type {?} */\n            const interceptors = this.injector.get(HTTP_INTERCEPTORS, []);\n            this.chain = interceptors.reduceRight((/**\n             * @param {?} next\n             * @param {?} interceptor\n             * @return {?}\n             */\n            (next, interceptor) => new HttpInterceptorHandler(next, interceptor)), this.backend);\n        }\n        return this.chain.handle(req);\n    }\n}\nHttpInterceptingHandler.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Injectable\"] }\n];\n/** @nocollapse */\nHttpInterceptingHandler.ctorParameters = () => [\n    { type: HttpBackend },\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Injector\"] }\n];\nif (false) {}\n/**\n * Constructs an `HttpHandler` that applies interceptors\n * to a request before passing it to the given `HttpBackend`.\n *\n * Use as a factory function within `HttpClientModule`.\n *\n *\n * @param {?} backend\n * @param {?=} interceptors\n * @return {?}\n */\nfunction interceptingHandler(backend, interceptors = []) {\n    if (!interceptors) {\n        return backend;\n    }\n    return interceptors.reduceRight((/**\n     * @param {?} next\n     * @param {?} interceptor\n     * @return {?}\n     */\n    (next, interceptor) => new HttpInterceptorHandler(next, interceptor)), backend);\n}\n/**\n * Factory function that determines where to store JSONP callbacks.\n *\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\n *\n *\n * @return {?}\n */\nfunction jsonpCallbackContext() {\n    if (typeof window === 'object') {\n        return window;\n    }\n    return {};\n}\n/**\n * Configures XSRF protection support for outgoing requests.\n *\n * For a server that supports a cookie-based XSRF protection system,\n * use directly to configure XSRF protection with the correct\n * cookie and header names.\n *\n * If no names are supplied, the default cookie name is `XSRF-TOKEN`\n * and the default header name is `X-XSRF-TOKEN`.\n *\n * \\@publicApi\n */\nclass HttpClientXsrfModule {\n    /**\n     * Disable the default XSRF protection.\n     * @return {?}\n     */\n    static disable() {\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: [\n                { provide: HttpXsrfInterceptor, useClass: NoopInterceptor },\n            ],\n        };\n    }\n    /**\n     * Configure XSRF protection.\n     * @param {?=} options An object that can specify either or both\n     * cookie name or header name.\n     * - Cookie name default is `XSRF-TOKEN`.\n     * - Header name default is `X-XSRF-TOKEN`.\n     *\n     * @return {?}\n     */\n    static withOptions(options = {}) {\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: [\n                options.cookieName ? { provide: XSRF_COOKIE_NAME, useValue: options.cookieName } : [],\n                options.headerName ? { provide: XSRF_HEADER_NAME, useValue: options.headerName } : [],\n            ],\n        };\n    }\n}\nHttpClientXsrfModule.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"NgModule\"], args: [{\n                providers: [\n                    HttpXsrfInterceptor,\n                    { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\n                    { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\n                    { provide: XSRF_COOKIE_NAME, useValue: 'XSRF-TOKEN' },\n                    { provide: XSRF_HEADER_NAME, useValue: 'X-XSRF-TOKEN' },\n                ],\n            },] }\n];\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for XSRF. Automatically imported by `HttpClientModule`.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * \\@publicApi\n */\nclass HttpClientModule {\n}\nHttpClientModule.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"NgModule\"], args: [{\n                /**\n                 * Optional configuration for XSRF protection.\n                 */\n                imports: [\n                    HttpClientXsrfModule.withOptions({\n                        cookieName: 'XSRF-TOKEN',\n                        headerName: 'X-XSRF-TOKEN',\n                    }),\n                ],\n                /**\n                 * Configures the [dependency injector](guide/glossary#injector) where it is imported\n                 * with supporting services for HTTP communications.\n                 */\n                providers: [\n                    HttpClient,\n                    { provide: HttpHandler, useClass: HttpInterceptingHandler },\n                    HttpXhrBackend,\n                    { provide: HttpBackend, useExisting: HttpXhrBackend },\n                    BrowserXhr,\n                    { provide: XhrFactory, useExisting: BrowserXhr },\n                ],\n            },] }\n];\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for JSONP.\n * Without this module, Jsonp requests reach the backend\n * with method JSONP, where they are rejected.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * \\@publicApi\n */\nclass HttpClientJsonpModule {\n}\nHttpClientJsonpModule.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"NgModule\"], args: [{\n                providers: [\n                    JsonpClientBackend,\n                    { provide: JsonpCallbackContext, useFactory: jsonpCallbackContext },\n                    { provide: HTTP_INTERCEPTORS, useClass: JsonpInterceptor, multi: true },\n                ],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\n//# sourceMappingURL=http.js.map\n\n\n/***/ }),\n\n/***/ \"./node_modules/@angular/material/esm2015/button.js\":\n/*!**********************************************************!*\\\n  !*** ./node_modules/@angular/material/esm2015/button.js ***!\n  \\**********************************************************/\n/*! exports provided: MatButtonModule, MatButton, MatAnchor */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MatButtonModule\", function() { return MatButtonModule; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MatButton\", function() { return MatButton; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MatAnchor\", function() { return MatAnchor; });\n/* harmony import */ var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/cdk/a11y */ \"./node_modules/@angular/cdk/esm2015/a11y.js\");\n/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ \"./node_modules/@angular/core/fesm2015/core.js\");\n/* harmony import */ var _angular_material_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/material/core */ \"./node_modules/@angular/material/esm2015/core.js\");\n/* harmony import */ var _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/platform-browser/animations */ \"./node_modules/@angular/platform-browser/fesm2015/animations.js\");\n/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/common */ \"./node_modules/@angular/common/fesm2015/common.js\");\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n\n\n\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Default color palette for round buttons (mat-fab and mat-mini-fab)\n * @type {?}\n */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n * @type {?}\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n    'mat-button',\n    'mat-flat-button',\n    'mat-icon-button',\n    'mat-raised-button',\n    'mat-stroked-button',\n    'mat-mini-fab',\n    'mat-fab',\n];\n// Boilerplate for applying mixins to MatButton.\n/**\n * \\@docs-private\n */\nclass MatButtonBase {\n    /**\n     * @param {?} _elementRef\n     */\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\n/** @type {?} */\nconst _MatButtonMixinBase = Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_2__[\"mixinColor\"])(Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_2__[\"mixinDisabled\"])(Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_2__[\"mixinDisableRipple\"])(MatButtonBase)));\n/**\n * Material design button.\n */\nclass MatButton extends _MatButtonMixinBase {\n    /**\n     * @param {?} elementRef\n     * @param {?} _focusMonitor\n     * @param {?} _animationMode\n     */\n    constructor(elementRef, _focusMonitor, _animationMode) {\n        super(elementRef);\n        this._focusMonitor = _focusMonitor;\n        this._animationMode = _animationMode;\n        /**\n         * Whether the button is round.\n         */\n        this.isRoundButton = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n        /**\n         * Whether the button is icon button.\n         */\n        this.isIconButton = this._hasHostAttributes('mat-icon-button');\n        // For each of the variant selectors that is present in the button's host\n        // attributes, add the correct corresponding class.\n        for (const attr of BUTTON_HOST_ATTRIBUTES) {\n            if (this._hasHostAttributes(attr)) {\n                ((/** @type {?} */ (this._getHostElement()))).classList.add(attr);\n            }\n        }\n        // Add a class that applies to all buttons. This makes it easier to target if somebody\n        // wants to target all Material buttons. We do it here rather than `host` to ensure that\n        // the class is applied to derived classes.\n        elementRef.nativeElement.classList.add('mat-button-base');\n        this._focusMonitor.monitor(this._elementRef, true);\n        if (this.isRoundButton) {\n            this.color = DEFAULT_ROUND_BUTTON_COLOR;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n    /**\n     * Focuses the button.\n     * @param {?=} origin\n     * @param {?=} options\n     * @return {?}\n     */\n    focus(origin = 'program', options) {\n        this._focusMonitor.focusVia(this._getHostElement(), origin, options);\n    }\n    /**\n     * @return {?}\n     */\n    _getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n    /**\n     * @return {?}\n     */\n    _isRippleDisabled() {\n        return this.disableRipple || this.disabled;\n    }\n    /**\n     * Gets whether the button has one of the given attributes.\n     * @param {...?} attributes\n     * @return {?}\n     */\n    _hasHostAttributes(...attributes) {\n        return attributes.some((/**\n         * @param {?} attribute\n         * @return {?}\n         */\n        attribute => this._getHostElement().hasAttribute(attribute)));\n    }\n}\nMatButton.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Component\"], args: [{selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n                exportAs: 'matButton',\n                host: {\n                    '[attr.disabled]': 'disabled || null',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                },\n                template: \"<span class=\\\"mat-button-wrapper\\\"><ng-content></ng-content></span><div matRipple class=\\\"mat-button-ripple\\\" [class.mat-button-ripple-round]=\\\"isRoundButton || isIconButton\\\" [matRippleDisabled]=\\\"_isRippleDisabled()\\\" [matRippleCentered]=\\\"isIconButton\\\" [matRippleTrigger]=\\\"_getHostElement()\\\"></div><div class=\\\"mat-button-focus-overlay\\\"></div>\",\n                styles: [\".mat-button .mat-button-focus-overlay,.mat-icon-button .mat-button-focus-overlay{opacity:0}.mat-button:hover .mat-button-focus-overlay,.mat-stroked-button:hover .mat-button-focus-overlay{opacity:.04}@media (hover:none){.mat-button:hover .mat-button-focus-overlay,.mat-stroked-button:hover .mat-button-focus-overlay{opacity:0}}.mat-button,.mat-flat-button,.mat-icon-button,.mat-stroked-button{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:0;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible}.mat-button::-moz-focus-inner,.mat-flat-button::-moz-focus-inner,.mat-icon-button::-moz-focus-inner,.mat-stroked-button::-moz-focus-inner{border:0}.mat-button[disabled],.mat-flat-button[disabled],.mat-icon-button[disabled],.mat-stroked-button[disabled]{cursor:default}.mat-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-button.cdk-program-focused .mat-button-focus-overlay,.mat-flat-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-flat-button.cdk-program-focused .mat-button-focus-overlay,.mat-icon-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-icon-button.cdk-program-focused .mat-button-focus-overlay,.mat-stroked-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-stroked-button.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-button::-moz-focus-inner,.mat-flat-button::-moz-focus-inner,.mat-icon-button::-moz-focus-inner,.mat-stroked-button::-moz-focus-inner{border:0}.mat-raised-button{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:0;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0,0,0);transition:background .4s cubic-bezier(.25,.8,.25,1),box-shadow 280ms cubic-bezier(.4,0,.2,1)}.mat-raised-button::-moz-focus-inner{border:0}.mat-raised-button[disabled]{cursor:default}.mat-raised-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-raised-button.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-raised-button::-moz-focus-inner{border:0}._mat-animation-noopable.mat-raised-button{transition:none;animation:none}.mat-stroked-button{border:1px solid currentColor;padding:0 15px;line-height:34px}.mat-stroked-button .mat-button-focus-overlay,.mat-stroked-button .mat-button-ripple.mat-ripple{top:-1px;left:-1px;right:-1px;bottom:-1px}.mat-fab{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:0;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0,0,0);transition:background .4s cubic-bezier(.25,.8,.25,1),box-shadow 280ms cubic-bezier(.4,0,.2,1);min-width:0;border-radius:50%;width:56px;height:56px;padding:0;flex-shrink:0}.mat-fab::-moz-focus-inner{border:0}.mat-fab[disabled]{cursor:default}.mat-fab.cdk-keyboard-focused .mat-button-focus-overlay,.mat-fab.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-fab::-moz-focus-inner{border:0}._mat-animation-noopable.mat-fab{transition:none;animation:none}.mat-fab .mat-button-wrapper{padding:16px 0;display:inline-block;line-height:24px}.mat-mini-fab{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:0;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0,0,0);transition:background .4s cubic-bezier(.25,.8,.25,1),box-shadow 280ms cubic-bezier(.4,0,.2,1);min-width:0;border-radius:50%;width:40px;height:40px;padding:0;flex-shrink:0}.mat-mini-fab::-moz-focus-inner{border:0}.mat-mini-fab[disabled]{cursor:default}.mat-mini-fab.cdk-keyboard-focused .mat-button-focus-overlay,.mat-mini-fab.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-mini-fab::-moz-focus-inner{border:0}._mat-animation-noopable.mat-mini-fab{transition:none;animation:none}.mat-mini-fab .mat-button-wrapper{padding:8px 0;display:inline-block;line-height:24px}.mat-icon-button{padding:0;min-width:0;width:40px;height:40px;flex-shrink:0;line-height:40px;border-radius:50%}.mat-icon-button .mat-icon,.mat-icon-button i{line-height:24px}.mat-button-focus-overlay,.mat-button-ripple.mat-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit}.mat-button-ripple.mat-ripple:not(:empty){transform:translateZ(0)}.mat-button-focus-overlay{opacity:0;transition:opacity .2s cubic-bezier(.35,0,.25,1),background-color .2s cubic-bezier(.35,0,.25,1)}._mat-animation-noopable .mat-button-focus-overlay{transition:none}@media (-ms-high-contrast:active){.mat-button-focus-overlay{background-color:#fff}}@media (-ms-high-contrast:black-on-white){.mat-button-focus-overlay{background-color:#000}}.mat-button-ripple-round{border-radius:50%;z-index:1}.mat-button .mat-button-wrapper>*,.mat-fab .mat-button-wrapper>*,.mat-flat-button .mat-button-wrapper>*,.mat-icon-button .mat-button-wrapper>*,.mat-mini-fab .mat-button-wrapper>*,.mat-raised-button .mat-button-wrapper>*,.mat-stroked-button .mat-button-wrapper>*{vertical-align:middle}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button{display:block;font-size:inherit;width:2.5em;height:2.5em}@media (-ms-high-contrast:active){.mat-button,.mat-fab,.mat-flat-button,.mat-icon-button,.mat-mini-fab,.mat-raised-button{outline:solid 1px}}\"],\n                inputs: ['disabled', 'disableRipple', 'color'],\n                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ViewEncapsulation\"].None,\n                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ChangeDetectionStrategy\"].OnPush,\n            },] },\n];\n/** @nocollapse */\nMatButton.ctorParameters = () => [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ElementRef\"] },\n    { type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__[\"FocusMonitor\"] },\n    { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Optional\"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Inject\"], args: [_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_3__[\"ANIMATION_MODULE_TYPE\"],] }] }\n];\nMatButton.propDecorators = {\n    ripple: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ViewChild\"], args: [_angular_material_core__WEBPACK_IMPORTED_MODULE_2__[\"MatRipple\"], { static: false },] }]\n};\n/**\n * Material design anchor button.\n */\nclass MatAnchor extends MatButton {\n    /**\n     * @param {?} focusMonitor\n     * @param {?} elementRef\n     * @param {?} animationMode\n     */\n    constructor(focusMonitor, elementRef, animationMode) {\n        super(elementRef, focusMonitor, animationMode);\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _haltDisabledEvents(event) {\n        // A disabled button shouldn't apply any actions\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopImmediatePropagation();\n        }\n    }\n}\nMatAnchor.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Component\"], args: [{selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n                exportAs: 'matButton, matAnchor',\n                host: {\n                    // Note that we ignore the user-specified tabindex when it's disabled for\n                    // consistency with the `mat-button` applied on native buttons where even\n                    // though they have an index, they're not tabbable.\n                    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n                    '[attr.disabled]': 'disabled || null',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '(click)': '_haltDisabledEvents($event)',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                },\n                inputs: ['disabled', 'disableRipple', 'color'],\n                template: \"<span class=\\\"mat-button-wrapper\\\"><ng-content></ng-content></span><div matRipple class=\\\"mat-button-ripple\\\" [class.mat-button-ripple-round]=\\\"isRoundButton || isIconButton\\\" [matRippleDisabled]=\\\"_isRippleDisabled()\\\" [matRippleCentered]=\\\"isIconButton\\\" [matRippleTrigger]=\\\"_getHostElement()\\\"></div><div class=\\\"mat-button-focus-overlay\\\"></div>\",\n                styles: [\".mat-button .mat-button-focus-overlay,.mat-icon-button .mat-button-focus-overlay{opacity:0}.mat-button:hover .mat-button-focus-overlay,.mat-stroked-button:hover .mat-button-focus-overlay{opacity:.04}@media (hover:none){.mat-button:hover .mat-button-focus-overlay,.mat-stroked-button:hover .mat-button-focus-overlay{opacity:0}}.mat-button,.mat-flat-button,.mat-icon-button,.mat-stroked-button{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:0;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible}.mat-button::-moz-focus-inner,.mat-flat-button::-moz-focus-inner,.mat-icon-button::-moz-focus-inner,.mat-stroked-button::-moz-focus-inner{border:0}.mat-button[disabled],.mat-flat-button[disabled],.mat-icon-button[disabled],.mat-stroked-button[disabled]{cursor:default}.mat-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-button.cdk-program-focused .mat-button-focus-overlay,.mat-flat-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-flat-button.cdk-program-focused .mat-button-focus-overlay,.mat-icon-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-icon-button.cdk-program-focused .mat-button-focus-overlay,.mat-stroked-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-stroked-button.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-button::-moz-focus-inner,.mat-flat-button::-moz-focus-inner,.mat-icon-button::-moz-focus-inner,.mat-stroked-button::-moz-focus-inner{border:0}.mat-raised-button{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:0;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0,0,0);transition:background .4s cubic-bezier(.25,.8,.25,1),box-shadow 280ms cubic-bezier(.4,0,.2,1)}.mat-raised-button::-moz-focus-inner{border:0}.mat-raised-button[disabled]{cursor:default}.mat-raised-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-raised-button.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-raised-button::-moz-focus-inner{border:0}._mat-animation-noopable.mat-raised-button{transition:none;animation:none}.mat-stroked-button{border:1px solid currentColor;padding:0 15px;line-height:34px}.mat-stroked-button .mat-button-focus-overlay,.mat-stroked-button .mat-button-ripple.mat-ripple{top:-1px;left:-1px;right:-1px;bottom:-1px}.mat-fab{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:0;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0,0,0);transition:background .4s cubic-bezier(.25,.8,.25,1),box-shadow 280ms cubic-bezier(.4,0,.2,1);min-width:0;border-radius:50%;width:56px;height:56px;padding:0;flex-shrink:0}.mat-fab::-moz-focus-inner{border:0}.mat-fab[disabled]{cursor:default}.mat-fab.cdk-keyboard-focused .mat-button-focus-overlay,.mat-fab.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-fab::-moz-focus-inner{border:0}._mat-animation-noopable.mat-fab{transition:none;animation:none}.mat-fab .mat-button-wrapper{padding:16px 0;display:inline-block;line-height:24px}.mat-mini-fab{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:0;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0,0,0);transition:background .4s cubic-bezier(.25,.8,.25,1),box-shadow 280ms cubic-bezier(.4,0,.2,1);min-width:0;border-radius:50%;width:40px;height:40px;padding:0;flex-shrink:0}.mat-mini-fab::-moz-focus-inner{border:0}.mat-mini-fab[disabled]{cursor:default}.mat-mini-fab.cdk-keyboard-focused .mat-button-focus-overlay,.mat-mini-fab.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-mini-fab::-moz-focus-inner{border:0}._mat-animation-noopable.mat-mini-fab{transition:none;animation:none}.mat-mini-fab .mat-button-wrapper{padding:8px 0;display:inline-block;line-height:24px}.mat-icon-button{padding:0;min-width:0;width:40px;height:40px;flex-shrink:0;line-height:40px;border-radius:50%}.mat-icon-button .mat-icon,.mat-icon-button i{line-height:24px}.mat-button-focus-overlay,.mat-button-ripple.mat-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit}.mat-button-ripple.mat-ripple:not(:empty){transform:translateZ(0)}.mat-button-focus-overlay{opacity:0;transition:opacity .2s cubic-bezier(.35,0,.25,1),background-color .2s cubic-bezier(.35,0,.25,1)}._mat-animation-noopable .mat-button-focus-overlay{transition:none}@media (-ms-high-contrast:active){.mat-button-focus-overlay{background-color:#fff}}@media (-ms-high-contrast:black-on-white){.mat-button-focus-overlay{background-color:#000}}.mat-button-ripple-round{border-radius:50%;z-index:1}.mat-button .mat-button-wrapper>*,.mat-fab .mat-button-wrapper>*,.mat-flat-button .mat-button-wrapper>*,.mat-icon-button .mat-button-wrapper>*,.mat-mini-fab .mat-button-wrapper>*,.mat-raised-button .mat-button-wrapper>*,.mat-stroked-button .mat-button-wrapper>*{vertical-align:middle}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button{display:block;font-size:inherit;width:2.5em;height:2.5em}@media (-ms-high-contrast:active){.mat-button,.mat-fab,.mat-flat-button,.mat-icon-button,.mat-mini-fab,.mat-raised-button{outline:solid 1px}}\"],\n                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ViewEncapsulation\"].None,\n                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ChangeDetectionStrategy\"].OnPush,\n            },] },\n];\n/** @nocollapse */\nMatAnchor.ctorParameters = () => [\n    { type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__[\"FocusMonitor\"] },\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ElementRef\"] },\n    { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Optional\"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Inject\"], args: [_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_3__[\"ANIMATION_MODULE_TYPE\"],] }] }\n];\nMatAnchor.propDecorators = {\n    tabIndex: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Input\"] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatButtonModule {\n}\nMatButtonModule.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"NgModule\"], args: [{\n                imports: [\n                    _angular_common__WEBPACK_IMPORTED_MODULE_4__[\"CommonModule\"],\n                    _angular_material_core__WEBPACK_IMPORTED_MODULE_2__[\"MatRippleModule\"],\n                    _angular_material_core__WEBPACK_IMPORTED_MODULE_2__[\"MatCommonModule\"],\n                ],\n                exports: [\n                    MatButton,\n                    MatAnchor,\n                    _angular_material_core__WEBPACK_IMPORTED_MODULE_2__[\"MatCommonModule\"],\n                ],\n                declarations: [\n                    MatButton,\n                    MatAnchor,\n                ],\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\n//# sourceMappingURL=button.js.map\n\n\n/***/ }),\n\n/***/ \"./node_modules/@angular/material/esm2015/icon.js\":\n/*!********************************************************!*\\\n  !*** ./node_modules/@angular/material/esm2015/icon.js ***!\n  \\********************************************************/\n/*! exports provided: MatIconModule, MAT_ICON_LOCATION_FACTORY, MAT_ICON_LOCATION, MatIcon, getMatIconNameNotFoundError, getMatIconNoHttpProviderError, getMatIconFailedToSanitizeUrlError, getMatIconFailedToSanitizeLiteralError, ICON_REGISTRY_PROVIDER_FACTORY, MatIconRegistry, ICON_REGISTRY_PROVIDER */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MatIconModule\", function() { return MatIconModule; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MAT_ICON_LOCATION_FACTORY\", function() { return MAT_ICON_LOCATION_FACTORY; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MAT_ICON_LOCATION\", function() { return MAT_ICON_LOCATION; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MatIcon\", function() { return MatIcon; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getMatIconNameNotFoundError\", function() { return getMatIconNameNotFoundError; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getMatIconNoHttpProviderError\", function() { return getMatIconNoHttpProviderError; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getMatIconFailedToSanitizeUrlError\", function() { return getMatIconFailedToSanitizeUrlError; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getMatIconFailedToSanitizeLiteralError\", function() { return getMatIconFailedToSanitizeLiteralError; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ICON_REGISTRY_PROVIDER_FACTORY\", function() { return ICON_REGISTRY_PROVIDER_FACTORY; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MatIconRegistry\", function() { return MatIconRegistry; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ICON_REGISTRY_PROVIDER\", function() { return ICON_REGISTRY_PROVIDER; });\n/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/common */ \"./node_modules/@angular/common/fesm2015/common.js\");\n/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/common/http */ \"./node_modules/@angular/common/fesm2015/http.js\");\n/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ \"./node_modules/@angular/core/fesm2015/core.js\");\n/* harmony import */ var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/platform-browser */ \"./node_modules/@angular/platform-browser/fesm2015/platform-browser.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs */ \"./node_modules/rxjs/_esm2015/index.js\");\n/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! rxjs/operators */ \"./node_modules/rxjs/_esm2015/operators/index.js\");\n/* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/cdk/coercion */ \"./node_modules/@angular/cdk/esm2015/coercion.js\");\n/* harmony import */ var _angular_material_core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/material/core */ \"./node_modules/@angular/material/esm2015/core.js\");\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n\n\n\n\n\n\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * \\@docs-private\n * @param {?} iconName\n * @return {?}\n */\nfunction getMatIconNameNotFoundError(iconName) {\n    return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including \\@angular/common/http.\n * \\@docs-private\n * @return {?}\n */\nfunction getMatIconNoHttpProviderError() {\n    return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n        'Please include the HttpClientModule from @angular/common/http in your ' +\n        'app imports.');\n}\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * \\@docs-private\n * @param {?} url URL that was attempted to be sanitized.\n * @return {?}\n */\nfunction getMatIconFailedToSanitizeUrlError(url) {\n    return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n        `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * \\@docs-private\n * @param {?} literal HTML that was attempted to be sanitized.\n * @return {?}\n */\nfunction getMatIconFailedToSanitizeLiteralError(literal) {\n    return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n        `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * \\@docs-private\n */\nclass SvgIconConfig {\n    /**\n     * @param {?} data\n     * @param {?=} options\n     */\n    constructor(data, options) {\n        this.options = options;\n        // Note that we can't use `instanceof SVGElement` here,\n        // because it'll break during server-side rendering.\n        if (!!((/** @type {?} */ (data))).nodeName) {\n            this.svgElement = (/** @type {?} */ (data));\n        }\n        else {\n            this.url = (/** @type {?} */ (data));\n        }\n    }\n}\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\nclass MatIconRegistry {\n    /**\n     * @param {?} _httpClient\n     * @param {?} _sanitizer\n     * @param {?} document\n     * @param {?=} _errorHandler\n     */\n    constructor(_httpClient, _sanitizer, document, _errorHandler) {\n        this._httpClient = _httpClient;\n        this._sanitizer = _sanitizer;\n        this._errorHandler = _errorHandler;\n        /**\n         * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n         */\n        this._svgIconConfigs = new Map();\n        /**\n         * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n         * Multiple icon sets can be registered under the same namespace.\n         */\n        this._iconSetConfigs = new Map();\n        /**\n         * Cache for icons loaded by direct URLs.\n         */\n        this._cachedIconsByUrl = new Map();\n        /**\n         * In-progress icon fetches. Used to coalesce multiple requests to the same URL.\n         */\n        this._inProgressUrlFetches = new Map();\n        /**\n         * Map from font identifiers to their CSS class names. Used for icon fonts.\n         */\n        this._fontCssClassesByAlias = new Map();\n        /**\n         * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n         * The default 'material-icons' value assumes that the material icon font has been loaded as\n         * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n         */\n        this._defaultFontSetClass = 'material-icons';\n        this._document = document;\n    }\n    /**\n     * Registers an icon by URL in the default namespace.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} iconName Name under which the icon should be registered.\n     * @param {?} url\n     * @param {?=} options\n     * @return {THIS}\n     */\n    addSvgIcon(iconName, url, options) {\n        return (/** @type {?} */ (this)).addSvgIconInNamespace('', iconName, url, options);\n    }\n    /**\n     * Registers an icon using an HTML string in the default namespace.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} iconName Name under which the icon should be registered.\n     * @param {?} literal SVG source of the icon.\n     * @param {?=} options\n     * @return {THIS}\n     */\n    addSvgIconLiteral(iconName, literal, options) {\n        return (/** @type {?} */ (this)).addSvgIconLiteralInNamespace('', iconName, literal, options);\n    }\n    /**\n     * Registers an icon by URL in the specified namespace.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} namespace Namespace in which the icon should be registered.\n     * @param {?} iconName Name under which the icon should be registered.\n     * @param {?} url\n     * @param {?=} options\n     * @return {THIS}\n     */\n    addSvgIconInNamespace(namespace, iconName, url, options) {\n        return (/** @type {?} */ (this))._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url, options));\n    }\n    /**\n     * Registers an icon using an HTML string in the specified namespace.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} namespace Namespace in which the icon should be registered.\n     * @param {?} iconName Name under which the icon should be registered.\n     * @param {?} literal SVG source of the icon.\n     * @param {?=} options\n     * @return {THIS}\n     */\n    addSvgIconLiteralInNamespace(namespace, iconName, literal, options) {\n        /** @type {?} */\n        const sanitizedLiteral = (/** @type {?} */ (this))._sanitizer.sanitize(_angular_core__WEBPACK_IMPORTED_MODULE_2__[\"SecurityContext\"].HTML, literal);\n        if (!sanitizedLiteral) {\n            throw getMatIconFailedToSanitizeLiteralError(literal);\n        }\n        /** @type {?} */\n        const svgElement = (/** @type {?} */ (this))._createSvgElementForSingleIcon(sanitizedLiteral, options);\n        return (/** @type {?} */ (this))._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement, options));\n    }\n    /**\n     * Registers an icon set by URL in the default namespace.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} url\n     * @param {?=} options\n     * @return {THIS}\n     */\n    addSvgIconSet(url, options) {\n        return (/** @type {?} */ (this)).addSvgIconSetInNamespace('', url, options);\n    }\n    /**\n     * Registers an icon set using an HTML string in the default namespace.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} literal SVG source of the icon set.\n     * @param {?=} options\n     * @return {THIS}\n     */\n    addSvgIconSetLiteral(literal, options) {\n        return (/** @type {?} */ (this)).addSvgIconSetLiteralInNamespace('', literal, options);\n    }\n    /**\n     * Registers an icon set by URL in the specified namespace.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} namespace Namespace in which to register the icon set.\n     * @param {?} url\n     * @param {?=} options\n     * @return {THIS}\n     */\n    addSvgIconSetInNamespace(namespace, url, options) {\n        return (/** @type {?} */ (this))._addSvgIconSetConfig(namespace, new SvgIconConfig(url, options));\n    }\n    /**\n     * Registers an icon set using an HTML string in the specified namespace.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} namespace Namespace in which to register the icon set.\n     * @param {?} literal SVG source of the icon set.\n     * @param {?=} options\n     * @return {THIS}\n     */\n    addSvgIconSetLiteralInNamespace(namespace, literal, options) {\n        /** @type {?} */\n        const sanitizedLiteral = (/** @type {?} */ (this))._sanitizer.sanitize(_angular_core__WEBPACK_IMPORTED_MODULE_2__[\"SecurityContext\"].HTML, literal);\n        if (!sanitizedLiteral) {\n            throw getMatIconFailedToSanitizeLiteralError(literal);\n        }\n        /** @type {?} */\n        const svgElement = (/** @type {?} */ (this))._svgElementFromString(sanitizedLiteral);\n        return (/** @type {?} */ (this))._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement, options));\n    }\n    /**\n     * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n     * component with the alias as the fontSet input will cause the class name to be applied\n     * to the `<mat-icon>` element.\n     *\n     * @template THIS\n     * @this {THIS}\n     * @param {?} alias Alias for the font.\n     * @param {?=} className Class name override to be used instead of the alias.\n     * @return {THIS}\n     */\n    registerFontClassAlias(alias, className = alias) {\n        (/** @type {?} */ (this))._fontCssClassesByAlias.set(alias, className);\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Returns the CSS class name associated with the alias by a previous call to\n     * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n     * @param {?} alias\n     * @return {?}\n     */\n    classNameForFontAlias(alias) {\n        return this._fontCssClassesByAlias.get(alias) || alias;\n    }\n    /**\n     * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     *\n     * @template THIS\n     * @this {THIS}\n     * @param {?} className\n     * @return {THIS}\n     */\n    setDefaultFontSetClass(className) {\n        (/** @type {?} */ (this))._defaultFontSetClass = className;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     * @return {?}\n     */\n    getDefaultFontSetClass() {\n        return this._defaultFontSetClass;\n    }\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n     * The response from the URL may be cached so this will not always cause an HTTP request, but\n     * the produced element will always be a new copy of the originally fetched icon. (That is,\n     * it will not contain any modifications made to elements previously returned).\n     *\n     * @param {?} safeUrl URL from which to fetch the SVG icon.\n     * @return {?}\n     */\n    getSvgIconFromUrl(safeUrl) {\n        /** @type {?} */\n        const url = this._sanitizer.sanitize(_angular_core__WEBPACK_IMPORTED_MODULE_2__[\"SecurityContext\"].RESOURCE_URL, safeUrl);\n        if (!url) {\n            throw getMatIconFailedToSanitizeUrlError(safeUrl);\n        }\n        /** @type {?} */\n        const cachedIcon = this._cachedIconsByUrl.get(url);\n        if (cachedIcon) {\n            return Object(rxjs__WEBPACK_IMPORTED_MODULE_4__[\"of\"])(cloneSvg(cachedIcon));\n        }\n        return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__[\"tap\"])((/**\n         * @param {?} svg\n         * @return {?}\n         */\n        svg => this._cachedIconsByUrl.set((/** @type {?} */ (url)), svg))), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__[\"map\"])((/**\n         * @param {?} svg\n         * @return {?}\n         */\n        svg => cloneSvg(svg))));\n    }\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n     * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n     * if not, the Observable will throw an error.\n     *\n     * @param {?} name Name of the icon to be retrieved.\n     * @param {?=} namespace Namespace in which to look for the icon.\n     * @return {?}\n     */\n    getNamedSvgIcon(name, namespace = '') {\n        // Return (copy of) cached icon if possible.\n        /** @type {?} */\n        const key = iconKey(namespace, name);\n        /** @type {?} */\n        const config = this._svgIconConfigs.get(key);\n        if (config) {\n            return this._getSvgFromConfig(config);\n        }\n        // See if we have any icon sets registered for the namespace.\n        /** @type {?} */\n        const iconSetConfigs = this._iconSetConfigs.get(namespace);\n        if (iconSetConfigs) {\n            return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n        }\n        return Object(rxjs__WEBPACK_IMPORTED_MODULE_4__[\"throwError\"])(getMatIconNameNotFoundError(key));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._svgIconConfigs.clear();\n        this._iconSetConfigs.clear();\n        this._cachedIconsByUrl.clear();\n    }\n    /**\n     * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n     * @private\n     * @param {?} config\n     * @return {?}\n     */\n    _getSvgFromConfig(config) {\n        if (config.svgElement) {\n            // We already have the SVG element for this icon, return a copy.\n            return Object(rxjs__WEBPACK_IMPORTED_MODULE_4__[\"of\"])(cloneSvg(config.svgElement));\n        }\n        else {\n            // Fetch the icon from the config's URL, cache it, and return a copy.\n            return this._loadSvgIconFromConfig(config).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__[\"tap\"])((/**\n             * @param {?} svg\n             * @return {?}\n             */\n            svg => config.svgElement = svg)), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__[\"map\"])((/**\n             * @param {?} svg\n             * @return {?}\n             */\n            svg => cloneSvg(svg))));\n        }\n    }\n    /**\n     * Attempts to find an icon with the specified name in any of the SVG icon sets.\n     * First searches the available cached icons for a nested element with a matching name, and\n     * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n     * that have not been cached, and searches again after all fetches are completed.\n     * The returned Observable produces the SVG element if possible, and throws\n     * an error if no icon with the specified name can be found.\n     * @private\n     * @param {?} name\n     * @param {?} iconSetConfigs\n     * @return {?}\n     */\n    _getSvgFromIconSetConfigs(name, iconSetConfigs) {\n        // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n        // requested name.\n        /** @type {?} */\n        const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n        if (namedIcon) {\n            // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n            // time anyway, there's probably not much advantage compared to just always extracting\n            // it from the icon set.\n            return Object(rxjs__WEBPACK_IMPORTED_MODULE_4__[\"of\"])(namedIcon);\n        }\n        // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n        // fetched, fetch them now and look for iconName in the results.\n        /** @type {?} */\n        const iconSetFetchRequests = iconSetConfigs\n            .filter((/**\n         * @param {?} iconSetConfig\n         * @return {?}\n         */\n        iconSetConfig => !iconSetConfig.svgElement))\n            .map((/**\n         * @param {?} iconSetConfig\n         * @return {?}\n         */\n        iconSetConfig => {\n            return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__[\"catchError\"])((/**\n             * @param {?} err\n             * @return {?}\n             */\n            (err) => {\n                /** @type {?} */\n                const url = this._sanitizer.sanitize(_angular_core__WEBPACK_IMPORTED_MODULE_2__[\"SecurityContext\"].RESOURCE_URL, iconSetConfig.url);\n                // Swallow errors fetching individual URLs so the\n                // combined Observable won't necessarily fail.\n                /** @type {?} */\n                const errorMessage = `Loading icon set URL: ${url} failed: ${err.message}`;\n                // @breaking-change 9.0.0 _errorHandler parameter to be made required\n                if (this._errorHandler) {\n                    this._errorHandler.handleError(new Error(errorMessage));\n                }\n                else {\n                    console.error(errorMessage);\n                }\n                return Object(rxjs__WEBPACK_IMPORTED_MODULE_4__[\"of\"])(null);\n            })));\n        }));\n        // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n        // cached SVG element (unless the request failed), and we can check again for the icon.\n        return Object(rxjs__WEBPACK_IMPORTED_MODULE_4__[\"forkJoin\"])(iconSetFetchRequests).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__[\"map\"])((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n            if (!foundIcon) {\n                throw getMatIconNameNotFoundError(name);\n            }\n            return foundIcon;\n        })));\n    }\n    /**\n     * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     * @private\n     * @param {?} iconName\n     * @param {?} iconSetConfigs\n     * @return {?}\n     */\n    _extractIconWithNameFromAnySet(iconName, iconSetConfigs) {\n        // Iterate backwards, so icon sets added later have precedence.\n        for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n            /** @type {?} */\n            const config = iconSetConfigs[i];\n            if (config.svgElement) {\n                /** @type {?} */\n                const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName, config.options);\n                if (foundIcon) {\n                    return foundIcon;\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n     * from it.\n     * @private\n     * @param {?} config\n     * @return {?}\n     */\n    _loadSvgIconFromConfig(config) {\n        return this._fetchUrl(config.url)\n            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__[\"map\"])((/**\n         * @param {?} svgText\n         * @return {?}\n         */\n        svgText => this._createSvgElementForSingleIcon(svgText, config.options))));\n    }\n    /**\n     * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n     * from it.\n     * @private\n     * @param {?} config\n     * @return {?}\n     */\n    _loadSvgIconSetFromConfig(config) {\n        // If the SVG for this icon set has already been parsed, do nothing.\n        if (config.svgElement) {\n            return Object(rxjs__WEBPACK_IMPORTED_MODULE_4__[\"of\"])(config.svgElement);\n        }\n        return this._fetchUrl(config.url).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__[\"map\"])((/**\n         * @param {?} svgText\n         * @return {?}\n         */\n        svgText => {\n            // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n            // only needs to occur if the cache is yet unset.\n            if (!config.svgElement) {\n                config.svgElement = this._svgElementFromString(svgText);\n            }\n            return config.svgElement;\n        })));\n    }\n    /**\n     * Creates a DOM element from the given SVG string, and adds default attributes.\n     * @private\n     * @param {?} responseText\n     * @param {?=} options\n     * @return {?}\n     */\n    _createSvgElementForSingleIcon(responseText, options) {\n        /** @type {?} */\n        const svg = this._svgElementFromString(responseText);\n        this._setSvgAttributes(svg, options);\n        return svg;\n    }\n    /**\n     * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     * @private\n     * @param {?} iconSet\n     * @param {?} iconName\n     * @param {?=} options\n     * @return {?}\n     */\n    _extractSvgIconFromSet(iconSet, iconName, options) {\n        // Use the `id=\"iconName\"` syntax in order to escape special\n        // characters in the ID (versus using the #iconName syntax).\n        /** @type {?} */\n        const iconSource = iconSet.querySelector(`[id=\"${iconName}\"]`);\n        if (!iconSource) {\n            return null;\n        }\n        // Clone the element and remove the ID to prevent multiple elements from being added\n        // to the page with the same ID.\n        /** @type {?} */\n        const iconElement = (/** @type {?} */ (iconSource.cloneNode(true)));\n        iconElement.removeAttribute('id');\n        // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n        // the content of a new <svg> node.\n        if (iconElement.nodeName.toLowerCase() === 'svg') {\n            return this._setSvgAttributes((/** @type {?} */ (iconElement)), options);\n        }\n        // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n        // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n        // tag is problematic on Firefox, because it needs to include the current page path.\n        if (iconElement.nodeName.toLowerCase() === 'symbol') {\n            return this._setSvgAttributes(this._toSvgElement(iconElement), options);\n        }\n        // createElement('SVG') doesn't work as expected; the DOM ends up with\n        // the correct nodes, but the SVG content doesn't render. Instead we\n        // have to create an empty SVG node using innerHTML and append its content.\n        // Elements created using DOMParser.parseFromString have the same problem.\n        // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n        /** @type {?} */\n        const svg = this._svgElementFromString('<svg></svg>');\n        // Clone the node so we don't remove it from the parent icon set element.\n        svg.appendChild(iconElement);\n        return this._setSvgAttributes(svg, options);\n    }\n    /**\n     * Creates a DOM element from the given SVG string.\n     * @private\n     * @param {?} str\n     * @return {?}\n     */\n    _svgElementFromString(str) {\n        /** @type {?} */\n        const div = this._document.createElement('DIV');\n        div.innerHTML = str;\n        /** @type {?} */\n        const svg = (/** @type {?} */ (div.querySelector('svg')));\n        if (!svg) {\n            throw Error('<svg> tag not found');\n        }\n        return svg;\n    }\n    /**\n     * Converts an element into an SVG node by cloning all of its children.\n     * @private\n     * @param {?} element\n     * @return {?}\n     */\n    _toSvgElement(element) {\n        /** @type {?} */\n        const svg = this._svgElementFromString('<svg></svg>');\n        /** @type {?} */\n        const attributes = element.attributes;\n        // Copy over all the attributes from the `symbol` to the new SVG, except the id.\n        for (let i = 0; i < attributes.length; i++) {\n            const { name, value } = attributes[i];\n            if (name !== 'id') {\n                svg.setAttribute(name, value);\n            }\n        }\n        for (let i = 0; i < element.childNodes.length; i++) {\n            if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n                svg.appendChild(element.childNodes[i].cloneNode(true));\n            }\n        }\n        return svg;\n    }\n    /**\n     * Sets the default attributes for an SVG element to be used as an icon.\n     * @private\n     * @param {?} svg\n     * @param {?=} options\n     * @return {?}\n     */\n    _setSvgAttributes(svg, options) {\n        svg.setAttribute('fit', '');\n        svg.setAttribute('height', '100%');\n        svg.setAttribute('width', '100%');\n        svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n        svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n        if (options && options.viewBox) {\n            svg.setAttribute('viewBox', options.viewBox);\n        }\n        return svg;\n    }\n    /**\n     * Returns an Observable which produces the string contents of the given URL. Results may be\n     * cached, so future calls with the same URL may not cause another HTTP request.\n     * @private\n     * @param {?} safeUrl\n     * @return {?}\n     */\n    _fetchUrl(safeUrl) {\n        if (!this._httpClient) {\n            throw getMatIconNoHttpProviderError();\n        }\n        if (safeUrl == null) {\n            throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n        }\n        /** @type {?} */\n        const url = this._sanitizer.sanitize(_angular_core__WEBPACK_IMPORTED_MODULE_2__[\"SecurityContext\"].RESOURCE_URL, safeUrl);\n        if (!url) {\n            throw getMatIconFailedToSanitizeUrlError(safeUrl);\n        }\n        // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n        // already a request in progress for that URL. It's necessary to call share() on the\n        // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n        /** @type {?} */\n        const inProgressFetch = this._inProgressUrlFetches.get(url);\n        if (inProgressFetch) {\n            return inProgressFetch;\n        }\n        // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n        // Observable. Figure out why and fix it.\n        /** @type {?} */\n        const req = this._httpClient.get(url, { responseType: 'text' }).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__[\"finalize\"])((/**\n         * @return {?}\n         */\n        () => this._inProgressUrlFetches.delete(url))), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__[\"share\"])());\n        this._inProgressUrlFetches.set(url, req);\n        return req;\n    }\n    /**\n     * Registers an icon config by name in the specified namespace.\n     * @private\n     * @template THIS\n     * @this {THIS}\n     * @param {?} namespace Namespace in which to register the icon config.\n     * @param {?} iconName Name under which to register the config.\n     * @param {?} config Config to be registered.\n     * @return {THIS}\n     */\n    _addSvgIconConfig(namespace, iconName, config) {\n        (/** @type {?} */ (this))._svgIconConfigs.set(iconKey(namespace, iconName), config);\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Registers an icon set config in the specified namespace.\n     * @private\n     * @template THIS\n     * @this {THIS}\n     * @param {?} namespace Namespace in which to register the icon config.\n     * @param {?} config Config to be registered.\n     * @return {THIS}\n     */\n    _addSvgIconSetConfig(namespace, config) {\n        /** @type {?} */\n        const configNamespace = (/** @type {?} */ (this))._iconSetConfigs.get(namespace);\n        if (configNamespace) {\n            configNamespace.push(config);\n        }\n        else {\n            (/** @type {?} */ (this))._iconSetConfigs.set(namespace, [config]);\n        }\n        return (/** @type {?} */ (this));\n    }\n}\nMatIconRegistry.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__[\"Injectable\"], args: [{ providedIn: 'root' },] },\n];\n/** @nocollapse */\nMatIconRegistry.ctorParameters = () => [\n    { type: _angular_common_http__WEBPACK_IMPORTED_MODULE_1__[\"HttpClient\"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__[\"Optional\"] }] },\n    { type: _angular_platform_browser__WEBPACK_IMPORTED_MODULE_3__[\"DomSanitizer\"] },\n    { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__[\"Optional\"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__[\"Inject\"], args: [_angular_common__WEBPACK_IMPORTED_MODULE_0__[\"DOCUMENT\"],] }] },\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__[\"ErrorHandler\"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__[\"Optional\"] }] }\n];\n/** @nocollapse */ MatIconRegistry.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__[\"ɵɵdefineInjectable\"])({ factory: function MatIconRegistry_Factory() { return new MatIconRegistry(Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__[\"ɵɵinject\"])(_angular_common_http__WEBPACK_IMPORTED_MODULE_1__[\"HttpClient\"], 8), Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__[\"ɵɵinject\"])(_angular_platform_browser__WEBPACK_IMPORTED_MODULE_3__[\"DomSanitizer\"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__[\"ɵɵinject\"])(_angular_common__WEBPACK_IMPORTED_MODULE_0__[\"DOCUMENT\"], 8), Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__[\"ɵɵinject\"])(_angular_core__WEBPACK_IMPORTED_MODULE_2__[\"ErrorHandler\"], 8)); }, token: MatIconRegistry, providedIn: \"root\" });\n/**\n * \\@docs-private\n * @param {?} parentRegistry\n * @param {?} httpClient\n * @param {?} sanitizer\n * @param {?=} document\n * @param {?=} errorHandler\n * @return {?}\n */\nfunction ICON_REGISTRY_PROVIDER_FACTORY(parentRegistry, httpClient, sanitizer, document, errorHandler) {\n    return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document, errorHandler);\n}\n/**\n * \\@docs-private\n * @type {?}\n */\nconst ICON_REGISTRY_PROVIDER = {\n    // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n    provide: MatIconRegistry,\n    deps: [\n        [new _angular_core__WEBPACK_IMPORTED_MODULE_2__[\"Optional\"](), new _angular_core__WEBPACK_IMPORTED_MODULE_2__[\"SkipSelf\"](), MatIconRegistry],\n        [new _angular_core__WEBPACK_IMPORTED_MODULE_2__[\"Optional\"](), _angular_common_http__WEBPACK_IMPORTED_MODULE_1__[\"HttpClient\"]],\n        _angular_platform_browser__WEBPACK_IMPORTED_MODULE_3__[\"DomSanitizer\"],\n        [new _angular_core__WEBPACK_IMPORTED_MODULE_2__[\"Optional\"](), _angular_core__WEBPACK_IMPORTED_MODULE_2__[\"ErrorHandler\"]],\n        [new _angular_core__WEBPACK_IMPORTED_MODULE_2__[\"Optional\"](), (/** @type {?} */ (_angular_common__WEBPACK_IMPORTED_MODULE_0__[\"DOCUMENT\"]))],\n    ],\n    useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n/**\n * Clones an SVGElement while preserving type information.\n * @param {?} svg\n * @return {?}\n */\nfunction cloneSvg(svg) {\n    return (/** @type {?} */ (svg.cloneNode(true)));\n}\n/**\n * Returns the cache key to use for an icon namespace and name.\n * @param {?} namespace\n * @param {?} name\n * @return {?}\n */\nfunction iconKey(namespace, name) {\n    return namespace + ':' + name;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Boilerplate for applying mixins to MatIcon.\n/**\n * \\@docs-private\n */\nclass MatIconBase {\n    /**\n     * @param {?} _elementRef\n     */\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\n/** @type {?} */\nconst _MatIconMixinBase = Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_7__[\"mixinColor\"])(MatIconBase);\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * \\@docs-private\n * @type {?}\n */\nconst MAT_ICON_LOCATION = new _angular_core__WEBPACK_IMPORTED_MODULE_2__[\"InjectionToken\"]('mat-icon-location', {\n    providedIn: 'root',\n    factory: MAT_ICON_LOCATION_FACTORY\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction MAT_ICON_LOCATION_FACTORY() {\n    /** @type {?} */\n    const _document = Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__[\"inject\"])(_angular_common__WEBPACK_IMPORTED_MODULE_0__[\"DOCUMENT\"]);\n    /** @type {?} */\n    const _location = _document ? _document.location : null;\n    return {\n        // Note that this needs to be a function, rather than a property, because Angular\n        // will only resolve it once, but we want the current path on each call.\n        getPathname: (/**\n         * @return {?}\n         */\n        () => _location ? (_location.pathname + _location.search) : '')\n    };\n}\n/**\n * SVG attributes that accept a FuncIRI (e.g. `url(<something>)`).\n * @type {?}\n */\nconst funcIriAttributes = [\n    'clip-path',\n    'color-profile',\n    'src',\n    'cursor',\n    'fill',\n    'filter',\n    'marker',\n    'marker-start',\n    'marker-mid',\n    'marker-end',\n    'mask',\n    'stroke'\n];\nconst ɵ0 = /**\n * @param {?} attr\n * @return {?}\n */\nattr => `[${attr}]`;\n/**\n * Selector that can be used to find all elements that are using a `FuncIRI`.\n * @type {?}\n */\nconst funcIriAttributeSelector = funcIriAttributes.map((ɵ0)).join(', ');\n/**\n * Regex that can be used to extract the id out of a FuncIRI.\n * @type {?}\n */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\nclass MatIcon extends _MatIconMixinBase {\n    /**\n     * @param {?} elementRef\n     * @param {?} _iconRegistry\n     * @param {?} ariaHidden\n     * @param {?=} _location\n     * @param {?=} _errorHandler\n     */\n    constructor(elementRef, _iconRegistry, ariaHidden, _location, _errorHandler) {\n        super(elementRef);\n        this._iconRegistry = _iconRegistry;\n        this._location = _location;\n        this._errorHandler = _errorHandler;\n        this._inline = false;\n        // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n        // the right thing to do for the majority of icon use-cases.\n        if (!ariaHidden) {\n            elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n        }\n    }\n    /**\n     * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n     * the element the icon is contained in.\n     * @return {?}\n     */\n    get inline() {\n        return this._inline;\n    }\n    /**\n     * @param {?} inline\n     * @return {?}\n     */\n    set inline(inline) {\n        this._inline = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_6__[\"coerceBooleanProperty\"])(inline);\n    }\n    /**\n     * Font set that the icon is a part of.\n     * @return {?}\n     */\n    get fontSet() { return this._fontSet; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set fontSet(value) {\n        this._fontSet = this._cleanupFontValue(value);\n    }\n    /**\n     * Name of an icon within a font set.\n     * @return {?}\n     */\n    get fontIcon() { return this._fontIcon; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set fontIcon(value) {\n        this._fontIcon = this._cleanupFontValue(value);\n    }\n    /**\n     * Splits an svgIcon binding value into its icon set and icon name components.\n     * Returns a 2-element array of [(icon set), (icon name)].\n     * The separator for the two fields is ':'. If there is no separator, an empty\n     * string is returned for the icon set and the entire value is returned for\n     * the icon name. If the argument is falsy, returns an array of two empty strings.\n     * Throws an error if the name contains two or more ':' separators.\n     * Examples:\n     *   `'social:cake' -> ['social', 'cake']\n     *   'penguin' -> ['', 'penguin']\n     *   null -> ['', '']\n     *   'a:b:c' -> (throws Error)`\n     * @private\n     * @param {?} iconName\n     * @return {?}\n     */\n    _splitIconName(iconName) {\n        if (!iconName) {\n            return ['', ''];\n        }\n        /** @type {?} */\n        const parts = iconName.split(':');\n        switch (parts.length) {\n            case 1: return ['', parts[0]]; // Use default namespace.\n            case 2: return (/** @type {?} */ (parts));\n            default: throw Error(`Invalid icon name: \"${iconName}\"`);\n        }\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n        /** @type {?} */\n        const svgIconChanges = changes['svgIcon'];\n        if (svgIconChanges) {\n            if (this.svgIcon) {\n                const [namespace, iconName] = this._splitIconName(this.svgIcon);\n                this._iconRegistry.getNamedSvgIcon(iconName, namespace)\n                    .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__[\"take\"])(1))\n                    .subscribe((/**\n                 * @param {?} svg\n                 * @return {?}\n                 */\n                svg => this._setSvgElement(svg)), (/**\n                 * @param {?} err\n                 * @return {?}\n                 */\n                (err) => {\n                    /** @type {?} */\n                    const errorMessage = `Error retrieving icon ${namespace}:${iconName}! ${err.message}`;\n                    // @breaking-change 9.0.0 _errorHandler parameter to be made required.\n                    if (this._errorHandler) {\n                        this._errorHandler.handleError(new Error(errorMessage));\n                    }\n                    else {\n                        console.error(errorMessage);\n                    }\n                }));\n            }\n            else if (svgIconChanges.previousValue) {\n                this._clearSvgElement();\n            }\n        }\n        if (this._usingFontIcon()) {\n            this._updateFontIconClasses();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n        // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n        if (this._usingFontIcon()) {\n            this._updateFontIconClasses();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewChecked() {\n        /** @type {?} */\n        const cachedElements = this._elementsWithExternalReferences;\n        if (cachedElements && this._location && cachedElements.size) {\n            /** @type {?} */\n            const newPath = this._location.getPathname();\n            // We need to check whether the URL has changed on each change detection since\n            // the browser doesn't have an API that will let us react on link clicks and\n            // we can't depend on the Angular router. The references need to be updated,\n            // because while most browsers don't care whether the URL is correct after\n            // the first render, Safari will break if the user navigates to a different\n            // page and the SVG isn't re-rendered.\n            if (newPath !== this._previousPath) {\n                this._previousPath = newPath;\n                this._prependPathToReferences(newPath);\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this._elementsWithExternalReferences) {\n            this._elementsWithExternalReferences.clear();\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _usingFontIcon() {\n        return !this.svgIcon;\n    }\n    /**\n     * @private\n     * @param {?} svg\n     * @return {?}\n     */\n    _setSvgElement(svg) {\n        this._clearSvgElement();\n        // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n        // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n        // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n        /** @type {?} */\n        const styleTags = (/** @type {?} */ (svg.querySelectorAll('style')));\n        for (let i = 0; i < styleTags.length; i++) {\n            styleTags[i].textContent += ' ';\n        }\n        // Note: we do this fix here, rather than the icon registry, because the\n        // references have to point to the URL at the time that the icon was created.\n        if (this._location) {\n            /** @type {?} */\n            const path = this._location.getPathname();\n            this._previousPath = path;\n            this._cacheChildrenWithExternalReferences(svg);\n            this._prependPathToReferences(path);\n        }\n        this._elementRef.nativeElement.appendChild(svg);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _clearSvgElement() {\n        /** @type {?} */\n        const layoutElement = this._elementRef.nativeElement;\n        /** @type {?} */\n        let childCount = layoutElement.childNodes.length;\n        if (this._elementsWithExternalReferences) {\n            this._elementsWithExternalReferences.clear();\n        }\n        // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n        // we can't use innerHTML, because IE will throw if the element has a data binding.\n        while (childCount--) {\n            /** @type {?} */\n            const child = layoutElement.childNodes[childCount];\n            // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n            // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n            if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n                layoutElement.removeChild(child);\n            }\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _updateFontIconClasses() {\n        if (!this._usingFontIcon()) {\n            return;\n        }\n        /** @type {?} */\n        const elem = this._elementRef.nativeElement;\n        /** @type {?} */\n        const fontSetClass = this.fontSet ?\n            this._iconRegistry.classNameForFontAlias(this.fontSet) :\n            this._iconRegistry.getDefaultFontSetClass();\n        if (fontSetClass != this._previousFontSetClass) {\n            if (this._previousFontSetClass) {\n                elem.classList.remove(this._previousFontSetClass);\n            }\n            if (fontSetClass) {\n                elem.classList.add(fontSetClass);\n            }\n            this._previousFontSetClass = fontSetClass;\n        }\n        if (this.fontIcon != this._previousFontIconClass) {\n            if (this._previousFontIconClass) {\n                elem.classList.remove(this._previousFontIconClass);\n            }\n            if (this.fontIcon) {\n                elem.classList.add(this.fontIcon);\n            }\n            this._previousFontIconClass = this.fontIcon;\n        }\n    }\n    /**\n     * Cleans up a value to be used as a fontIcon or fontSet.\n     * Since the value ends up being assigned as a CSS class, we\n     * have to trim the value and omit space-separated values.\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    _cleanupFontValue(value) {\n        return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n    }\n    /**\n     * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n     * reference. This is required because WebKit browsers require references to be prefixed with\n     * the current path, if the page has a `base` tag.\n     * @private\n     * @param {?} path\n     * @return {?}\n     */\n    _prependPathToReferences(path) {\n        /** @type {?} */\n        const elements = this._elementsWithExternalReferences;\n        if (elements) {\n            elements.forEach((/**\n             * @param {?} attrs\n             * @param {?} element\n             * @return {?}\n             */\n            (attrs, element) => {\n                attrs.forEach((/**\n                 * @param {?} attr\n                 * @return {?}\n                 */\n                attr => {\n                    element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n                }));\n            }));\n        }\n    }\n    /**\n     * Caches the children of an SVG element that have `url()`\n     * references that we need to prefix with the current path.\n     * @private\n     * @param {?} element\n     * @return {?}\n     */\n    _cacheChildrenWithExternalReferences(element) {\n        /** @type {?} */\n        const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n        /** @type {?} */\n        const elements = this._elementsWithExternalReferences =\n            this._elementsWithExternalReferences || new Map();\n        for (let i = 0; i < elementsWithFuncIri.length; i++) {\n            funcIriAttributes.forEach((/**\n             * @param {?} attr\n             * @return {?}\n             */\n            attr => {\n                /** @type {?} */\n                const elementWithReference = elementsWithFuncIri[i];\n                /** @type {?} */\n                const value = elementWithReference.getAttribute(attr);\n                /** @type {?} */\n                const match = value ? value.match(funcIriPattern) : null;\n                if (match) {\n                    /** @type {?} */\n                    let attributes = elements.get(elementWithReference);\n                    if (!attributes) {\n                        attributes = [];\n                        elements.set(elementWithReference, attributes);\n                    }\n                    (/** @type {?} */ (attributes)).push({ name: attr, value: match[1] });\n                }\n            }));\n        }\n    }\n}\nMatIcon.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__[\"Component\"], args: [{template: '<ng-content></ng-content>',\n                selector: 'mat-icon',\n                exportAs: 'matIcon',\n                styles: [\".mat-icon{background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1,1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\"],\n                inputs: ['color'],\n                host: {\n                    'role': 'img',\n                    'class': 'mat-icon notranslate',\n                    '[class.mat-icon-inline]': 'inline',\n                    '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"',\n                },\n                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_2__[\"ViewEncapsulation\"].None,\n                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_2__[\"ChangeDetectionStrategy\"].OnPush,\n            },] },\n];\n/** @nocollapse */\nMatIcon.ctorParameters = () => [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__[\"ElementRef\"] },\n    { type: MatIconRegistry },\n    { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__[\"Attribute\"], args: ['aria-hidden',] }] },\n    { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__[\"Optional\"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__[\"Inject\"], args: [MAT_ICON_LOCATION,] }] },\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__[\"ErrorHandler\"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__[\"Optional\"] }] }\n];\nMatIcon.propDecorators = {\n    inline: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__[\"Input\"] }],\n    svgIcon: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__[\"Input\"] }],\n    fontSet: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__[\"Input\"] }],\n    fontIcon: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__[\"Input\"] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatIconModule {\n}\nMatIconModule.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__[\"NgModule\"], args: [{\n                imports: [_angular_material_core__WEBPACK_IMPORTED_MODULE_7__[\"MatCommonModule\"]],\n                exports: [MatIcon, _angular_material_core__WEBPACK_IMPORTED_MODULE_7__[\"MatCommonModule\"]],\n                declarations: [MatIcon],\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\n//# sourceMappingURL=icon.js.map\n\n\n/***/ }),\n\n/***/ \"./node_modules/@angular/material/esm2015/stepper.js\":\n/*!***********************************************************!*\\\n  !*** ./node_modules/@angular/material/esm2015/stepper.js ***!\n  \\***********************************************************/\n/*! exports provided: MatStepperModule, MatStepLabel, MatStep, MatStepper, MatHorizontalStepper, MatVerticalStepper, MatStepperNext, MatStepperPrevious, MatStepHeader, MAT_STEPPER_INTL_PROVIDER_FACTORY, MatStepperIntl, MAT_STEPPER_INTL_PROVIDER, matStepperAnimations, MatStepperIcon */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MatStepperModule\", function() { return MatStepperModule; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MatStepLabel\", function() { return MatStepLabel; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MatStep\", function() { return MatStep; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MatStepper\", function() { return MatStepper; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MatHorizontalStepper\", function() { return MatHorizontalStepper; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MatVerticalStepper\", function() { return MatVerticalStepper; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MatStepperNext\", function() { return MatStepperNext; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MatStepperPrevious\", function() { return MatStepperPrevious; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MatStepHeader\", function() { return MatStepHeader; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MAT_STEPPER_INTL_PROVIDER_FACTORY\", function() { return MAT_STEPPER_INTL_PROVIDER_FACTORY; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MatStepperIntl\", function() { return MatStepperIntl; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MAT_STEPPER_INTL_PROVIDER\", function() { return MAT_STEPPER_INTL_PROVIDER; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"matStepperAnimations\", function() { return matStepperAnimations; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MatStepperIcon\", function() { return MatStepperIcon; });\n/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ \"./node_modules/@angular/core/fesm2015/core.js\");\n/* harmony import */ var _angular_cdk_stepper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/cdk/stepper */ \"./node_modules/@angular/cdk/esm2015/stepper.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs */ \"./node_modules/rxjs/_esm2015/index.js\");\n/* harmony import */ var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/cdk/a11y */ \"./node_modules/@angular/cdk/esm2015/a11y.js\");\n/* harmony import */ var _angular_animations__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/animations */ \"./node_modules/@angular/animations/fesm2015/animations.js\");\n/* harmony import */ var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/cdk/bidi */ \"./node_modules/@angular/cdk/esm2015/bidi.js\");\n/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/common */ \"./node_modules/@angular/common/fesm2015/common.js\");\n/* harmony import */ var _angular_material_core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/material/core */ \"./node_modules/@angular/material/esm2015/core.js\");\n/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! rxjs/operators */ \"./node_modules/rxjs/_esm2015/operators/index.js\");\n/* harmony import */ var _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/cdk/portal */ \"./node_modules/@angular/cdk/esm2015/portal.js\");\n/* harmony import */ var _angular_material_button__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/material/button */ \"./node_modules/@angular/material/esm2015/button.js\");\n/* harmony import */ var _angular_material_icon__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @angular/material/icon */ \"./node_modules/@angular/material/esm2015/icon.js\");\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatStepLabel extends _angular_cdk_stepper__WEBPACK_IMPORTED_MODULE_1__[\"CdkStepLabel\"] {\n}\nMatStepLabel.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Directive\"], args: [{\n                selector: '[matStepLabel]',\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Stepper data that is required for internationalization.\n */\nclass MatStepperIntl {\n    constructor() {\n        /**\n         * Stream that emits whenever the labels here are changed. Use this to notify\n         * components if the labels have changed after initialization.\n         */\n        this.changes = new rxjs__WEBPACK_IMPORTED_MODULE_2__[\"Subject\"]();\n        /**\n         * Label that is rendered below optional steps.\n         */\n        this.optionalLabel = 'Optional';\n    }\n}\nMatStepperIntl.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Injectable\"], args: [{ providedIn: 'root' },] },\n];\n/** @nocollapse */ MatStepperIntl.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__[\"ɵɵdefineInjectable\"])({ factory: function MatStepperIntl_Factory() { return new MatStepperIntl(); }, token: MatStepperIntl, providedIn: \"root\" });\n/**\n * \\@docs-private\n * @param {?} parentIntl\n * @return {?}\n */\nfunction MAT_STEPPER_INTL_PROVIDER_FACTORY(parentIntl) {\n    return parentIntl || new MatStepperIntl();\n}\n/**\n * \\@docs-private\n * @type {?}\n */\nconst MAT_STEPPER_INTL_PROVIDER = {\n    provide: MatStepperIntl,\n    deps: [[new _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Optional\"](), new _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"SkipSelf\"](), MatStepperIntl]],\n    useFactory: MAT_STEPPER_INTL_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatStepHeader extends _angular_cdk_stepper__WEBPACK_IMPORTED_MODULE_1__[\"CdkStepHeader\"] {\n    /**\n     * @param {?} _intl\n     * @param {?} _focusMonitor\n     * @param {?} _elementRef\n     * @param {?} changeDetectorRef\n     */\n    constructor(_intl, _focusMonitor, _elementRef, changeDetectorRef) {\n        super(_elementRef);\n        this._intl = _intl;\n        this._focusMonitor = _focusMonitor;\n        _focusMonitor.monitor(_elementRef, true);\n        this._intlSubscription = _intl.changes.subscribe((/**\n         * @return {?}\n         */\n        () => changeDetectorRef.markForCheck()));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._intlSubscription.unsubscribe();\n        this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n    /**\n     * Focuses the step header.\n     * @return {?}\n     */\n    focus() {\n        this._focusMonitor.focusVia(this._elementRef, 'program');\n    }\n    /**\n     * Returns string label of given step if it is a text label.\n     * @return {?}\n     */\n    _stringLabel() {\n        return this.label instanceof MatStepLabel ? null : this.label;\n    }\n    /**\n     * Returns MatStepLabel if the label of given step is a template label.\n     * @return {?}\n     */\n    _templateLabel() {\n        return this.label instanceof MatStepLabel ? this.label : null;\n    }\n    /**\n     * Returns the host HTML element.\n     * @return {?}\n     */\n    _getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n    /**\n     * Template context variables that are exposed to the `matStepperIcon` instances.\n     * @return {?}\n     */\n    _getIconContext() {\n        return {\n            index: this.index,\n            active: this.active,\n            optional: this.optional\n        };\n    }\n    /**\n     * @param {?} state\n     * @return {?}\n     */\n    _getDefaultTextForState(state$$1) {\n        if (state$$1 == 'number') {\n            return `${this.index + 1}`;\n        }\n        if (state$$1 == 'edit') {\n            return 'create';\n        }\n        if (state$$1 == 'error') {\n            return 'warning';\n        }\n        return state$$1;\n    }\n}\nMatStepHeader.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Component\"], args: [{selector: 'mat-step-header',\n                template: \"<div class=\\\"mat-step-header-ripple\\\" matRipple [matRippleTrigger]=\\\"_getHostElement()\\\" [matRippleDisabled]=\\\"disableRipple\\\"></div><div class=\\\"mat-step-icon-state-{{state}} mat-step-icon\\\" [class.mat-step-icon-selected]=\\\"selected\\\"><div class=\\\"mat-step-icon-content\\\" [ngSwitch]=\\\"!!(iconOverrides && iconOverrides[state])\\\"><ng-container *ngSwitchCase=\\\"true\\\" [ngTemplateOutlet]=\\\"iconOverrides[state]\\\" [ngTemplateOutletContext]=\\\"_getIconContext()\\\"></ng-container><ng-container *ngSwitchDefault [ngSwitch]=\\\"state\\\"><span *ngSwitchCase=\\\"'number'\\\">{{_getDefaultTextForState(state)}}</span><mat-icon *ngSwitchDefault>{{_getDefaultTextForState(state)}}</mat-icon></ng-container></div></div><div class=\\\"mat-step-label\\\" [class.mat-step-label-active]=\\\"active\\\" [class.mat-step-label-selected]=\\\"selected\\\" [class.mat-step-label-error]=\\\"state == 'error'\\\"><ng-container *ngIf=\\\"_templateLabel()\\\" [ngTemplateOutlet]=\\\"_templateLabel()!.template\\\"></ng-container><div class=\\\"mat-step-text-label\\\" *ngIf=\\\"_stringLabel()\\\">{{label}}</div><div class=\\\"mat-step-optional\\\" *ngIf=\\\"optional && state != 'error'\\\">{{_intl.optionalLabel}}</div><div class=\\\"mat-step-sub-label-error\\\" *ngIf=\\\"state == 'error'\\\">{{errorMessage}}</div></div>\",\n                styles: [\".mat-step-header{overflow:hidden;outline:0;cursor:pointer;position:relative;box-sizing:content-box;-webkit-tap-highlight-color:transparent}.mat-step-optional,.mat-step-sub-label-error{font-size:12px}.mat-step-icon{border-radius:50%;height:24px;width:24px;flex-shrink:0;position:relative}.mat-step-icon .mat-icon,.mat-step-icon-content{position:absolute;top:50%;left:50%;transform:translate(-50%,-50%)}.mat-step-icon .mat-icon{font-size:16px;height:16px;width:16px}.mat-step-icon-state-error .mat-icon{font-size:24px;height:24px;width:24px}.mat-step-label{display:inline-block;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;min-width:50px;vertical-align:middle}.mat-step-text-label{text-overflow:ellipsis;overflow:hidden}.mat-step-header .mat-step-header-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}\"],\n                host: {\n                    'class': 'mat-step-header',\n                    'role': 'tab',\n                },\n                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"ViewEncapsulation\"].None,\n                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"ChangeDetectionStrategy\"].OnPush,\n            },] },\n];\n/** @nocollapse */\nMatStepHeader.ctorParameters = () => [\n    { type: MatStepperIntl },\n    { type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_3__[\"FocusMonitor\"] },\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"ElementRef\"] },\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"ChangeDetectorRef\"] }\n];\nMatStepHeader.propDecorators = {\n    state: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Input\"] }],\n    label: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Input\"] }],\n    errorMessage: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Input\"] }],\n    iconOverrides: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Input\"] }],\n    index: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Input\"] }],\n    selected: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Input\"] }],\n    active: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Input\"] }],\n    optional: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Input\"] }],\n    disableRipple: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Input\"] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Animations used by the Material steppers.\n * \\@docs-private\n * @type {?}\n */\nconst matStepperAnimations = {\n    /**\n     * Animation that transitions the step along the X axis in a horizontal stepper.\n     */\n    horizontalStepTransition: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"trigger\"])('stepTransition', [\n        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"state\"])('previous', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"style\"])({ transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden' })),\n        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"state\"])('current', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"style\"])({ transform: 'none', visibility: 'visible' })),\n        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"state\"])('next', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"style\"])({ transform: 'translate3d(100%, 0, 0)', visibility: 'hidden' })),\n        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"transition\"])('* => *', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"animate\"])('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n    ]),\n    /**\n     * Animation that transitions the step along the Y axis in a vertical stepper.\n     */\n    verticalStepTransition: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"trigger\"])('stepTransition', [\n        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"state\"])('previous', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"style\"])({ height: '0px', visibility: 'hidden' })),\n        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"state\"])('next', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"style\"])({ height: '0px', visibility: 'hidden' })),\n        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"state\"])('current', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"style\"])({ height: '*', visibility: 'visible' })),\n        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"transition\"])('* <=> current', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"animate\"])('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n    ])\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Template to be used to override the icons inside the step header.\n */\nclass MatStepperIcon {\n    /**\n     * @param {?} templateRef\n     */\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n    }\n}\nMatStepperIcon.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Directive\"], args: [{\n                selector: 'ng-template[matStepperIcon]',\n            },] },\n];\n/** @nocollapse */\nMatStepperIcon.ctorParameters = () => [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"TemplateRef\"] }\n];\nMatStepperIcon.propDecorators = {\n    name: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Input\"], args: ['matStepperIcon',] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatStep extends _angular_cdk_stepper__WEBPACK_IMPORTED_MODULE_1__[\"CdkStep\"] {\n    /**\n     * \\@breaking-change 8.0.0 remove the `?` after `stepperOptions`\n     * @param {?} stepper\n     * @param {?} _errorStateMatcher\n     * @param {?=} stepperOptions\n     */\n    constructor(stepper, _errorStateMatcher, stepperOptions) {\n        super(stepper, stepperOptions);\n        this._errorStateMatcher = _errorStateMatcher;\n    }\n    /**\n     * Custom error state matcher that additionally checks for validity of interacted form.\n     * @param {?} control\n     * @param {?} form\n     * @return {?}\n     */\n    isErrorState(control, form) {\n        /** @type {?} */\n        const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n        // Custom error state checks for the validity of form that is not submitted or touched\n        // since user can trigger a form change by calling for another step without directly\n        // interacting with the current form.\n        /** @type {?} */\n        const customErrorState = !!(control && control.invalid && this.interacted);\n        return originalErrorState || customErrorState;\n    }\n}\nMatStep.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Component\"], args: [{selector: 'mat-step',\n                template: \"<ng-template><ng-content></ng-content></ng-template>\",\n                providers: [{ provide: _angular_material_core__WEBPACK_IMPORTED_MODULE_7__[\"ErrorStateMatcher\"], useExisting: MatStep }],\n                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"ViewEncapsulation\"].None,\n                exportAs: 'matStep',\n                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"ChangeDetectionStrategy\"].OnPush,\n            },] },\n];\n/** @nocollapse */\nMatStep.ctorParameters = () => [\n    { type: MatStepper, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Inject\"], args: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__[\"forwardRef\"])((/**\n                     * @return {?}\n                     */\n                    () => MatStepper)),] }] },\n    { type: _angular_material_core__WEBPACK_IMPORTED_MODULE_7__[\"ErrorStateMatcher\"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"SkipSelf\"] }] },\n    { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Optional\"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Inject\"], args: [_angular_cdk_stepper__WEBPACK_IMPORTED_MODULE_1__[\"STEPPER_GLOBAL_OPTIONS\"],] }] }\n];\nMatStep.propDecorators = {\n    stepLabel: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"ContentChild\"], args: [MatStepLabel, { static: false },] }]\n};\nclass MatStepper extends _angular_cdk_stepper__WEBPACK_IMPORTED_MODULE_1__[\"CdkStepper\"] {\n    constructor() {\n        super(...arguments);\n        /**\n         * Event emitted when the current step is done transitioning in.\n         */\n        this.animationDone = new _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"EventEmitter\"]();\n        /**\n         * Consumer-specified template-refs to be used to override the header icons.\n         */\n        this._iconOverrides = {};\n        /**\n         * Stream of animation `done` events when the body expands/collapses.\n         */\n        this._animationDone = new rxjs__WEBPACK_IMPORTED_MODULE_2__[\"Subject\"]();\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._icons.forEach((/**\n         * @param {?} __0\n         * @return {?}\n         */\n        ({ name, templateRef }) => this._iconOverrides[name] = templateRef));\n        // Mark the component for change detection whenever the content children query changes\n        this._steps.changes.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_8__[\"takeUntil\"])(this._destroyed)).subscribe((/**\n         * @return {?}\n         */\n        () => this._stateChanged()));\n        this._animationDone.pipe(\n        // This needs a `distinctUntilChanged` in order to avoid emitting the same event twice due\n        // to a bug in animations where the `.done` callback gets invoked twice on some browsers.\n        // See https://github.com/angular/angular/issues/24084\n        Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_8__[\"distinctUntilChanged\"])((/**\n         * @param {?} x\n         * @param {?} y\n         * @return {?}\n         */\n        (x, y) => x.fromState === y.fromState && x.toState === y.toState)), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_8__[\"takeUntil\"])(this._destroyed)).subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            if (((/** @type {?} */ (event.toState))) === 'current') {\n                this.animationDone.emit();\n            }\n        }));\n    }\n}\nMatStepper.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Directive\"], args: [{ selector: '[matStepper]', providers: [{ provide: _angular_cdk_stepper__WEBPACK_IMPORTED_MODULE_1__[\"CdkStepper\"], useExisting: MatStepper }] },] },\n];\nMatStepper.propDecorators = {\n    _stepHeader: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"ViewChildren\"], args: [MatStepHeader,] }],\n    _steps: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"ContentChildren\"], args: [MatStep,] }],\n    _icons: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"ContentChildren\"], args: [MatStepperIcon,] }],\n    animationDone: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Output\"] }],\n    disableRipple: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Input\"] }]\n};\nclass MatHorizontalStepper extends MatStepper {\n    constructor() {\n        super(...arguments);\n        /**\n         * Whether the label should display in bottom or end position.\n         */\n        this.labelPosition = 'end';\n    }\n}\nMatHorizontalStepper.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Component\"], args: [{selector: 'mat-horizontal-stepper',\n                exportAs: 'matHorizontalStepper',\n                template: \"<div class=\\\"mat-horizontal-stepper-header-container\\\"><ng-container *ngFor=\\\"let step of steps; let i = index; let isLast = last\\\"><mat-step-header class=\\\"mat-horizontal-stepper-header\\\" (click)=\\\"step.select()\\\" (keydown)=\\\"_onKeydown($event)\\\" [tabIndex]=\\\"_getFocusIndex() === i ? 0 : -1\\\" [id]=\\\"_getStepLabelId(i)\\\" [attr.aria-posinset]=\\\"i + 1\\\" [attr.aria-setsize]=\\\"steps.length\\\" [attr.aria-controls]=\\\"_getStepContentId(i)\\\" [attr.aria-selected]=\\\"selectedIndex == i\\\" [attr.aria-label]=\\\"step.ariaLabel || null\\\" [attr.aria-labelledby]=\\\"(!step.ariaLabel && step.ariaLabelledby) ? step.ariaLabelledby : null\\\" [index]=\\\"i\\\" [state]=\\\"_getIndicatorType(i, step.state)\\\" [label]=\\\"step.stepLabel || step.label\\\" [selected]=\\\"selectedIndex === i\\\" [active]=\\\"step.completed || selectedIndex === i || !linear\\\" [optional]=\\\"step.optional\\\" [errorMessage]=\\\"step.errorMessage\\\" [iconOverrides]=\\\"_iconOverrides\\\" [disableRipple]=\\\"disableRipple\\\"></mat-step-header><div *ngIf=\\\"!isLast\\\" class=\\\"mat-stepper-horizontal-line\\\"></div></ng-container></div><div class=\\\"mat-horizontal-content-container\\\"><div *ngFor=\\\"let step of steps; let i = index\\\" [attr.tabindex]=\\\"selectedIndex === i ? 0 : null\\\" class=\\\"mat-horizontal-stepper-content\\\" role=\\\"tabpanel\\\" [@stepTransition]=\\\"_getAnimationDirection(i)\\\" (@stepTransition.done)=\\\"_animationDone.next($event)\\\" [id]=\\\"_getStepContentId(i)\\\" [attr.aria-labelledby]=\\\"_getStepLabelId(i)\\\" [attr.aria-expanded]=\\\"selectedIndex === i\\\"><ng-container [ngTemplateOutlet]=\\\"step.content\\\"></ng-container></div></div>\",\n                styles: [\".mat-stepper-horizontal,.mat-stepper-vertical{display:block}.mat-horizontal-stepper-header-container{white-space:nowrap;display:flex;align-items:center}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header-container{align-items:flex-start}.mat-stepper-horizontal-line{border-top-width:1px;border-top-style:solid;flex:auto;height:0;margin:0 -16px;min-width:32px}.mat-stepper-label-position-bottom .mat-stepper-horizontal-line{margin:0;min-width:0;position:relative;top:36px}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:first-child)::before,.mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:last-child)::after,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:first-child)::after,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:last-child)::before{border-top-width:1px;border-top-style:solid;content:'';display:inline-block;height:0;position:absolute;top:36px;width:calc(50% - 20px)}.mat-horizontal-stepper-header{display:flex;height:72px;overflow:hidden;align-items:center;padding:0 24px}.mat-horizontal-stepper-header .mat-step-icon{margin-right:8px;flex:none}[dir=rtl] .mat-horizontal-stepper-header .mat-step-icon{margin-right:0;margin-left:8px}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header{box-sizing:border-box;flex-direction:column;height:auto;padding:24px}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:last-child)::after,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:first-child)::after{right:0}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:first-child)::before,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:last-child)::before{left:0}[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:first-child::after,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:last-child::before{display:none}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header .mat-step-icon{margin-right:0;margin-left:0}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header .mat-step-label{padding:16px 0 0 0;text-align:center;width:100%}.mat-vertical-stepper-header{display:flex;align-items:center;padding:24px;height:24px}.mat-vertical-stepper-header .mat-step-icon{margin-right:12px}[dir=rtl] .mat-vertical-stepper-header .mat-step-icon{margin-right:0;margin-left:12px}.mat-horizontal-stepper-content{outline:0}.mat-horizontal-stepper-content[aria-expanded=false]{height:0;overflow:hidden}.mat-horizontal-content-container{overflow:hidden;padding:0 24px 24px 24px}.mat-vertical-content-container{margin-left:36px;border:0;position:relative}[dir=rtl] .mat-vertical-content-container{margin-left:0;margin-right:36px}.mat-stepper-vertical-line::before{content:'';position:absolute;top:-16px;bottom:-16px;left:0;border-left-width:1px;border-left-style:solid}[dir=rtl] .mat-stepper-vertical-line::before{left:auto;right:0}.mat-vertical-stepper-content{overflow:hidden;outline:0}.mat-vertical-content{padding:0 24px 24px 24px}.mat-step:last-child .mat-vertical-content-container{border:none}\"],\n                inputs: ['selectedIndex'],\n                host: {\n                    'class': 'mat-stepper-horizontal',\n                    '[class.mat-stepper-label-position-end]': 'labelPosition == \"end\"',\n                    '[class.mat-stepper-label-position-bottom]': 'labelPosition == \"bottom\"',\n                    'aria-orientation': 'horizontal',\n                    'role': 'tablist',\n                },\n                animations: [matStepperAnimations.horizontalStepTransition],\n                providers: [\n                    { provide: MatStepper, useExisting: MatHorizontalStepper },\n                    { provide: _angular_cdk_stepper__WEBPACK_IMPORTED_MODULE_1__[\"CdkStepper\"], useExisting: MatHorizontalStepper }\n                ],\n                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"ViewEncapsulation\"].None,\n                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"ChangeDetectionStrategy\"].OnPush,\n            },] },\n];\nMatHorizontalStepper.propDecorators = {\n    labelPosition: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Input\"] }]\n};\nclass MatVerticalStepper extends MatStepper {\n    /**\n     * @param {?} dir\n     * @param {?} changeDetectorRef\n     * @param {?=} elementRef\n     * @param {?=} _document\n     */\n    constructor(dir, changeDetectorRef, \n    // @breaking-change 8.0.0 `elementRef` and `_document` parameters to become required.\n    elementRef, _document) {\n        super(dir, changeDetectorRef, elementRef, _document);\n        this._orientation = 'vertical';\n    }\n}\nMatVerticalStepper.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Component\"], args: [{selector: 'mat-vertical-stepper',\n                exportAs: 'matVerticalStepper',\n                template: \"<div class=\\\"mat-step\\\" *ngFor=\\\"let step of steps; let i = index; let isLast = last\\\"><mat-step-header class=\\\"mat-vertical-stepper-header\\\" (click)=\\\"step.select()\\\" (keydown)=\\\"_onKeydown($event)\\\" [tabIndex]=\\\"_getFocusIndex() == i ? 0 : -1\\\" [id]=\\\"_getStepLabelId(i)\\\" [attr.aria-posinset]=\\\"i + 1\\\" [attr.aria-setsize]=\\\"steps.length\\\" [attr.aria-controls]=\\\"_getStepContentId(i)\\\" [attr.aria-selected]=\\\"selectedIndex === i\\\" [attr.aria-label]=\\\"step.ariaLabel || null\\\" [attr.aria-labelledby]=\\\"(!step.ariaLabel && step.ariaLabelledby) ? step.ariaLabelledby : null\\\" [index]=\\\"i\\\" [state]=\\\"_getIndicatorType(i, step.state)\\\" [label]=\\\"step.stepLabel || step.label\\\" [selected]=\\\"selectedIndex === i\\\" [active]=\\\"step.completed || selectedIndex === i || !linear\\\" [optional]=\\\"step.optional\\\" [errorMessage]=\\\"step.errorMessage\\\" [iconOverrides]=\\\"_iconOverrides\\\" [disableRipple]=\\\"disableRipple\\\"></mat-step-header><div class=\\\"mat-vertical-content-container\\\" [class.mat-stepper-vertical-line]=\\\"!isLast\\\"><div class=\\\"mat-vertical-stepper-content\\\" role=\\\"tabpanel\\\" [attr.tabindex]=\\\"selectedIndex === i ? 0 : null\\\" [@stepTransition]=\\\"_getAnimationDirection(i)\\\" (@stepTransition.done)=\\\"_animationDone.next($event)\\\" [id]=\\\"_getStepContentId(i)\\\" [attr.aria-labelledby]=\\\"_getStepLabelId(i)\\\" [attr.aria-expanded]=\\\"selectedIndex === i\\\"><div class=\\\"mat-vertical-content\\\"><ng-container [ngTemplateOutlet]=\\\"step.content\\\"></ng-container></div></div></div></div>\",\n                styles: [\".mat-stepper-horizontal,.mat-stepper-vertical{display:block}.mat-horizontal-stepper-header-container{white-space:nowrap;display:flex;align-items:center}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header-container{align-items:flex-start}.mat-stepper-horizontal-line{border-top-width:1px;border-top-style:solid;flex:auto;height:0;margin:0 -16px;min-width:32px}.mat-stepper-label-position-bottom .mat-stepper-horizontal-line{margin:0;min-width:0;position:relative;top:36px}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:first-child)::before,.mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:last-child)::after,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:first-child)::after,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:last-child)::before{border-top-width:1px;border-top-style:solid;content:'';display:inline-block;height:0;position:absolute;top:36px;width:calc(50% - 20px)}.mat-horizontal-stepper-header{display:flex;height:72px;overflow:hidden;align-items:center;padding:0 24px}.mat-horizontal-stepper-header .mat-step-icon{margin-right:8px;flex:none}[dir=rtl] .mat-horizontal-stepper-header .mat-step-icon{margin-right:0;margin-left:8px}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header{box-sizing:border-box;flex-direction:column;height:auto;padding:24px}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:last-child)::after,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:first-child)::after{right:0}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:first-child)::before,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:last-child)::before{left:0}[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:first-child::after,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:last-child::before{display:none}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header .mat-step-icon{margin-right:0;margin-left:0}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header .mat-step-label{padding:16px 0 0 0;text-align:center;width:100%}.mat-vertical-stepper-header{display:flex;align-items:center;padding:24px;height:24px}.mat-vertical-stepper-header .mat-step-icon{margin-right:12px}[dir=rtl] .mat-vertical-stepper-header .mat-step-icon{margin-right:0;margin-left:12px}.mat-horizontal-stepper-content{outline:0}.mat-horizontal-stepper-content[aria-expanded=false]{height:0;overflow:hidden}.mat-horizontal-content-container{overflow:hidden;padding:0 24px 24px 24px}.mat-vertical-content-container{margin-left:36px;border:0;position:relative}[dir=rtl] .mat-vertical-content-container{margin-left:0;margin-right:36px}.mat-stepper-vertical-line::before{content:'';position:absolute;top:-16px;bottom:-16px;left:0;border-left-width:1px;border-left-style:solid}[dir=rtl] .mat-stepper-vertical-line::before{left:auto;right:0}.mat-vertical-stepper-content{overflow:hidden;outline:0}.mat-vertical-content{padding:0 24px 24px 24px}.mat-step:last-child .mat-vertical-content-container{border:none}\"],\n                inputs: ['selectedIndex'],\n                host: {\n                    'class': 'mat-stepper-vertical',\n                    'aria-orientation': 'vertical',\n                    'role': 'tablist',\n                },\n                animations: [matStepperAnimations.verticalStepTransition],\n                providers: [\n                    { provide: MatStepper, useExisting: MatVerticalStepper },\n                    { provide: _angular_cdk_stepper__WEBPACK_IMPORTED_MODULE_1__[\"CdkStepper\"], useExisting: MatVerticalStepper }\n                ],\n                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"ViewEncapsulation\"].None,\n                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"ChangeDetectionStrategy\"].OnPush,\n            },] },\n];\n/** @nocollapse */\nMatVerticalStepper.ctorParameters = () => [\n    { type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_5__[\"Directionality\"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Optional\"] }] },\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"ChangeDetectorRef\"] },\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"ElementRef\"] },\n    { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Inject\"], args: [_angular_common__WEBPACK_IMPORTED_MODULE_6__[\"DOCUMENT\"],] }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Button that moves to the next step in a stepper workflow.\n */\nclass MatStepperNext extends _angular_cdk_stepper__WEBPACK_IMPORTED_MODULE_1__[\"CdkStepperNext\"] {\n}\nMatStepperNext.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Directive\"], args: [{\n                selector: 'button[matStepperNext]',\n                host: {\n                    '[type]': 'type',\n                },\n                inputs: ['type']\n            },] },\n];\n/**\n * Button that moves to the previous step in a stepper workflow.\n */\nclass MatStepperPrevious extends _angular_cdk_stepper__WEBPACK_IMPORTED_MODULE_1__[\"CdkStepperPrevious\"] {\n}\nMatStepperPrevious.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Directive\"], args: [{\n                selector: 'button[matStepperPrevious]',\n                host: {\n                    '[type]': 'type',\n                },\n                inputs: ['type']\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatStepperModule {\n}\nMatStepperModule.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"NgModule\"], args: [{\n                imports: [\n                    _angular_material_core__WEBPACK_IMPORTED_MODULE_7__[\"MatCommonModule\"],\n                    _angular_common__WEBPACK_IMPORTED_MODULE_6__[\"CommonModule\"],\n                    _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_9__[\"PortalModule\"],\n                    _angular_material_button__WEBPACK_IMPORTED_MODULE_10__[\"MatButtonModule\"],\n                    _angular_cdk_stepper__WEBPACK_IMPORTED_MODULE_1__[\"CdkStepperModule\"],\n                    _angular_material_icon__WEBPACK_IMPORTED_MODULE_11__[\"MatIconModule\"],\n                    _angular_material_core__WEBPACK_IMPORTED_MODULE_7__[\"MatRippleModule\"],\n                ],\n                exports: [\n                    _angular_material_core__WEBPACK_IMPORTED_MODULE_7__[\"MatCommonModule\"],\n                    MatHorizontalStepper,\n                    MatVerticalStepper,\n                    MatStep,\n                    MatStepLabel,\n                    MatStepper,\n                    MatStepperNext,\n                    MatStepperPrevious,\n                    MatStepHeader,\n                    MatStepperIcon,\n                ],\n                declarations: [\n                    MatHorizontalStepper,\n                    MatVerticalStepper,\n                    MatStep,\n                    MatStepLabel,\n                    MatStepper,\n                    MatStepperNext,\n                    MatStepperPrevious,\n                    MatStepHeader,\n                    MatStepperIcon,\n                ],\n                providers: [MAT_STEPPER_INTL_PROVIDER, _angular_material_core__WEBPACK_IMPORTED_MODULE_7__[\"ErrorStateMatcher\"]],\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\n//# sourceMappingURL=stepper.js.map\n\n\n/***/ })\n\n}]);\n//# sourceMappingURL=default~pages-angular-material-components-mat-input-mat-input-module~pages-angular-material-componen~4d21505d-es2015.js.map","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Directive, ElementRef, TemplateRef, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, ContentChildren, EventEmitter, forwardRef, Inject, InjectionToken, Input, Optional, Output, ViewChild, ViewEncapsulation, HostListener, NgModule } from '@angular/core';\nimport { FocusKeyManager } from '@angular/cdk/a11y';\nimport { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { END, ENTER, hasModifierKey, HOME, SPACE } from '@angular/cdk/keycodes';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { of, Subject } from 'rxjs';\nimport { startWith, takeUntil } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass CdkStepHeader {\n    /**\n     * @param {?} _elementRef\n     */\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n    /**\n     * Focuses the step header.\n     * @return {?}\n     */\n    focus() {\n        this._elementRef.nativeElement.focus();\n    }\n}\nCdkStepHeader.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkStepHeader]',\n                host: {\n                    'role': 'tab',\n                },\n            },] },\n];\n/** @nocollapse */\nCdkStepHeader.ctorParameters = () => [\n    { type: ElementRef }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass CdkStepLabel {\n    /**\n     * @param {?} template\n     */\n    constructor(/** @docs-private */ template) {\n        this.template = template;\n    }\n}\nCdkStepLabel.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkStepLabel]',\n            },] },\n];\n/** @nocollapse */\nCdkStepLabel.ctorParameters = () => [\n    { type: TemplateRef }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Used to generate unique ID for each stepper component.\n * @type {?}\n */\nlet nextId = 0;\n/**\n * Change event emitted on selection changes.\n */\nclass StepperSelectionEvent {\n}\n/**\n * Enum to represent the different states of the steps.\n * @type {?}\n */\nconst STEP_STATE = {\n    NUMBER: 'number',\n    EDIT: 'edit',\n    DONE: 'done',\n    ERROR: 'error'\n};\n/**\n * InjectionToken that can be used to specify the global stepper options.\n * @type {?}\n */\nconst STEPPER_GLOBAL_OPTIONS = new InjectionToken('STEPPER_GLOBAL_OPTIONS');\n/**\n * InjectionToken that can be used to specify the global stepper options.\n * @deprecated Use `STEPPER_GLOBAL_OPTIONS` instead.\n * \\@breaking-change 8.0.0.\n * @type {?}\n */\nconst MAT_STEPPER_GLOBAL_OPTIONS = STEPPER_GLOBAL_OPTIONS;\nclass CdkStep {\n    /**\n     * \\@breaking-change 8.0.0 remove the `?` after `stepperOptions`\n     * @param {?} _stepper\n     * @param {?=} stepperOptions\n     */\n    constructor(_stepper, stepperOptions) {\n        this._stepper = _stepper;\n        /**\n         * Whether user has seen the expanded step content or not.\n         */\n        this.interacted = false;\n        this._editable = true;\n        this._optional = false;\n        this._completedOverride = null;\n        this._customError = null;\n        this._stepperOptions = stepperOptions ? stepperOptions : {};\n        this._displayDefaultIndicatorType = this._stepperOptions.displayDefaultIndicatorType !== false;\n        this._showError = !!this._stepperOptions.showError;\n    }\n    /**\n     * Whether the user can return to this step once it has been marked as completed.\n     * @return {?}\n     */\n    get editable() {\n        return this._editable;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set editable(value) {\n        this._editable = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether the completion of step is optional.\n     * @return {?}\n     */\n    get optional() {\n        return this._optional;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set optional(value) {\n        this._optional = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether step is marked as completed.\n     * @return {?}\n     */\n    get completed() {\n        return this._completedOverride == null ? this._getDefaultCompleted() : this._completedOverride;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set completed(value) {\n        this._completedOverride = coerceBooleanProperty(value);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _getDefaultCompleted() {\n        return this.stepControl ? this.stepControl.valid && this.interacted : this.interacted;\n    }\n    /**\n     * Whether step has an error.\n     * @return {?}\n     */\n    get hasError() {\n        return this._customError == null ? this._getDefaultError() : this._customError;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set hasError(value) {\n        this._customError = coerceBooleanProperty(value);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _getDefaultError() {\n        return this.stepControl && this.stepControl.invalid && this.interacted;\n    }\n    /**\n     * Selects this step component.\n     * @return {?}\n     */\n    select() {\n        this._stepper.selected = this;\n    }\n    /**\n     * Resets the step to its initial state. Note that this includes resetting form data.\n     * @return {?}\n     */\n    reset() {\n        this.interacted = false;\n        if (this._completedOverride != null) {\n            this._completedOverride = false;\n        }\n        if (this._customError != null) {\n            this._customError = false;\n        }\n        if (this.stepControl) {\n            this.stepControl.reset();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnChanges() {\n        // Since basically all inputs of the MatStep get proxied through the view down to the\n        // underlying MatStepHeader, we have to make sure that change detection runs correctly.\n        this._stepper._stateChanged();\n    }\n}\nCdkStep.decorators = [\n    { type: Component, args: [{selector: 'cdk-step',\n                exportAs: 'cdkStep',\n                template: '<ng-template><ng-content></ng-content></ng-template>',\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n            },] },\n];\n/** @nocollapse */\nCdkStep.ctorParameters = () => [\n    { type: CdkStepper, decorators: [{ type: Inject, args: [forwardRef((/**\n                     * @return {?}\n                     */\n                    () => CdkStepper)),] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [STEPPER_GLOBAL_OPTIONS,] }] }\n];\nCdkStep.propDecorators = {\n    stepLabel: [{ type: ContentChild, args: [CdkStepLabel, { static: false },] }],\n    content: [{ type: ViewChild, args: [TemplateRef, { static: true },] }],\n    stepControl: [{ type: Input }],\n    label: [{ type: Input }],\n    errorMessage: [{ type: Input }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    state: [{ type: Input }],\n    editable: [{ type: Input }],\n    optional: [{ type: Input }],\n    completed: [{ type: Input }],\n    hasError: [{ type: Input }]\n};\nclass CdkStepper {\n    /**\n     * @param {?} _dir\n     * @param {?} _changeDetectorRef\n     * @param {?=} _elementRef\n     * @param {?=} _document\n     */\n    constructor(_dir, _changeDetectorRef, _elementRef, _document) {\n        this._dir = _dir;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        /**\n         * Emits when the component is destroyed.\n         */\n        this._destroyed = new Subject();\n        this._linear = false;\n        this._selectedIndex = 0;\n        /**\n         * Event emitted when the selected step has changed.\n         */\n        this.selectionChange = new EventEmitter();\n        this._orientation = 'horizontal';\n        this._groupId = nextId++;\n        this._document = _document;\n    }\n    /**\n     * The list of step components that the stepper is holding.\n     * @return {?}\n     */\n    get steps() {\n        return this._steps;\n    }\n    /**\n     * Whether the validity of previous steps should be checked or not.\n     * @return {?}\n     */\n    get linear() {\n        return this._linear;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set linear(value) {\n        this._linear = coerceBooleanProperty(value);\n    }\n    /**\n     * The index of the selected step.\n     * @return {?}\n     */\n    get selectedIndex() {\n        return this._selectedIndex;\n    }\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n    set selectedIndex(index) {\n        /** @type {?} */\n        const newIndex = coerceNumberProperty(index);\n        if (this.steps) {\n            // Ensure that the index can't be out of bounds.\n            if (newIndex < 0 || newIndex > this.steps.length - 1) {\n                throw Error('cdkStepper: Cannot assign out-of-bounds value to `selectedIndex`.');\n            }\n            if (this._selectedIndex != newIndex && !this._anyControlsInvalidOrPending(newIndex) &&\n                (newIndex >= this._selectedIndex || this.steps.toArray()[newIndex].editable)) {\n                this._updateSelectedItemIndex(index);\n            }\n        }\n        else {\n            this._selectedIndex = newIndex;\n        }\n    }\n    /**\n     * The step that is selected.\n     * @return {?}\n     */\n    get selected() {\n        // @breaking-change 8.0.0 Change return type to `CdkStep | undefined`.\n        return this.steps ? this.steps.toArray()[this.selectedIndex] : (/** @type {?} */ (undefined));\n    }\n    /**\n     * @param {?} step\n     * @return {?}\n     */\n    set selected(step) {\n        this.selectedIndex = this.steps ? this.steps.toArray().indexOf(step) : -1;\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        // Note that while the step headers are content children by default, any components that\n        // extend this one might have them as view chidren. We initialize the keyboard handling in\n        // AfterViewInit so we're guaranteed for both view and content children to be defined.\n        this._keyManager = new FocusKeyManager(this._stepHeader)\n            .withWrap()\n            .withVerticalOrientation(this._orientation === 'vertical');\n        (this._dir ? ((/** @type {?} */ (this._dir.change))) : of())\n            .pipe(startWith(this._layoutDirection()), takeUntil(this._destroyed))\n            .subscribe((/**\n         * @param {?} direction\n         * @return {?}\n         */\n        direction => this._keyManager.withHorizontalOrientation(direction)));\n        this._keyManager.updateActiveItemIndex(this._selectedIndex);\n        this.steps.changes.pipe(takeUntil(this._destroyed)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            if (!this.selected) {\n                this._selectedIndex = Math.max(this._selectedIndex - 1, 0);\n            }\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Selects and focuses the next step in list.\n     * @return {?}\n     */\n    next() {\n        this.selectedIndex = Math.min(this._selectedIndex + 1, this.steps.length - 1);\n    }\n    /**\n     * Selects and focuses the previous step in list.\n     * @return {?}\n     */\n    previous() {\n        this.selectedIndex = Math.max(this._selectedIndex - 1, 0);\n    }\n    /**\n     * Resets the stepper to its initial state. Note that this includes clearing form data.\n     * @return {?}\n     */\n    reset() {\n        this._updateSelectedItemIndex(0);\n        this.steps.forEach((/**\n         * @param {?} step\n         * @return {?}\n         */\n        step => step.reset()));\n        this._stateChanged();\n    }\n    /**\n     * Returns a unique id for each step label element.\n     * @param {?} i\n     * @return {?}\n     */\n    _getStepLabelId(i) {\n        return `cdk-step-label-${this._groupId}-${i}`;\n    }\n    /**\n     * Returns unique id for each step content element.\n     * @param {?} i\n     * @return {?}\n     */\n    _getStepContentId(i) {\n        return `cdk-step-content-${this._groupId}-${i}`;\n    }\n    /**\n     * Marks the component to be change detected.\n     * @return {?}\n     */\n    _stateChanged() {\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Returns position state of the step with the given index.\n     * @param {?} index\n     * @return {?}\n     */\n    _getAnimationDirection(index) {\n        /** @type {?} */\n        const position = index - this._selectedIndex;\n        if (position < 0) {\n            return this._layoutDirection() === 'rtl' ? 'next' : 'previous';\n        }\n        else if (position > 0) {\n            return this._layoutDirection() === 'rtl' ? 'previous' : 'next';\n        }\n        return 'current';\n    }\n    /**\n     * Returns the type of icon to be displayed.\n     * @param {?} index\n     * @param {?=} state\n     * @return {?}\n     */\n    _getIndicatorType(index, state = STEP_STATE.NUMBER) {\n        /** @type {?} */\n        const step = this.steps.toArray()[index];\n        /** @type {?} */\n        const isCurrentStep = this._isCurrentStep(index);\n        return step._displayDefaultIndicatorType ? this._getDefaultIndicatorLogic(step, isCurrentStep) :\n            this._getGuidelineLogic(step, isCurrentStep, state);\n    }\n    /**\n     * @private\n     * @param {?} step\n     * @param {?} isCurrentStep\n     * @return {?}\n     */\n    _getDefaultIndicatorLogic(step, isCurrentStep) {\n        if (step._showError && step.hasError && !isCurrentStep) {\n            return STEP_STATE.ERROR;\n        }\n        else if (!step.completed || isCurrentStep) {\n            return STEP_STATE.NUMBER;\n        }\n        else {\n            return step.editable ? STEP_STATE.EDIT : STEP_STATE.DONE;\n        }\n    }\n    /**\n     * @private\n     * @param {?} step\n     * @param {?} isCurrentStep\n     * @param {?=} state\n     * @return {?}\n     */\n    _getGuidelineLogic(step, isCurrentStep, state = STEP_STATE.NUMBER) {\n        if (step._showError && step.hasError && !isCurrentStep) {\n            return STEP_STATE.ERROR;\n        }\n        else if (step.completed && !isCurrentStep) {\n            return STEP_STATE.DONE;\n        }\n        else if (step.completed && isCurrentStep) {\n            return state;\n        }\n        else if (step.editable && isCurrentStep) {\n            return STEP_STATE.EDIT;\n        }\n        else {\n            return state;\n        }\n    }\n    /**\n     * @private\n     * @param {?} index\n     * @return {?}\n     */\n    _isCurrentStep(index) {\n        return this._selectedIndex === index;\n    }\n    /**\n     * Returns the index of the currently-focused step header.\n     * @return {?}\n     */\n    _getFocusIndex() {\n        return this._keyManager ? this._keyManager.activeItemIndex : this._selectedIndex;\n    }\n    /**\n     * @private\n     * @param {?} newIndex\n     * @return {?}\n     */\n    _updateSelectedItemIndex(newIndex) {\n        /** @type {?} */\n        const stepsArray = this.steps.toArray();\n        this.selectionChange.emit({\n            selectedIndex: newIndex,\n            previouslySelectedIndex: this._selectedIndex,\n            selectedStep: stepsArray[newIndex],\n            previouslySelectedStep: stepsArray[this._selectedIndex],\n        });\n        // If focus is inside the stepper, move it to the next header, otherwise it may become\n        // lost when the active step content is hidden. We can't be more granular with the check\n        // (e.g. checking whether focus is inside the active step), because we don't have a\n        // reference to the elements that are rendering out the content.\n        this._containsFocus() ? this._keyManager.setActiveItem(newIndex) :\n            this._keyManager.updateActiveItemIndex(newIndex);\n        this._selectedIndex = newIndex;\n        this._stateChanged();\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _onKeydown(event) {\n        /** @type {?} */\n        const hasModifier = hasModifierKey(event);\n        /** @type {?} */\n        const keyCode = event.keyCode;\n        /** @type {?} */\n        const manager = this._keyManager;\n        if (manager.activeItemIndex != null && !hasModifier &&\n            (keyCode === SPACE || keyCode === ENTER)) {\n            this.selectedIndex = manager.activeItemIndex;\n            event.preventDefault();\n        }\n        else if (keyCode === HOME) {\n            manager.setFirstItemActive();\n            event.preventDefault();\n        }\n        else if (keyCode === END) {\n            manager.setLastItemActive();\n            event.preventDefault();\n        }\n        else {\n            manager.onKeydown(event);\n        }\n    }\n    /**\n     * @private\n     * @param {?} index\n     * @return {?}\n     */\n    _anyControlsInvalidOrPending(index) {\n        /** @type {?} */\n        const steps = this.steps.toArray();\n        steps[this._selectedIndex].interacted = true;\n        if (this._linear && index >= 0) {\n            return steps.slice(0, index).some((/**\n             * @param {?} step\n             * @return {?}\n             */\n            step => {\n                /** @type {?} */\n                const control = step.stepControl;\n                /** @type {?} */\n                const isIncomplete = control ? (control.invalid || control.pending || !step.interacted) : !step.completed;\n                return isIncomplete && !step.optional && !step._completedOverride;\n            }));\n        }\n        return false;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _layoutDirection() {\n        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n    /**\n     * Checks whether the stepper contains the focused element.\n     * @private\n     * @return {?}\n     */\n    _containsFocus() {\n        if (!this._document || !this._elementRef) {\n            return false;\n        }\n        /** @type {?} */\n        const stepperElement = this._elementRef.nativeElement;\n        /** @type {?} */\n        const focusedElement = this._document.activeElement;\n        return stepperElement === focusedElement || stepperElement.contains(focusedElement);\n    }\n}\nCdkStepper.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkStepper]',\n                exportAs: 'cdkStepper',\n            },] },\n];\n/** @nocollapse */\nCdkStepper.ctorParameters = () => [\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: ChangeDetectorRef },\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\nCdkStepper.propDecorators = {\n    _steps: [{ type: ContentChildren, args: [CdkStep,] }],\n    _stepHeader: [{ type: ContentChildren, args: [CdkStepHeader,] }],\n    linear: [{ type: Input }],\n    selectedIndex: [{ type: Input }],\n    selected: [{ type: Input }],\n    selectionChange: [{ type: Output }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Button that moves to the next step in a stepper workflow.\n */\nclass CdkStepperNext {\n    /**\n     * @param {?} _stepper\n     */\n    constructor(_stepper) {\n        this._stepper = _stepper;\n        /**\n         * Type of the next button. Defaults to \"submit\" if not specified.\n         */\n        this.type = 'submit';\n    }\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    /**\n     * @return {?}\n     */\n    _handleClick() {\n        this._stepper.next();\n    }\n}\nCdkStepperNext.decorators = [\n    { type: Directive, args: [{\n                selector: 'button[cdkStepperNext]',\n                host: {\n                    '[type]': 'type',\n                }\n            },] },\n];\n/** @nocollapse */\nCdkStepperNext.ctorParameters = () => [\n    { type: CdkStepper }\n];\nCdkStepperNext.propDecorators = {\n    type: [{ type: Input }],\n    _handleClick: [{ type: HostListener, args: ['click',] }]\n};\n/**\n * Button that moves to the previous step in a stepper workflow.\n */\nclass CdkStepperPrevious {\n    /**\n     * @param {?} _stepper\n     */\n    constructor(_stepper) {\n        this._stepper = _stepper;\n        /**\n         * Type of the previous button. Defaults to \"button\" if not specified.\n         */\n        this.type = 'button';\n    }\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    /**\n     * @return {?}\n     */\n    _handleClick() {\n        this._stepper.previous();\n    }\n}\nCdkStepperPrevious.decorators = [\n    { type: Directive, args: [{\n                selector: 'button[cdkStepperPrevious]',\n                host: {\n                    '[type]': 'type',\n                }\n            },] },\n];\n/** @nocollapse */\nCdkStepperPrevious.ctorParameters = () => [\n    { type: CdkStepper }\n];\nCdkStepperPrevious.propDecorators = {\n    type: [{ type: Input }],\n    _handleClick: [{ type: HostListener, args: ['click',] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass CdkStepperModule {\n}\nCdkStepperModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [BidiModule, CommonModule],\n                exports: [\n                    CdkStep,\n                    CdkStepper,\n                    CdkStepHeader,\n                    CdkStepLabel,\n                    CdkStepperNext,\n                    CdkStepperPrevious,\n                ],\n                declarations: [\n                    CdkStep,\n                    CdkStepper,\n                    CdkStepHeader,\n                    CdkStepLabel,\n                    CdkStepperNext,\n                    CdkStepperPrevious,\n                ]\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { StepperSelectionEvent, STEP_STATE, STEPPER_GLOBAL_OPTIONS, MAT_STEPPER_GLOBAL_OPTIONS, CdkStep, CdkStepper, CdkStepLabel, CdkStepperNext, CdkStepperPrevious, CdkStepperModule, CdkStepHeader };\n//# sourceMappingURL=stepper.js.map\n","/**\n * @license Angular v8.2.14\n * (c) 2010-2019 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { Injectable, InjectionToken, Inject, PLATFORM_ID, Injector, NgModule } from '@angular/core';\nimport { of, Observable } from 'rxjs';\nimport { concatMap, filter, map } from 'rxjs/operators';\nimport { DOCUMENT, ɵparseCookieValue } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\n * `HttpResponse`.\n *\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\n * `HttpBackend`.\n *\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\n *\n * \\@publicApi\n * @abstract\n */\nclass HttpHandler {\n}\nif (false) {\n    /**\n     * @abstract\n     * @param {?} req\n     * @return {?}\n     */\n    HttpHandler.prototype.handle = function (req) { };\n}\n/**\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\n *\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\n *\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\n * through the interceptor chain.\n *\n * \\@publicApi\n * @abstract\n */\nclass HttpBackend {\n}\nif (false) {\n    /**\n     * @abstract\n     * @param {?} req\n     * @return {?}\n     */\n    HttpBackend.prototype.handle = function (req) { };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @record\n */\nfunction Update() { }\nif (false) {\n    /** @type {?} */\n    Update.prototype.name;\n    /** @type {?|undefined} */\n    Update.prototype.value;\n    /** @type {?} */\n    Update.prototype.op;\n}\n/**\n * Represents the header configuration options for an HTTP request.\n * Instances are immutable. Modifying methods return a cloned\n * instance with the change. The original object is never changed.\n *\n * \\@publicApi\n */\nclass HttpHeaders {\n    /**\n     * Constructs a new HTTP header object with the given values.\n     * @param {?=} headers\n     */\n    constructor(headers) {\n        /**\n         * Internal map of lowercased header names to the normalized\n         * form of the name (the form seen first).\n         */\n        this.normalizedNames = new Map();\n        /**\n         * Queued updates to be materialized the next initialization.\n         */\n        this.lazyUpdate = null;\n        if (!headers) {\n            this.headers = new Map();\n        }\n        else if (typeof headers === 'string') {\n            this.lazyInit = (/**\n             * @return {?}\n             */\n            () => {\n                this.headers = new Map();\n                headers.split('\\n').forEach((/**\n                 * @param {?} line\n                 * @return {?}\n                 */\n                line => {\n                    /** @type {?} */\n                    const index = line.indexOf(':');\n                    if (index > 0) {\n                        /** @type {?} */\n                        const name = line.slice(0, index);\n                        /** @type {?} */\n                        const key = name.toLowerCase();\n                        /** @type {?} */\n                        const value = line.slice(index + 1).trim();\n                        this.maybeSetNormalizedName(name, key);\n                        if (this.headers.has(key)) {\n                            (/** @type {?} */ (this.headers.get(key))).push(value);\n                        }\n                        else {\n                            this.headers.set(key, [value]);\n                        }\n                    }\n                }));\n            });\n        }\n        else {\n            this.lazyInit = (/**\n             * @return {?}\n             */\n            () => {\n                this.headers = new Map();\n                Object.keys(headers).forEach((/**\n                 * @param {?} name\n                 * @return {?}\n                 */\n                name => {\n                    /** @type {?} */\n                    let values = headers[name];\n                    /** @type {?} */\n                    const key = name.toLowerCase();\n                    if (typeof values === 'string') {\n                        values = [values];\n                    }\n                    if (values.length > 0) {\n                        this.headers.set(key, values);\n                        this.maybeSetNormalizedName(name, key);\n                    }\n                }));\n            });\n        }\n    }\n    /**\n     * Checks for existence of a given header.\n     *\n     * @param {?} name The header name to check for existence.\n     *\n     * @return {?} True if the header exists, false otherwise.\n     */\n    has(name) {\n        this.init();\n        return this.headers.has(name.toLowerCase());\n    }\n    /**\n     * Retrieves the first value of a given header.\n     *\n     * @param {?} name The header name.\n     *\n     * @return {?} The value string if the header exists, null otherwise\n     */\n    get(name) {\n        this.init();\n        /** @type {?} */\n        const values = this.headers.get(name.toLowerCase());\n        return values && values.length > 0 ? values[0] : null;\n    }\n    /**\n     * Retrieves the names of the headers.\n     *\n     * @return {?} A list of header names.\n     */\n    keys() {\n        this.init();\n        return Array.from(this.normalizedNames.values());\n    }\n    /**\n     * Retrieves a list of values for a given header.\n     *\n     * @param {?} name The header name from which to retrieve values.\n     *\n     * @return {?} A string of values if the header exists, null otherwise.\n     */\n    getAll(name) {\n        this.init();\n        return this.headers.get(name.toLowerCase()) || null;\n    }\n    /**\n     * Appends a new value to the existing set of values for a header\n     * and returns them in a clone of the original instance.\n     *\n     * @param {?} name The header name for which to append the value or values.\n     * @param {?} value The new value or array of values.\n     *\n     * @return {?} A clone of the HTTP headers object with the value appended to the given header.\n     */\n    append(name, value) {\n        return this.clone({ name, value, op: 'a' });\n    }\n    /**\n     * Sets or modifies a value for a given header in a clone of the original instance.\n     * If the header already exists, its value is replaced with the given value\n     * in the returned object.\n     *\n     * @param {?} name The header name.\n     * @param {?} value The value or values to set or overide for the given header.\n     *\n     * @return {?} A clone of the HTTP headers object with the newly set header value.\n     */\n    set(name, value) {\n        return this.clone({ name, value, op: 's' });\n    }\n    /**\n     * Deletes values for a given header in a clone of the original instance.\n     *\n     * @param {?} name The header name.\n     * @param {?=} value The value or values to delete for the given header.\n     *\n     * @return {?} A clone of the HTTP headers object with the given value deleted.\n     */\n    delete(name, value) {\n        return this.clone({ name, value, op: 'd' });\n    }\n    /**\n     * @private\n     * @param {?} name\n     * @param {?} lcName\n     * @return {?}\n     */\n    maybeSetNormalizedName(name, lcName) {\n        if (!this.normalizedNames.has(lcName)) {\n            this.normalizedNames.set(lcName, name);\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    init() {\n        if (!!this.lazyInit) {\n            if (this.lazyInit instanceof HttpHeaders) {\n                this.copyFrom(this.lazyInit);\n            }\n            else {\n                this.lazyInit();\n            }\n            this.lazyInit = null;\n            if (!!this.lazyUpdate) {\n                this.lazyUpdate.forEach((/**\n                 * @param {?} update\n                 * @return {?}\n                 */\n                update => this.applyUpdate(update)));\n                this.lazyUpdate = null;\n            }\n        }\n    }\n    /**\n     * @private\n     * @param {?} other\n     * @return {?}\n     */\n    copyFrom(other) {\n        other.init();\n        Array.from(other.headers.keys()).forEach((/**\n         * @param {?} key\n         * @return {?}\n         */\n        key => {\n            this.headers.set(key, (/** @type {?} */ (other.headers.get(key))));\n            this.normalizedNames.set(key, (/** @type {?} */ (other.normalizedNames.get(key))));\n        }));\n    }\n    /**\n     * @private\n     * @param {?} update\n     * @return {?}\n     */\n    clone(update) {\n        /** @type {?} */\n        const clone = new HttpHeaders();\n        clone.lazyInit =\n            (!!this.lazyInit && this.lazyInit instanceof HttpHeaders) ? this.lazyInit : this;\n        clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\n        return clone;\n    }\n    /**\n     * @private\n     * @param {?} update\n     * @return {?}\n     */\n    applyUpdate(update) {\n        /** @type {?} */\n        const key = update.name.toLowerCase();\n        switch (update.op) {\n            case 'a':\n            case 's':\n                /** @type {?} */\n                let value = (/** @type {?} */ (update.value));\n                if (typeof value === 'string') {\n                    value = [value];\n                }\n                if (value.length === 0) {\n                    return;\n                }\n                this.maybeSetNormalizedName(update.name, key);\n                /** @type {?} */\n                const base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\n                base.push(...value);\n                this.headers.set(key, base);\n                break;\n            case 'd':\n                /** @type {?} */\n                const toDelete = (/** @type {?} */ (update.value));\n                if (!toDelete) {\n                    this.headers.delete(key);\n                    this.normalizedNames.delete(key);\n                }\n                else {\n                    /** @type {?} */\n                    let existing = this.headers.get(key);\n                    if (!existing) {\n                        return;\n                    }\n                    existing = existing.filter((/**\n                     * @param {?} value\n                     * @return {?}\n                     */\n                    value => toDelete.indexOf(value) === -1));\n                    if (existing.length === 0) {\n                        this.headers.delete(key);\n                        this.normalizedNames.delete(key);\n                    }\n                    else {\n                        this.headers.set(key, existing);\n                    }\n                }\n                break;\n        }\n    }\n    /**\n     * \\@internal\n     * @param {?} fn\n     * @return {?}\n     */\n    forEach(fn) {\n        this.init();\n        Array.from(this.normalizedNames.keys())\n            .forEach((/**\n         * @param {?} key\n         * @return {?}\n         */\n        key => fn((/** @type {?} */ (this.normalizedNames.get(key))), (/** @type {?} */ (this.headers.get(key))))));\n    }\n}\nif (false) {\n    /**\n     * Internal map of lowercase header names to values.\n     * @type {?}\n     * @private\n     */\n    HttpHeaders.prototype.headers;\n    /**\n     * Internal map of lowercased header names to the normalized\n     * form of the name (the form seen first).\n     * @type {?}\n     * @private\n     */\n    HttpHeaders.prototype.normalizedNames;\n    /**\n     * Complete the lazy initialization of this object (needed before reading).\n     * @type {?}\n     * @private\n     */\n    HttpHeaders.prototype.lazyInit;\n    /**\n     * Queued updates to be materialized the next initialization.\n     * @type {?}\n     * @private\n     */\n    HttpHeaders.prototype.lazyUpdate;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A codec for encoding and decoding parameters in URLs.\n *\n * Used by `HttpParams`.\n *\n * \\@publicApi\n *\n * @record\n */\nfunction HttpParameterCodec() { }\nif (false) {\n    /**\n     * @param {?} key\n     * @return {?}\n     */\n    HttpParameterCodec.prototype.encodeKey = function (key) { };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    HttpParameterCodec.prototype.encodeValue = function (value) { };\n    /**\n     * @param {?} key\n     * @return {?}\n     */\n    HttpParameterCodec.prototype.decodeKey = function (key) { };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    HttpParameterCodec.prototype.decodeValue = function (value) { };\n}\n/**\n * Provides encoding and decoding of URL parameter and query-string values.\n *\n * Serializes and parses URL parameter keys and values to encode and decode them.\n * If you pass URL query parameters without encoding,\n * the query parameters can be misinterpreted at the receiving end.\n *\n *\n * \\@publicApi\n */\nclass HttpUrlEncodingCodec {\n    /**\n     * Encodes a key name for a URL parameter or query-string.\n     * @param {?} key The key name.\n     * @return {?} The encoded key name.\n     */\n    encodeKey(key) { return standardEncoding(key); }\n    /**\n     * Encodes the value of a URL parameter or query-string.\n     * @param {?} value The value.\n     * @return {?} The encoded value.\n     */\n    encodeValue(value) { return standardEncoding(value); }\n    /**\n     * Decodes an encoded URL parameter or query-string key.\n     * @param {?} key The encoded key name.\n     * @return {?} The decoded key name.\n     */\n    decodeKey(key) { return decodeURIComponent(key); }\n    /**\n     * Decodes an encoded URL parameter or query-string value.\n     * @param {?} value The encoded value.\n     * @return {?} The decoded value.\n     */\n    decodeValue(value) { return decodeURIComponent(value); }\n}\n/**\n * @param {?} rawParams\n * @param {?} codec\n * @return {?}\n */\nfunction paramParser(rawParams, codec) {\n    /** @type {?} */\n    const map = new Map();\n    if (rawParams.length > 0) {\n        /** @type {?} */\n        const params = rawParams.split('&');\n        params.forEach((/**\n         * @param {?} param\n         * @return {?}\n         */\n        (param) => {\n            /** @type {?} */\n            const eqIdx = param.indexOf('=');\n            const [key, val] = eqIdx == -1 ?\n                [codec.decodeKey(param), ''] :\n                [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))];\n            /** @type {?} */\n            const list = map.get(key) || [];\n            list.push(val);\n            map.set(key, list);\n        }));\n    }\n    return map;\n}\n/**\n * @param {?} v\n * @return {?}\n */\nfunction standardEncoding(v) {\n    return encodeURIComponent(v)\n        .replace(/%40/gi, '@')\n        .replace(/%3A/gi, ':')\n        .replace(/%24/gi, '$')\n        .replace(/%2C/gi, ',')\n        .replace(/%3B/gi, ';')\n        .replace(/%2B/gi, '+')\n        .replace(/%3D/gi, '=')\n        .replace(/%3F/gi, '?')\n        .replace(/%2F/gi, '/');\n}\n/**\n * @record\n */\nfunction Update$1() { }\nif (false) {\n    /** @type {?} */\n    Update$1.prototype.param;\n    /** @type {?|undefined} */\n    Update$1.prototype.value;\n    /** @type {?} */\n    Update$1.prototype.op;\n}\n/**\n * Options used to construct an `HttpParams` instance.\n *\n * \\@publicApi\n * @record\n */\nfunction HttpParamsOptions() { }\nif (false) {\n    /**\n     * String representation of the HTTP parameters in URL-query-string format.\n     * Mutually exclusive with `fromObject`.\n     * @type {?|undefined}\n     */\n    HttpParamsOptions.prototype.fromString;\n    /**\n     * Object map of the HTTP parameters. Mutually exclusive with `fromString`.\n     * @type {?|undefined}\n     */\n    HttpParamsOptions.prototype.fromObject;\n    /**\n     * Encoding codec used to parse and serialize the parameters.\n     * @type {?|undefined}\n     */\n    HttpParamsOptions.prototype.encoder;\n}\n/**\n * An HTTP request/response body that represents serialized parameters,\n * per the MIME type `application/x-www-form-urlencoded`.\n *\n * This class is immutable; all mutation operations return a new instance.\n *\n * \\@publicApi\n */\nclass HttpParams {\n    /**\n     * @param {?=} options\n     */\n    constructor(options = (/** @type {?} */ ({}))) {\n        this.updates = null;\n        this.cloneFrom = null;\n        this.encoder = options.encoder || new HttpUrlEncodingCodec();\n        if (!!options.fromString) {\n            if (!!options.fromObject) {\n                throw new Error(`Cannot specify both fromString and fromObject.`);\n            }\n            this.map = paramParser(options.fromString, this.encoder);\n        }\n        else if (!!options.fromObject) {\n            this.map = new Map();\n            Object.keys(options.fromObject).forEach((/**\n             * @param {?} key\n             * @return {?}\n             */\n            key => {\n                /** @type {?} */\n                const value = ((/** @type {?} */ (options.fromObject)))[key];\n                (/** @type {?} */ (this.map)).set(key, Array.isArray(value) ? value : [value]);\n            }));\n        }\n        else {\n            this.map = null;\n        }\n    }\n    /**\n     * Reports whether the body includes one or more values for a given parameter.\n     * @param {?} param The parameter name.\n     * @return {?} True if the parameter has one or more values,\n     * false if it has no value or is not present.\n     */\n    has(param) {\n        this.init();\n        return (/** @type {?} */ (this.map)).has(param);\n    }\n    /**\n     * Retrieves the first value for a parameter.\n     * @param {?} param The parameter name.\n     * @return {?} The first value of the given parameter,\n     * or `null` if the parameter is not present.\n     */\n    get(param) {\n        this.init();\n        /** @type {?} */\n        const res = (/** @type {?} */ (this.map)).get(param);\n        return !!res ? res[0] : null;\n    }\n    /**\n     * Retrieves all values for a  parameter.\n     * @param {?} param The parameter name.\n     * @return {?} All values in a string array,\n     * or `null` if the parameter not present.\n     */\n    getAll(param) {\n        this.init();\n        return (/** @type {?} */ (this.map)).get(param) || null;\n    }\n    /**\n     * Retrieves all the parameters for this body.\n     * @return {?} The parameter names in a string array.\n     */\n    keys() {\n        this.init();\n        return Array.from((/** @type {?} */ (this.map)).keys());\n    }\n    /**\n     * Appends a new value to existing values for a parameter.\n     * @param {?} param The parameter name.\n     * @param {?} value The new value to add.\n     * @return {?} A new body with the appended value.\n     */\n    append(param, value) { return this.clone({ param, value, op: 'a' }); }\n    /**\n     * Replaces the value for a parameter.\n     * @param {?} param The parameter name.\n     * @param {?} value The new value.\n     * @return {?} A new body with the new value.\n     */\n    set(param, value) { return this.clone({ param, value, op: 's' }); }\n    /**\n     * Removes a given value or all values from a parameter.\n     * @param {?} param The parameter name.\n     * @param {?=} value The value to remove, if provided.\n     * @return {?} A new body with the given value removed, or with all values\n     * removed if no value is specified.\n     */\n    delete(param, value) { return this.clone({ param, value, op: 'd' }); }\n    /**\n     * Serializes the body to an encoded string, where key-value pairs (separated by `=`) are\n     * separated by `&`s.\n     * @return {?}\n     */\n    toString() {\n        this.init();\n        return this.keys()\n            .map((/**\n         * @param {?} key\n         * @return {?}\n         */\n        key => {\n            /** @type {?} */\n            const eKey = this.encoder.encodeKey(key);\n            return (/** @type {?} */ ((/** @type {?} */ (this.map)).get(key))).map((/**\n             * @param {?} value\n             * @return {?}\n             */\n            value => eKey + '=' + this.encoder.encodeValue(value)))\n                .join('&');\n        }))\n            .join('&');\n    }\n    /**\n     * @private\n     * @param {?} update\n     * @return {?}\n     */\n    clone(update) {\n        /** @type {?} */\n        const clone = new HttpParams((/** @type {?} */ ({ encoder: this.encoder })));\n        clone.cloneFrom = this.cloneFrom || this;\n        clone.updates = (this.updates || []).concat([update]);\n        return clone;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    init() {\n        if (this.map === null) {\n            this.map = new Map();\n        }\n        if (this.cloneFrom !== null) {\n            this.cloneFrom.init();\n            this.cloneFrom.keys().forEach((/**\n             * @param {?} key\n             * @return {?}\n             */\n            key => (/** @type {?} */ (this.map)).set(key, (/** @type {?} */ ((/** @type {?} */ ((/** @type {?} */ (this.cloneFrom)).map)).get(key))))));\n            (/** @type {?} */ (this.updates)).forEach((/**\n             * @param {?} update\n             * @return {?}\n             */\n            update => {\n                switch (update.op) {\n                    case 'a':\n                    case 's':\n                        /** @type {?} */\n                        const base = (update.op === 'a' ? (/** @type {?} */ (this.map)).get(update.param) : undefined) || [];\n                        base.push((/** @type {?} */ (update.value)));\n                        (/** @type {?} */ (this.map)).set(update.param, base);\n                        break;\n                    case 'd':\n                        if (update.value !== undefined) {\n                            /** @type {?} */\n                            let base = (/** @type {?} */ (this.map)).get(update.param) || [];\n                            /** @type {?} */\n                            const idx = base.indexOf(update.value);\n                            if (idx !== -1) {\n                                base.splice(idx, 1);\n                            }\n                            if (base.length > 0) {\n                                (/** @type {?} */ (this.map)).set(update.param, base);\n                            }\n                            else {\n                                (/** @type {?} */ (this.map)).delete(update.param);\n                            }\n                        }\n                        else {\n                            (/** @type {?} */ (this.map)).delete(update.param);\n                            break;\n                        }\n                }\n            }));\n            this.cloneFrom = this.updates = null;\n        }\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpParams.prototype.map;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpParams.prototype.encoder;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpParams.prototype.updates;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpParams.prototype.cloneFrom;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Construction interface for `HttpRequest`s.\n *\n * All values are optional and will override default values if provided.\n * @record\n */\nfunction HttpRequestInit() { }\nif (false) {\n    /** @type {?|undefined} */\n    HttpRequestInit.prototype.headers;\n    /** @type {?|undefined} */\n    HttpRequestInit.prototype.reportProgress;\n    /** @type {?|undefined} */\n    HttpRequestInit.prototype.params;\n    /** @type {?|undefined} */\n    HttpRequestInit.prototype.responseType;\n    /** @type {?|undefined} */\n    HttpRequestInit.prototype.withCredentials;\n}\n/**\n * Determine whether the given HTTP method may include a body.\n * @param {?} method\n * @return {?}\n */\nfunction mightHaveBody(method) {\n    switch (method) {\n        case 'DELETE':\n        case 'GET':\n        case 'HEAD':\n        case 'OPTIONS':\n        case 'JSONP':\n            return false;\n        default:\n            return true;\n    }\n}\n/**\n * Safely assert whether the given value is an ArrayBuffer.\n *\n * In some execution environments ArrayBuffer is not defined.\n * @param {?} value\n * @return {?}\n */\nfunction isArrayBuffer(value) {\n    return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\n}\n/**\n * Safely assert whether the given value is a Blob.\n *\n * In some execution environments Blob is not defined.\n * @param {?} value\n * @return {?}\n */\nfunction isBlob(value) {\n    return typeof Blob !== 'undefined' && value instanceof Blob;\n}\n/**\n * Safely assert whether the given value is a FormData instance.\n *\n * In some execution environments FormData is not defined.\n * @param {?} value\n * @return {?}\n */\nfunction isFormData(value) {\n    return typeof FormData !== 'undefined' && value instanceof FormData;\n}\n/**\n * An outgoing HTTP request with an optional typed body.\n *\n * `HttpRequest` represents an outgoing request, including URL, method,\n * headers, body, and other request configuration options. Instances should be\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\n * method should be used.\n *\n * \\@publicApi\n * @template T\n */\nclass HttpRequest {\n    /**\n     * @param {?} method\n     * @param {?} url\n     * @param {?=} third\n     * @param {?=} fourth\n     */\n    constructor(method, url, third, fourth) {\n        this.url = url;\n        /**\n         * The request body, or `null` if one isn't set.\n         *\n         * Bodies are not enforced to be immutable, as they can include a reference to any\n         * user-defined data type. However, interceptors should take care to preserve\n         * idempotence by treating them as such.\n         */\n        this.body = null;\n        /**\n         * Whether this request should be made in a way that exposes progress events.\n         *\n         * Progress events are expensive (change detection runs on each event) and so\n         * they should only be requested if the consumer intends to monitor them.\n         */\n        this.reportProgress = false;\n        /**\n         * Whether this request should be sent with outgoing credentials (cookies).\n         */\n        this.withCredentials = false;\n        /**\n         * The expected response type of the server.\n         *\n         * This is used to parse the response appropriately before returning it to\n         * the requestee.\n         */\n        this.responseType = 'json';\n        this.method = method.toUpperCase();\n        // Next, need to figure out which argument holds the HttpRequestInit\n        // options, if any.\n        /** @type {?} */\n        let options;\n        // Check whether a body argument is expected. The only valid way to omit\n        // the body argument is to use a known no-body method like GET.\n        if (mightHaveBody(this.method) || !!fourth) {\n            // Body is the third argument, options are the fourth.\n            this.body = (third !== undefined) ? (/** @type {?} */ (third)) : null;\n            options = fourth;\n        }\n        else {\n            // No body required, options are the third argument. The body stays null.\n            options = (/** @type {?} */ (third));\n        }\n        // If options have been passed, interpret them.\n        if (options) {\n            // Normalize reportProgress and withCredentials.\n            this.reportProgress = !!options.reportProgress;\n            this.withCredentials = !!options.withCredentials;\n            // Override default response type of 'json' if one is provided.\n            if (!!options.responseType) {\n                this.responseType = options.responseType;\n            }\n            // Override headers if they're provided.\n            if (!!options.headers) {\n                this.headers = options.headers;\n            }\n            if (!!options.params) {\n                this.params = options.params;\n            }\n        }\n        // If no headers have been passed in, construct a new HttpHeaders instance.\n        if (!this.headers) {\n            this.headers = new HttpHeaders();\n        }\n        // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\n        if (!this.params) {\n            this.params = new HttpParams();\n            this.urlWithParams = url;\n        }\n        else {\n            // Encode the parameters to a string in preparation for inclusion in the URL.\n            /** @type {?} */\n            const params = this.params.toString();\n            if (params.length === 0) {\n                // No parameters, the visible URL is just the URL given at creation time.\n                this.urlWithParams = url;\n            }\n            else {\n                // Does the URL already have query parameters? Look for '?'.\n                /** @type {?} */\n                const qIdx = url.indexOf('?');\n                // There are 3 cases to handle:\n                // 1) No existing parameters -> append '?' followed by params.\n                // 2) '?' exists and is followed by existing query string ->\n                //    append '&' followed by params.\n                // 3) '?' exists at the end of the url -> append params directly.\n                // This basically amounts to determining the character, if any, with\n                // which to join the URL and parameters.\n                /** @type {?} */\n                const sep = qIdx === -1 ? '?' : (qIdx < url.length - 1 ? '&' : '');\n                this.urlWithParams = url + sep + params;\n            }\n        }\n    }\n    /**\n     * Transform the free-form body into a serialized format suitable for\n     * transmission to the server.\n     * @return {?}\n     */\n    serializeBody() {\n        // If no body is present, no need to serialize it.\n        if (this.body === null) {\n            return null;\n        }\n        // Check whether the body is already in a serialized form. If so,\n        // it can just be returned directly.\n        if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) ||\n            typeof this.body === 'string') {\n            return this.body;\n        }\n        // Check whether the body is an instance of HttpUrlEncodedParams.\n        if (this.body instanceof HttpParams) {\n            return this.body.toString();\n        }\n        // Check whether the body is an object or array, and serialize with JSON if so.\n        if (typeof this.body === 'object' || typeof this.body === 'boolean' ||\n            Array.isArray(this.body)) {\n            return JSON.stringify(this.body);\n        }\n        // Fall back on toString() for everything else.\n        return ((/** @type {?} */ (this.body))).toString();\n    }\n    /**\n     * Examine the body and attempt to infer an appropriate MIME type\n     * for it.\n     *\n     * If no such type can be inferred, this method will return `null`.\n     * @return {?}\n     */\n    detectContentTypeHeader() {\n        // An empty body has no content type.\n        if (this.body === null) {\n            return null;\n        }\n        // FormData bodies rely on the browser's content type assignment.\n        if (isFormData(this.body)) {\n            return null;\n        }\n        // Blobs usually have their own content type. If it doesn't, then\n        // no type can be inferred.\n        if (isBlob(this.body)) {\n            return this.body.type || null;\n        }\n        // Array buffers have unknown contents and thus no type can be inferred.\n        if (isArrayBuffer(this.body)) {\n            return null;\n        }\n        // Technically, strings could be a form of JSON data, but it's safe enough\n        // to assume they're plain strings.\n        if (typeof this.body === 'string') {\n            return 'text/plain';\n        }\n        // `HttpUrlEncodedParams` has its own content-type.\n        if (this.body instanceof HttpParams) {\n            return 'application/x-www-form-urlencoded;charset=UTF-8';\n        }\n        // Arrays, objects, and numbers will be encoded as JSON.\n        if (typeof this.body === 'object' || typeof this.body === 'number' ||\n            Array.isArray(this.body)) {\n            return 'application/json';\n        }\n        // No type could be inferred.\n        return null;\n    }\n    /**\n     * @param {?=} update\n     * @return {?}\n     */\n    clone(update = {}) {\n        // For method, url, and responseType, take the current value unless\n        // it is overridden in the update hash.\n        /** @type {?} */\n        const method = update.method || this.method;\n        /** @type {?} */\n        const url = update.url || this.url;\n        /** @type {?} */\n        const responseType = update.responseType || this.responseType;\n        // The body is somewhat special - a `null` value in update.body means\n        // whatever current body is present is being overridden with an empty\n        // body, whereas an `undefined` value in update.body implies no\n        // override.\n        /** @type {?} */\n        const body = (update.body !== undefined) ? update.body : this.body;\n        // Carefully handle the boolean options to differentiate between\n        // `false` and `undefined` in the update args.\n        /** @type {?} */\n        const withCredentials = (update.withCredentials !== undefined) ? update.withCredentials : this.withCredentials;\n        /** @type {?} */\n        const reportProgress = (update.reportProgress !== undefined) ? update.reportProgress : this.reportProgress;\n        // Headers and params may be appended to if `setHeaders` or\n        // `setParams` are used.\n        /** @type {?} */\n        let headers = update.headers || this.headers;\n        /** @type {?} */\n        let params = update.params || this.params;\n        // Check whether the caller has asked to add headers.\n        if (update.setHeaders !== undefined) {\n            // Set every requested header.\n            headers =\n                Object.keys(update.setHeaders)\n                    .reduce((/**\n                 * @param {?} headers\n                 * @param {?} name\n                 * @return {?}\n                 */\n                (headers, name) => headers.set(name, (/** @type {?} */ (update.setHeaders))[name])), headers);\n        }\n        // Check whether the caller has asked to set params.\n        if (update.setParams) {\n            // Set every requested param.\n            params = Object.keys(update.setParams)\n                .reduce((/**\n             * @param {?} params\n             * @param {?} param\n             * @return {?}\n             */\n            (params, param) => params.set(param, (/** @type {?} */ (update.setParams))[param])), params);\n        }\n        // Finally, construct the new HttpRequest using the pieces from above.\n        return new HttpRequest(method, url, body, {\n            params, headers, reportProgress, responseType, withCredentials,\n        });\n    }\n}\nif (false) {\n    /**\n     * The request body, or `null` if one isn't set.\n     *\n     * Bodies are not enforced to be immutable, as they can include a reference to any\n     * user-defined data type. However, interceptors should take care to preserve\n     * idempotence by treating them as such.\n     * @type {?}\n     */\n    HttpRequest.prototype.body;\n    /**\n     * Outgoing headers for this request.\n     * @type {?}\n     */\n    HttpRequest.prototype.headers;\n    /**\n     * Whether this request should be made in a way that exposes progress events.\n     *\n     * Progress events are expensive (change detection runs on each event) and so\n     * they should only be requested if the consumer intends to monitor them.\n     * @type {?}\n     */\n    HttpRequest.prototype.reportProgress;\n    /**\n     * Whether this request should be sent with outgoing credentials (cookies).\n     * @type {?}\n     */\n    HttpRequest.prototype.withCredentials;\n    /**\n     * The expected response type of the server.\n     *\n     * This is used to parse the response appropriately before returning it to\n     * the requestee.\n     * @type {?}\n     */\n    HttpRequest.prototype.responseType;\n    /**\n     * The outgoing HTTP request method.\n     * @type {?}\n     */\n    HttpRequest.prototype.method;\n    /**\n     * Outgoing URL parameters.\n     * @type {?}\n     */\n    HttpRequest.prototype.params;\n    /**\n     * The outgoing URL with all URL parameters set.\n     * @type {?}\n     */\n    HttpRequest.prototype.urlWithParams;\n    /** @type {?} */\n    HttpRequest.prototype.url;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @enum {number} */\nconst HttpEventType = {\n    /**\n     * The request was sent out over the wire.\n     */\n    Sent: 0,\n    /**\n     * An upload progress event was received.\n     */\n    UploadProgress: 1,\n    /**\n     * The response status code and headers were received.\n     */\n    ResponseHeader: 2,\n    /**\n     * A download progress event was received.\n     */\n    DownloadProgress: 3,\n    /**\n     * The full response including the body was received.\n     */\n    Response: 4,\n    /**\n     * A custom event from an interceptor or a backend.\n     */\n    User: 5,\n};\nHttpEventType[HttpEventType.Sent] = 'Sent';\nHttpEventType[HttpEventType.UploadProgress] = 'UploadProgress';\nHttpEventType[HttpEventType.ResponseHeader] = 'ResponseHeader';\nHttpEventType[HttpEventType.DownloadProgress] = 'DownloadProgress';\nHttpEventType[HttpEventType.Response] = 'Response';\nHttpEventType[HttpEventType.User] = 'User';\n/**\n * Base interface for progress events.\n *\n * \\@publicApi\n * @record\n */\nfunction HttpProgressEvent() { }\nif (false) {\n    /**\n     * Progress event type is either upload or download.\n     * @type {?}\n     */\n    HttpProgressEvent.prototype.type;\n    /**\n     * Number of bytes uploaded or downloaded.\n     * @type {?}\n     */\n    HttpProgressEvent.prototype.loaded;\n    /**\n     * Total number of bytes to upload or download. Depending on the request or\n     * response, this may not be computable and thus may not be present.\n     * @type {?|undefined}\n     */\n    HttpProgressEvent.prototype.total;\n}\n/**\n * A download progress event.\n *\n * \\@publicApi\n * @record\n */\nfunction HttpDownloadProgressEvent() { }\nif (false) {\n    /** @type {?} */\n    HttpDownloadProgressEvent.prototype.type;\n    /**\n     * The partial response body as downloaded so far.\n     *\n     * Only present if the responseType was `text`.\n     * @type {?|undefined}\n     */\n    HttpDownloadProgressEvent.prototype.partialText;\n}\n/**\n * An upload progress event.\n *\n * \\@publicApi\n * @record\n */\nfunction HttpUploadProgressEvent() { }\nif (false) {\n    /** @type {?} */\n    HttpUploadProgressEvent.prototype.type;\n}\n/**\n * An event indicating that the request was sent to the server. Useful\n * when a request may be retried multiple times, to distinguish between\n * retries on the final event stream.\n *\n * \\@publicApi\n * @record\n */\nfunction HttpSentEvent() { }\nif (false) {\n    /** @type {?} */\n    HttpSentEvent.prototype.type;\n}\n/**\n * A user-defined event.\n *\n * Grouping all custom events under this type ensures they will be handled\n * and forwarded by all implementations of interceptors.\n *\n * \\@publicApi\n * @record\n * @template T\n */\nfunction HttpUserEvent() { }\nif (false) {\n    /** @type {?} */\n    HttpUserEvent.prototype.type;\n}\n/**\n * An error that represents a failed attempt to JSON.parse text coming back\n * from the server.\n *\n * It bundles the Error object with the actual response body that failed to parse.\n *\n *\n * @record\n */\nfunction HttpJsonParseError() { }\nif (false) {\n    /** @type {?} */\n    HttpJsonParseError.prototype.error;\n    /** @type {?} */\n    HttpJsonParseError.prototype.text;\n}\n/**\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\n *\n * \\@publicApi\n * @abstract\n */\nclass HttpResponseBase {\n    /**\n     * Super-constructor for all responses.\n     *\n     * The single parameter accepted is an initialization hash. Any properties\n     * of the response passed there will override the default values.\n     * @param {?} init\n     * @param {?=} defaultStatus\n     * @param {?=} defaultStatusText\n     */\n    constructor(init, defaultStatus = 200, defaultStatusText = 'OK') {\n        // If the hash has values passed, use them to initialize the response.\n        // Otherwise use the default values.\n        this.headers = init.headers || new HttpHeaders();\n        this.status = init.status !== undefined ? init.status : defaultStatus;\n        this.statusText = init.statusText || defaultStatusText;\n        this.url = init.url || null;\n        // Cache the ok value to avoid defining a getter.\n        this.ok = this.status >= 200 && this.status < 300;\n    }\n}\nif (false) {\n    /**\n     * All response headers.\n     * @type {?}\n     */\n    HttpResponseBase.prototype.headers;\n    /**\n     * Response status code.\n     * @type {?}\n     */\n    HttpResponseBase.prototype.status;\n    /**\n     * Textual description of response status code.\n     *\n     * Do not depend on this.\n     * @type {?}\n     */\n    HttpResponseBase.prototype.statusText;\n    /**\n     * URL of the resource retrieved, or null if not available.\n     * @type {?}\n     */\n    HttpResponseBase.prototype.url;\n    /**\n     * Whether the status code falls in the 2xx range.\n     * @type {?}\n     */\n    HttpResponseBase.prototype.ok;\n    /**\n     * Type of the response, narrowed to either the full response or the header.\n     * @type {?}\n     */\n    HttpResponseBase.prototype.type;\n}\n/**\n * A partial HTTP response which only includes the status and header data,\n * but no response body.\n *\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\n * event stream, only when progress events are requested.\n *\n * \\@publicApi\n */\nclass HttpHeaderResponse extends HttpResponseBase {\n    /**\n     * Create a new `HttpHeaderResponse` with the given parameters.\n     * @param {?=} init\n     */\n    constructor(init = {}) {\n        super(init);\n        this.type = HttpEventType.ResponseHeader;\n    }\n    /**\n     * Copy this `HttpHeaderResponse`, overriding its contents with the\n     * given parameter hash.\n     * @param {?=} update\n     * @return {?}\n     */\n    clone(update = {}) {\n        // Perform a straightforward initialization of the new HttpHeaderResponse,\n        // overriding the current parameters with new ones if given.\n        return new HttpHeaderResponse({\n            headers: update.headers || this.headers,\n            status: update.status !== undefined ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    }\n}\nif (false) {\n    /** @type {?} */\n    HttpHeaderResponse.prototype.type;\n}\n/**\n * A full HTTP response, including a typed response body (which may be `null`\n * if one was not returned).\n *\n * `HttpResponse` is a `HttpEvent` available on the response event\n * stream.\n *\n * \\@publicApi\n * @template T\n */\nclass HttpResponse extends HttpResponseBase {\n    /**\n     * Construct a new `HttpResponse`.\n     * @param {?=} init\n     */\n    constructor(init = {}) {\n        super(init);\n        this.type = HttpEventType.Response;\n        this.body = init.body !== undefined ? init.body : null;\n    }\n    /**\n     * @param {?=} update\n     * @return {?}\n     */\n    clone(update = {}) {\n        return new HttpResponse({\n            body: (update.body !== undefined) ? update.body : this.body,\n            headers: update.headers || this.headers,\n            status: (update.status !== undefined) ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    }\n}\nif (false) {\n    /**\n     * The response body, or `null` if one was not returned.\n     * @type {?}\n     */\n    HttpResponse.prototype.body;\n    /** @type {?} */\n    HttpResponse.prototype.type;\n}\n/**\n * A response that represents an error or failure, either from a\n * non-successful HTTP status, an error while executing the request,\n * or some other failure which occurred during the parsing of the response.\n *\n * Any error returned on the `Observable` response stream will be\n * wrapped in an `HttpErrorResponse` to provide additional context about\n * the state of the HTTP layer when the error occurred. The error property\n * will contain either a wrapped Error object or the error response returned\n * from the server.\n *\n * \\@publicApi\n */\nclass HttpErrorResponse extends HttpResponseBase {\n    /**\n     * @param {?} init\n     */\n    constructor(init) {\n        // Initialize with a default status of 0 / Unknown Error.\n        super(init, 0, 'Unknown Error');\n        this.name = 'HttpErrorResponse';\n        /**\n         * Errors are never okay, even when the status code is in the 2xx success range.\n         */\n        this.ok = false;\n        // If the response was successful, then this was a parse error. Otherwise, it was\n        // a protocol-level failure of some sort. Either the request failed in transit\n        // or the server returned an unsuccessful status code.\n        if (this.status >= 200 && this.status < 300) {\n            this.message = `Http failure during parsing for ${init.url || '(unknown url)'}`;\n        }\n        else {\n            this.message =\n                `Http failure response for ${init.url || '(unknown url)'}: ${init.status} ${init.statusText}`;\n        }\n        this.error = init.error || null;\n    }\n}\nif (false) {\n    /** @type {?} */\n    HttpErrorResponse.prototype.name;\n    /** @type {?} */\n    HttpErrorResponse.prototype.message;\n    /** @type {?} */\n    HttpErrorResponse.prototype.error;\n    /**\n     * Errors are never okay, even when the status code is in the 2xx success range.\n     * @type {?}\n     */\n    HttpErrorResponse.prototype.ok;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Constructs an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\n * the given `body`. This function clones the object and adds the body.\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n *\n * @template T\n * @param {?} options\n * @param {?} body\n * @return {?}\n */\nfunction addBody(options, body) {\n    return {\n        body,\n        headers: options.headers,\n        observe: options.observe,\n        params: options.params,\n        reportProgress: options.reportProgress,\n        responseType: options.responseType,\n        withCredentials: options.withCredentials,\n    };\n}\n/**\n * Performs HTTP requests.\n * This service is available as an injectable class, with methods to perform HTTP requests.\n * Each request method has multiple signatures, and the return type varies based on\n * the signature that is called (mainly the values of `observe` and `responseType`).\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n *\n * \\@usageNotes\n * Sample HTTP requests for the [Tour of Heroes](/tutorial/toh-pt0) application.\n *\n * ### HTTP Request Example\n *\n * ```\n *  // GET heroes whose name contains search term\n * searchHeroes(term: string): observable<Hero[]>{\n *\n *  const params = new HttpParams({fromString: 'name=term'});\n *    return this.httpClient.request('GET', this.heroesUrl, {responseType:'json', params});\n * }\n * ```\n * ### JSONP Example\n * ```\n * requestJsonp(url, callback = 'callback') {\n *  return this.httpClient.jsonp(this.heroesURL, callback);\n * }\n * ```\n *\n * ### PATCH Example\n * ```\n * // PATCH one of the heroes' name\n * patchHero (id: number, heroName: string): Observable<{}> {\n * const url = `${this.heroesUrl}/${id}`;   // PATCH api/heroes/42\n *  return this.httpClient.patch(url, {name: heroName}, httpOptions)\n *    .pipe(catchError(this.handleError('patchHero')));\n * }\n * ```\n *\n * @see [HTTP Guide](guide/http)\n *\n * \\@publicApi\n */\nclass HttpClient {\n    /**\n     * @param {?} handler\n     */\n    constructor(handler) {\n        this.handler = handler;\n    }\n    /**\n     * Constructs an observable for a generic HTTP request that, when subscribed,\n     * fires the request through the chain of registered interceptors and on to the\n     * server.\n     *\n     * You can pass an `HttpRequest` directly as the only parameter. In this case,\n     * the call returns an observable of the raw `HttpEvent` stream.\n     *\n     * Alternatively you can pass an HTTP method as the first parameter,\n     * a URL string as the second, and an options hash containing the request body as the third.\n     * See `addBody()`. In this case, the specified `responseType` and `observe` options determine the\n     * type of returned observable.\n     *   * The `responseType` value determines how a successful response body is parsed.\n     *   * If `responseType` is the default `json`, you can pass a type interface for the resulting\n     * object as a type parameter to the call.\n     *\n     * The `observe` value determines the return type, according to what you are interested in\n     * observing.\n     *   * An `observe` value of events returns an observable of the raw `HttpEvent` stream, including\n     * progress events by default.\n     *   * An `observe` value of response returns an observable of `HttpResponse<T>`,\n     * where the `T` parameter depends on the `responseType` and any optionally provided type\n     * parameter.\n     *   * An `observe` value of body returns an observable of `<T>` with the same `T` body type.\n     *\n     * @param {?} first\n     * @param {?=} url\n     * @param {?=} options\n     * @return {?}\n     */\n    request(first, url, options = {}) {\n        /** @type {?} */\n        let req;\n        // First, check whether the primary argument is an instance of `HttpRequest`.\n        if (first instanceof HttpRequest) {\n            // It is. The other arguments must be undefined (per the signatures) and can be\n            // ignored.\n            req = (/** @type {?} */ (first));\n        }\n        else {\n            // It's a string, so it represents a URL. Construct a request based on it,\n            // and incorporate the remaining arguments (assuming `GET` unless a method is\n            // provided.\n            // Figure out the headers.\n            /** @type {?} */\n            let headers = undefined;\n            if (options.headers instanceof HttpHeaders) {\n                headers = options.headers;\n            }\n            else {\n                headers = new HttpHeaders(options.headers);\n            }\n            // Sort out parameters.\n            /** @type {?} */\n            let params = undefined;\n            if (!!options.params) {\n                if (options.params instanceof HttpParams) {\n                    params = options.params;\n                }\n                else {\n                    params = new HttpParams((/** @type {?} */ ({ fromObject: options.params })));\n                }\n            }\n            // Construct the request.\n            req = new HttpRequest(first, (/** @type {?} */ (url)), (options.body !== undefined ? options.body : null), {\n                headers,\n                params,\n                reportProgress: options.reportProgress,\n                // By default, JSON is assumed to be returned for all calls.\n                responseType: options.responseType || 'json',\n                withCredentials: options.withCredentials,\n            });\n        }\n        // Start with an Observable.of() the initial request, and run the handler (which\n        // includes all interceptors) inside a concatMap(). This way, the handler runs\n        // inside an Observable chain, which causes interceptors to be re-run on every\n        // subscription (this also makes retries re-run the handler, including interceptors).\n        /** @type {?} */\n        const events$ = of(req).pipe(concatMap((/**\n         * @param {?} req\n         * @return {?}\n         */\n        (req) => this.handler.handle(req))));\n        // If coming via the API signature which accepts a previously constructed HttpRequest,\n        // the only option is to get the event stream. Otherwise, return the event stream if\n        // that is what was requested.\n        if (first instanceof HttpRequest || options.observe === 'events') {\n            return events$;\n        }\n        // The requested stream contains either the full response or the body. In either\n        // case, the first step is to filter the event stream to extract a stream of\n        // responses(s).\n        /** @type {?} */\n        const res$ = (/** @type {?} */ (events$.pipe(filter((/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => event instanceof HttpResponse)))));\n        // Decide which stream to return.\n        switch (options.observe || 'body') {\n            case 'body':\n                // The requested stream is the body. Map the response stream to the response\n                // body. This could be done more simply, but a misbehaving interceptor might\n                // transform the response body into a different format and ignore the requested\n                // responseType. Guard against this by validating that the response is of the\n                // requested type.\n                switch (req.responseType) {\n                    case 'arraybuffer':\n                        return res$.pipe(map((/**\n                         * @param {?} res\n                         * @return {?}\n                         */\n                        (res) => {\n                            // Validate that the body is an ArrayBuffer.\n                            if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\n                                throw new Error('Response is not an ArrayBuffer.');\n                            }\n                            return res.body;\n                        })));\n                    case 'blob':\n                        return res$.pipe(map((/**\n                         * @param {?} res\n                         * @return {?}\n                         */\n                        (res) => {\n                            // Validate that the body is a Blob.\n                            if (res.body !== null && !(res.body instanceof Blob)) {\n                                throw new Error('Response is not a Blob.');\n                            }\n                            return res.body;\n                        })));\n                    case 'text':\n                        return res$.pipe(map((/**\n                         * @param {?} res\n                         * @return {?}\n                         */\n                        (res) => {\n                            // Validate that the body is a string.\n                            if (res.body !== null && typeof res.body !== 'string') {\n                                throw new Error('Response is not a string.');\n                            }\n                            return res.body;\n                        })));\n                    case 'json':\n                    default:\n                        // No validation needed for JSON responses, as they can be of any type.\n                        return res$.pipe(map((/**\n                         * @param {?} res\n                         * @return {?}\n                         */\n                        (res) => res.body)));\n                }\n            case 'response':\n                // The response stream was requested directly, so return it.\n                return res$;\n            default:\n                // Guard against new future observe types being added.\n                throw new Error(`Unreachable: unhandled observe type ${options.observe}}`);\n        }\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `DELETE` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     *\n     * @param {?} url     The endpoint URL.\n     * @param {?=} options The HTTP options to send with the request.\n     *\n     * @return {?}\n     */\n    delete(url, options = {}) {\n        return this.request('DELETE', url, (/** @type {?} */ (options)));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `GET` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    get(url, options = {}) {\n        return this.request('GET', url, (/** @type {?} */ (options)));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `HEAD` request to execute on the server. The `HEAD` method returns\n     * meta information about the resource without transferring the\n     * resource itself. See the individual overloads for\n     * details on the return type.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    head(url, options = {}) {\n        return this.request('HEAD', url, (/** @type {?} */ (options)));\n    }\n    /**\n     * Constructs an `Observable` that, when subscribed, causes a request with the special method\n     * `JSONP` to be dispatched via the interceptor pipeline.\n     * The [JSONP pattern](https://en.wikipedia.org/wiki/JSONP) works around limitations of certain\n     * API endpoints that don't support newer,\n     * and preferable [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) protocol.\n     * JSONP treats the endpoint API as a JavaScript file and tricks the browser to process the\n     * requests even if the API endpoint is not located on the same domain (origin) as the client-side\n     * application making the request.\n     * The endpoint API must support JSONP callback for JSONP requests to work.\n     * The resource API returns the JSON response wrapped in a callback function.\n     * You can pass the callback function name as one of the query parameters.\n     * Note that JSONP requests can only be used with `GET` requests.\n     *\n     * @template T\n     * @param {?} url The resource URL.\n     * @param {?} callbackParam The callback function name.\n     *\n     * @return {?}\n     */\n    jsonp(url, callbackParam) {\n        return this.request('JSONP', url, {\n            params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\n            observe: 'body',\n            responseType: 'json',\n        });\n    }\n    /**\n     * Constructs an `Observable` that, when subscribed, causes the configured\n     * `OPTIONS` request to execute on the server. This method allows the client\n     * to determine the supported HTTP methods and other capabilites of an endpoint,\n     * without implying a resource action. See the individual overloads for\n     * details on the return type.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    options(url, options = {}) {\n        return this.request('OPTIONS', url, (/** @type {?} */ (options)));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `PATCH` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    patch(url, body, options = {}) {\n        return this.request('PATCH', url, addBody(options, body));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `POST` request to execute on the server. The server responds with the location of\n     * the replaced resource. See the individual overloads for\n     * details on the return type.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    post(url, body, options = {}) {\n        return this.request('POST', url, addBody(options, body));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `PUT` request to execute on the server. The `PUT` method replaces an existing resource\n     * with a new set of values.\n     * See the individual overloads for details on the return type.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    put(url, body, options = {}) {\n        return this.request('PUT', url, addBody(options, body));\n    }\n}\nHttpClient.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nHttpClient.ctorParameters = () => [\n    { type: HttpHandler }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpClient.prototype.handler;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Intercepts and handles an `HttpRequest` or `HttpResponse`.\n *\n * Most interceptors transform the outgoing request before passing it to the\n * next interceptor in the chain, by calling `next.handle(transformedReq)`.\n * An interceptor may transform the\n * response event stream as well, by applying additional RxJS operators on the stream\n * returned by `next.handle()`.\n *\n * More rarely, an interceptor may handle the request entirely,\n * and compose a new event stream instead of invoking `next.handle()`. This is an\n * acceptable behavior, but keep in mind that further interceptors will be skipped entirely.\n *\n * It is also rare but valid for an interceptor to return multiple responses on the\n * event stream for a single request.\n *\n * \\@publicApi\n *\n * @see [HTTP Guide](guide/http#intercepting-requests-and-responses)\n *\n * \\@usageNotes\n *\n * To use the same instance of `HttpInterceptors` for the entire app, import the `HttpClientModule`\n * only in your `AppModule`, and add the interceptors to the root application injector .\n * If you import `HttpClientModule` multiple times across different modules (for example, in lazy\n * loading modules), each import creates a new copy of the `HttpClientModule`, which overwrites the interceptors\n * provided in the root module.\n *\n * @record\n */\nfunction HttpInterceptor() { }\nif (false) {\n    /**\n     * Identifies and handles a given HTTP request.\n     * @param {?} req The outgoing request object to handle.\n     * @param {?} next The next interceptor in the chain, or the backend\n     * if no interceptors remain in the chain.\n     * @return {?} An observable of the event stream.\n     */\n    HttpInterceptor.prototype.intercept = function (req, next) { };\n}\n/**\n * `HttpHandler` which applies an `HttpInterceptor` to an `HttpRequest`.\n *\n *\n */\nclass HttpInterceptorHandler {\n    /**\n     * @param {?} next\n     * @param {?} interceptor\n     */\n    constructor(next, interceptor) {\n        this.next = next;\n        this.interceptor = interceptor;\n    }\n    /**\n     * @param {?} req\n     * @return {?}\n     */\n    handle(req) {\n        return this.interceptor.intercept(req, this.next);\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpInterceptorHandler.prototype.next;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpInterceptorHandler.prototype.interceptor;\n}\n/**\n * A multi-provider token that represents the array of registered\n * `HttpInterceptor` objects.\n *\n * \\@publicApi\n * @type {?}\n */\nconst HTTP_INTERCEPTORS = new InjectionToken('HTTP_INTERCEPTORS');\nclass NoopInterceptor {\n    /**\n     * @param {?} req\n     * @param {?} next\n     * @return {?}\n     */\n    intercept(req, next) {\n        return next.handle(req);\n    }\n}\nNoopInterceptor.decorators = [\n    { type: Injectable }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Every request made through JSONP needs a callback name that's unique across the\n// whole page. Each request is assigned an id and the callback name is constructed\n// from that. The next id to be assigned is tracked in a global variable here that\n// is shared among all applications on the page.\n/** @type {?} */\nlet nextRequestId = 0;\n// Error text given when a JSONP script is injected, but doesn't invoke the callback\n// passed in its URL.\n/** @type {?} */\nconst JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\n// Error text given when a request is passed to the JsonpClientBackend that doesn't\n// have a request method JSONP.\n/** @type {?} */\nconst JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\n/** @type {?} */\nconst JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';\n/**\n * DI token/abstract type representing a map of JSONP callbacks.\n *\n * In the browser, this should always be the `window` object.\n *\n *\n * @abstract\n */\nclass JsonpCallbackContext {\n}\n/**\n * Processes an `HttpRequest` with the JSONP method,\n * by performing JSONP style requests.\n * @see `HttpHandler`\n * @see `HttpXhrBackend`\n *\n * \\@publicApi\n */\nclass JsonpClientBackend {\n    /**\n     * @param {?} callbackMap\n     * @param {?} document\n     */\n    constructor(callbackMap, document) {\n        this.callbackMap = callbackMap;\n        this.document = document;\n    }\n    /**\n     * Get the name of the next callback method, by incrementing the global `nextRequestId`.\n     * @private\n     * @return {?}\n     */\n    nextCallback() { return `ng_jsonp_callback_${nextRequestId++}`; }\n    /**\n     * Processes a JSONP request and returns an event stream of the results.\n     * @param {?} req The request object.\n     * @return {?} An observable of the response events.\n     *\n     */\n    handle(req) {\n        // Firstly, check both the method and response type. If either doesn't match\n        // then the request was improperly routed here and cannot be handled.\n        if (req.method !== 'JSONP') {\n            throw new Error(JSONP_ERR_WRONG_METHOD);\n        }\n        else if (req.responseType !== 'json') {\n            throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);\n        }\n        // Everything else happens inside the Observable boundary.\n        return new Observable((/**\n         * @param {?} observer\n         * @return {?}\n         */\n        (observer) => {\n            // The first step to make a request is to generate the callback name, and replace the\n            // callback placeholder in the URL with the name. Care has to be taken here to ensure\n            // a trailing &, if matched, gets inserted back into the URL in the correct place.\n            /** @type {?} */\n            const callback = this.nextCallback();\n            /** @type {?} */\n            const url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, `=${callback}$1`);\n            // Construct the <script> tag and point it at the URL.\n            /** @type {?} */\n            const node = this.document.createElement('script');\n            node.src = url;\n            // A JSONP request requires waiting for multiple callbacks. These variables\n            // are closed over and track state across those callbacks.\n            // The response object, if one has been received, or null otherwise.\n            /** @type {?} */\n            let body = null;\n            // Whether the response callback has been called.\n            /** @type {?} */\n            let finished = false;\n            // Whether the request has been cancelled (and thus any other callbacks)\n            // should be ignored.\n            /** @type {?} */\n            let cancelled = false;\n            // Set the response callback in this.callbackMap (which will be the window\n            // object in the browser. The script being loaded via the <script> tag will\n            // eventually call this callback.\n            this.callbackMap[callback] = (/**\n             * @param {?=} data\n             * @return {?}\n             */\n            (data) => {\n                // Data has been received from the JSONP script. Firstly, delete this callback.\n                delete this.callbackMap[callback];\n                // Next, make sure the request wasn't cancelled in the meantime.\n                if (cancelled) {\n                    return;\n                }\n                // Set state to indicate data was received.\n                body = data;\n                finished = true;\n            });\n            // cleanup() is a utility closure that removes the <script> from the page and\n            // the response callback from the window. This logic is used in both the\n            // success, error, and cancellation paths, so it's extracted out for convenience.\n            /** @type {?} */\n            const cleanup = (/**\n             * @return {?}\n             */\n            () => {\n                // Remove the <script> tag if it's still on the page.\n                if (node.parentNode) {\n                    node.parentNode.removeChild(node);\n                }\n                // Remove the response callback from the callbackMap (window object in the\n                // browser).\n                delete this.callbackMap[callback];\n            });\n            // onLoad() is the success callback which runs after the response callback\n            // if the JSONP script loads successfully. The event itself is unimportant.\n            // If something went wrong, onLoad() may run without the response callback\n            // having been invoked.\n            /** @type {?} */\n            const onLoad = (/**\n             * @param {?} event\n             * @return {?}\n             */\n            (event) => {\n                // Do nothing if the request has been cancelled.\n                if (cancelled) {\n                    return;\n                }\n                // Cleanup the page.\n                cleanup();\n                // Check whether the response callback has run.\n                if (!finished) {\n                    // It hasn't, something went wrong with the request. Return an error via\n                    // the Observable error path. All JSONP errors have status 0.\n                    observer.error(new HttpErrorResponse({\n                        url,\n                        status: 0,\n                        statusText: 'JSONP Error',\n                        error: new Error(JSONP_ERR_NO_CALLBACK),\n                    }));\n                    return;\n                }\n                // Success. body either contains the response body or null if none was\n                // returned.\n                observer.next(new HttpResponse({\n                    body,\n                    status: 200,\n                    statusText: 'OK', url,\n                }));\n                // Complete the stream, the response is over.\n                observer.complete();\n            });\n            // onError() is the error callback, which runs if the script returned generates\n            // a Javascript error. It emits the error via the Observable error channel as\n            // a HttpErrorResponse.\n            /** @type {?} */\n            const onError = (/**\n             * @param {?} error\n             * @return {?}\n             */\n            (error) => {\n                // If the request was already cancelled, no need to emit anything.\n                if (cancelled) {\n                    return;\n                }\n                cleanup();\n                // Wrap the error in a HttpErrorResponse.\n                observer.error(new HttpErrorResponse({\n                    error,\n                    status: 0,\n                    statusText: 'JSONP Error', url,\n                }));\n            });\n            // Subscribe to both the success (load) and error events on the <script> tag,\n            // and add it to the page.\n            node.addEventListener('load', onLoad);\n            node.addEventListener('error', onError);\n            this.document.body.appendChild(node);\n            // The request has now been successfully sent.\n            observer.next({ type: HttpEventType.Sent });\n            // Cancellation handler.\n            return (/**\n             * @return {?}\n             */\n            () => {\n                // Track the cancellation so event listeners won't do anything even if already scheduled.\n                cancelled = true;\n                // Remove the event listeners so they won't run if the events later fire.\n                node.removeEventListener('load', onLoad);\n                node.removeEventListener('error', onError);\n                // And finally, clean up the page.\n                cleanup();\n            });\n        }));\n    }\n}\nJsonpClientBackend.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nJsonpClientBackend.ctorParameters = () => [\n    { type: JsonpCallbackContext },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    JsonpClientBackend.prototype.callbackMap;\n    /**\n     * @type {?}\n     * @private\n     */\n    JsonpClientBackend.prototype.document;\n}\n/**\n * Identifies requests with the method JSONP and\n * shifts them to the `JsonpClientBackend`.\n *\n * @see `HttpInterceptor`\n *\n * \\@publicApi\n */\nclass JsonpInterceptor {\n    /**\n     * @param {?} jsonp\n     */\n    constructor(jsonp) {\n        this.jsonp = jsonp;\n    }\n    /**\n     * Identifies and handles a given JSONP request.\n     * @param {?} req The outgoing request object to handle.\n     * @param {?} next The next interceptor in the chain, or the backend\n     * if no interceptors remain in the chain.\n     * @return {?} An observable of the event stream.\n     */\n    intercept(req, next) {\n        if (req.method === 'JSONP') {\n            return this.jsonp.handle((/** @type {?} */ (req)));\n        }\n        // Fall through for normal HTTP requests.\n        return next.handle(req);\n    }\n}\nJsonpInterceptor.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nJsonpInterceptor.ctorParameters = () => [\n    { type: JsonpClientBackend }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    JsonpInterceptor.prototype.jsonp;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Determine an appropriate URL for the response, by checking either\n * XMLHttpRequest.responseURL or the X-Request-URL header.\n * @param {?} xhr\n * @return {?}\n */\nfunction getResponseUrl(xhr) {\n    if ('responseURL' in xhr && xhr.responseURL) {\n        return xhr.responseURL;\n    }\n    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n        return xhr.getResponseHeader('X-Request-URL');\n    }\n    return null;\n}\n/**\n * A wrapper around the `XMLHttpRequest` constructor.\n *\n * \\@publicApi\n * @abstract\n */\nclass XhrFactory {\n}\nif (false) {\n    /**\n     * @abstract\n     * @return {?}\n     */\n    XhrFactory.prototype.build = function () { };\n}\n/**\n * A factory for `HttpXhrBackend` that uses the `XMLHttpRequest` browser API.\n *\n */\nclass BrowserXhr {\n    constructor() { }\n    /**\n     * @return {?}\n     */\n    build() { return (/** @type {?} */ ((new XMLHttpRequest()))); }\n}\nBrowserXhr.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nBrowserXhr.ctorParameters = () => [];\n/**\n * Tracks a response from the server that does not yet have a body.\n * @record\n */\nfunction PartialResponse() { }\nif (false) {\n    /** @type {?} */\n    PartialResponse.prototype.headers;\n    /** @type {?} */\n    PartialResponse.prototype.status;\n    /** @type {?} */\n    PartialResponse.prototype.statusText;\n    /** @type {?} */\n    PartialResponse.prototype.url;\n}\n/**\n * Uses `XMLHttpRequest` to send requests to a backend server.\n * @see `HttpHandler`\n * @see `JsonpClientBackend`\n *\n * \\@publicApi\n */\nclass HttpXhrBackend {\n    /**\n     * @param {?} xhrFactory\n     */\n    constructor(xhrFactory) {\n        this.xhrFactory = xhrFactory;\n    }\n    /**\n     * Processes a request and returns a stream of response events.\n     * @param {?} req The request object.\n     * @return {?} An observable of the response events.\n     */\n    handle(req) {\n        // Quick check to give a better error message when a user attempts to use\n        // HttpClient.jsonp() without installing the JsonpClientModule\n        if (req.method === 'JSONP') {\n            throw new Error(`Attempted to construct Jsonp request without JsonpClientModule installed.`);\n        }\n        // Everything happens on Observable subscription.\n        return new Observable((/**\n         * @param {?} observer\n         * @return {?}\n         */\n        (observer) => {\n            // Start by setting up the XHR object with request method, URL, and withCredentials flag.\n            /** @type {?} */\n            const xhr = this.xhrFactory.build();\n            xhr.open(req.method, req.urlWithParams);\n            if (!!req.withCredentials) {\n                xhr.withCredentials = true;\n            }\n            // Add all the requested headers.\n            req.headers.forEach((/**\n             * @param {?} name\n             * @param {?} values\n             * @return {?}\n             */\n            (name, values) => xhr.setRequestHeader(name, values.join(','))));\n            // Add an Accept header if one isn't present already.\n            if (!req.headers.has('Accept')) {\n                xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');\n            }\n            // Auto-detect the Content-Type header if one isn't present already.\n            if (!req.headers.has('Content-Type')) {\n                /** @type {?} */\n                const detectedType = req.detectContentTypeHeader();\n                // Sometimes Content-Type detection fails.\n                if (detectedType !== null) {\n                    xhr.setRequestHeader('Content-Type', detectedType);\n                }\n            }\n            // Set the responseType if one was requested.\n            if (req.responseType) {\n                /** @type {?} */\n                const responseType = req.responseType.toLowerCase();\n                // JSON responses need to be processed as text. This is because if the server\n                // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\n                // xhr.response will be null, and xhr.responseText cannot be accessed to\n                // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\n                // is parsed by first requesting text and then applying JSON.parse.\n                xhr.responseType = (/** @type {?} */ (((responseType !== 'json') ? responseType : 'text')));\n            }\n            // Serialize the request body if one is present. If not, this will be set to null.\n            /** @type {?} */\n            const reqBody = req.serializeBody();\n            // If progress events are enabled, response headers will be delivered\n            // in two events - the HttpHeaderResponse event and the full HttpResponse\n            // event. However, since response headers don't change in between these\n            // two events, it doesn't make sense to parse them twice. So headerResponse\n            // caches the data extracted from the response whenever it's first parsed,\n            // to ensure parsing isn't duplicated.\n            /** @type {?} */\n            let headerResponse = null;\n            // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\n            // state, and memoizes it into headerResponse.\n            /** @type {?} */\n            const partialFromXhr = (/**\n             * @return {?}\n             */\n            () => {\n                if (headerResponse !== null) {\n                    return headerResponse;\n                }\n                // Read status and normalize an IE9 bug (http://bugs.jquery.com/ticket/1450).\n                /** @type {?} */\n                const status = xhr.status === 1223 ? 204 : xhr.status;\n                /** @type {?} */\n                const statusText = xhr.statusText || 'OK';\n                // Parse headers from XMLHttpRequest - this step is lazy.\n                /** @type {?} */\n                const headers = new HttpHeaders(xhr.getAllResponseHeaders());\n                // Read the response URL from the XMLHttpResponse instance and fall back on the\n                // request URL.\n                /** @type {?} */\n                const url = getResponseUrl(xhr) || req.url;\n                // Construct the HttpHeaderResponse and memoize it.\n                headerResponse = new HttpHeaderResponse({ headers, status, statusText, url });\n                return headerResponse;\n            });\n            // Next, a few closures are defined for the various events which XMLHttpRequest can\n            // emit. This allows them to be unregistered as event listeners later.\n            // First up is the load event, which represents a response being fully available.\n            /** @type {?} */\n            const onLoad = (/**\n             * @return {?}\n             */\n            () => {\n                // Read response state from the memoized partial data.\n                let { headers, status, statusText, url } = partialFromXhr();\n                // The body will be read out if present.\n                /** @type {?} */\n                let body = null;\n                if (status !== 204) {\n                    // Use XMLHttpRequest.response if set, responseText otherwise.\n                    body = (typeof xhr.response === 'undefined') ? xhr.responseText : xhr.response;\n                }\n                // Normalize another potential bug (this one comes from CORS).\n                if (status === 0) {\n                    status = !!body ? 200 : 0;\n                }\n                // ok determines whether the response will be transmitted on the event or\n                // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n                // but a successful status code can still result in an error if the user\n                // asked for JSON data and the body cannot be parsed as such.\n                /** @type {?} */\n                let ok = status >= 200 && status < 300;\n                // Check whether the body needs to be parsed as JSON (in many cases the browser\n                // will have done that already).\n                if (req.responseType === 'json' && typeof body === 'string') {\n                    // Save the original body, before attempting XSSI prefix stripping.\n                    /** @type {?} */\n                    const originalBody = body;\n                    body = body.replace(XSSI_PREFIX, '');\n                    try {\n                        // Attempt the parse. If it fails, a parse error should be delivered to the user.\n                        body = body !== '' ? JSON.parse(body) : null;\n                    }\n                    catch (error) {\n                        // Since the JSON.parse failed, it's reasonable to assume this might not have been a\n                        // JSON response. Restore the original body (including any XSSI prefix) to deliver\n                        // a better error response.\n                        body = originalBody;\n                        // If this was an error request to begin with, leave it as a string, it probably\n                        // just isn't JSON. Otherwise, deliver the parsing error to the user.\n                        if (ok) {\n                            // Even though the response status was 2xx, this is still an error.\n                            ok = false;\n                            // The parse error contains the text of the body that failed to parse.\n                            body = (/** @type {?} */ ({ error, text: body }));\n                        }\n                    }\n                }\n                if (ok) {\n                    // A successful response is delivered on the event stream.\n                    observer.next(new HttpResponse({\n                        body,\n                        headers,\n                        status,\n                        statusText,\n                        url: url || undefined,\n                    }));\n                    // The full body has been received and delivered, no further events\n                    // are possible. This request is complete.\n                    observer.complete();\n                }\n                else {\n                    // An unsuccessful request is delivered on the error channel.\n                    observer.error(new HttpErrorResponse({\n                        // The error in this case is the response body (error from the server).\n                        error: body,\n                        headers,\n                        status,\n                        statusText,\n                        url: url || undefined,\n                    }));\n                }\n            });\n            // The onError callback is called when something goes wrong at the network level.\n            // Connection timeout, DNS error, offline, etc. These are actual errors, and are\n            // transmitted on the error channel.\n            /** @type {?} */\n            const onError = (/**\n             * @param {?} error\n             * @return {?}\n             */\n            (error) => {\n                const { url } = partialFromXhr();\n                /** @type {?} */\n                const res = new HttpErrorResponse({\n                    error,\n                    status: xhr.status || 0,\n                    statusText: xhr.statusText || 'Unknown Error',\n                    url: url || undefined,\n                });\n                observer.error(res);\n            });\n            // The sentHeaders flag tracks whether the HttpResponseHeaders event\n            // has been sent on the stream. This is necessary to track if progress\n            // is enabled since the event will be sent on only the first download\n            // progerss event.\n            /** @type {?} */\n            let sentHeaders = false;\n            // The download progress event handler, which is only registered if\n            // progress events are enabled.\n            /** @type {?} */\n            const onDownProgress = (/**\n             * @param {?} event\n             * @return {?}\n             */\n            (event) => {\n                // Send the HttpResponseHeaders event if it hasn't been sent already.\n                if (!sentHeaders) {\n                    observer.next(partialFromXhr());\n                    sentHeaders = true;\n                }\n                // Start building the download progress event to deliver on the response\n                // event stream.\n                /** @type {?} */\n                let progressEvent = {\n                    type: HttpEventType.DownloadProgress,\n                    loaded: event.loaded,\n                };\n                // Set the total number of bytes in the event if it's available.\n                if (event.lengthComputable) {\n                    progressEvent.total = event.total;\n                }\n                // If the request was for text content and a partial response is\n                // available on XMLHttpRequest, include it in the progress event\n                // to allow for streaming reads.\n                if (req.responseType === 'text' && !!xhr.responseText) {\n                    progressEvent.partialText = xhr.responseText;\n                }\n                // Finally, fire the event.\n                observer.next(progressEvent);\n            });\n            // The upload progress event handler, which is only registered if\n            // progress events are enabled.\n            /** @type {?} */\n            const onUpProgress = (/**\n             * @param {?} event\n             * @return {?}\n             */\n            (event) => {\n                // Upload progress events are simpler. Begin building the progress\n                // event.\n                /** @type {?} */\n                let progress = {\n                    type: HttpEventType.UploadProgress,\n                    loaded: event.loaded,\n                };\n                // If the total number of bytes being uploaded is available, include\n                // it.\n                if (event.lengthComputable) {\n                    progress.total = event.total;\n                }\n                // Send the event.\n                observer.next(progress);\n            });\n            // By default, register for load and error events.\n            xhr.addEventListener('load', onLoad);\n            xhr.addEventListener('error', onError);\n            // Progress events are only enabled if requested.\n            if (req.reportProgress) {\n                // Download progress is always enabled if requested.\n                xhr.addEventListener('progress', onDownProgress);\n                // Upload progress depends on whether there is a body to upload.\n                if (reqBody !== null && xhr.upload) {\n                    xhr.upload.addEventListener('progress', onUpProgress);\n                }\n            }\n            // Fire the request, and notify the event stream that it was fired.\n            xhr.send((/** @type {?} */ (reqBody)));\n            observer.next({ type: HttpEventType.Sent });\n            // This is the return from the Observable function, which is the\n            // request cancellation handler.\n            return (/**\n             * @return {?}\n             */\n            () => {\n                // On a cancellation, remove all registered event listeners.\n                xhr.removeEventListener('error', onError);\n                xhr.removeEventListener('load', onLoad);\n                if (req.reportProgress) {\n                    xhr.removeEventListener('progress', onDownProgress);\n                    if (reqBody !== null && xhr.upload) {\n                        xhr.upload.removeEventListener('progress', onUpProgress);\n                    }\n                }\n                // Finally, abort the in-flight request.\n                xhr.abort();\n            });\n        }));\n    }\n}\nHttpXhrBackend.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nHttpXhrBackend.ctorParameters = () => [\n    { type: XhrFactory }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpXhrBackend.prototype.xhrFactory;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst XSRF_COOKIE_NAME = new InjectionToken('XSRF_COOKIE_NAME');\n/** @type {?} */\nconst XSRF_HEADER_NAME = new InjectionToken('XSRF_HEADER_NAME');\n/**\n * Retrieves the current XSRF token to use with the next outgoing request.\n *\n * \\@publicApi\n * @abstract\n */\nclass HttpXsrfTokenExtractor {\n}\nif (false) {\n    /**\n     * Get the XSRF token to use with an outgoing request.\n     *\n     * Will be called for every request, so the token may change between requests.\n     * @abstract\n     * @return {?}\n     */\n    HttpXsrfTokenExtractor.prototype.getToken = function () { };\n}\n/**\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\n */\nclass HttpXsrfCookieExtractor {\n    /**\n     * @param {?} doc\n     * @param {?} platform\n     * @param {?} cookieName\n     */\n    constructor(doc, platform, cookieName) {\n        this.doc = doc;\n        this.platform = platform;\n        this.cookieName = cookieName;\n        this.lastCookieString = '';\n        this.lastToken = null;\n        /**\n         * \\@internal for testing\n         */\n        this.parseCount = 0;\n    }\n    /**\n     * @return {?}\n     */\n    getToken() {\n        if (this.platform === 'server') {\n            return null;\n        }\n        /** @type {?} */\n        const cookieString = this.doc.cookie || '';\n        if (cookieString !== this.lastCookieString) {\n            this.parseCount++;\n            this.lastToken = ɵparseCookieValue(cookieString, this.cookieName);\n            this.lastCookieString = cookieString;\n        }\n        return this.lastToken;\n    }\n}\nHttpXsrfCookieExtractor.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nHttpXsrfCookieExtractor.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: String, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },\n    { type: String, decorators: [{ type: Inject, args: [XSRF_COOKIE_NAME,] }] }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpXsrfCookieExtractor.prototype.lastCookieString;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpXsrfCookieExtractor.prototype.lastToken;\n    /**\n     * \\@internal for testing\n     * @type {?}\n     */\n    HttpXsrfCookieExtractor.prototype.parseCount;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpXsrfCookieExtractor.prototype.doc;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpXsrfCookieExtractor.prototype.platform;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpXsrfCookieExtractor.prototype.cookieName;\n}\n/**\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\n */\nclass HttpXsrfInterceptor {\n    /**\n     * @param {?} tokenService\n     * @param {?} headerName\n     */\n    constructor(tokenService, headerName) {\n        this.tokenService = tokenService;\n        this.headerName = headerName;\n    }\n    /**\n     * @param {?} req\n     * @param {?} next\n     * @return {?}\n     */\n    intercept(req, next) {\n        /** @type {?} */\n        const lcUrl = req.url.toLowerCase();\n        // Skip both non-mutating requests and absolute URLs.\n        // Non-mutating requests don't require a token, and absolute URLs require special handling\n        // anyway as the cookie set\n        // on our origin is not the same as the token expected by another origin.\n        if (req.method === 'GET' || req.method === 'HEAD' || lcUrl.startsWith('http://') ||\n            lcUrl.startsWith('https://')) {\n            return next.handle(req);\n        }\n        /** @type {?} */\n        const token = this.tokenService.getToken();\n        // Be careful not to overwrite an existing header of the same name.\n        if (token !== null && !req.headers.has(this.headerName)) {\n            req = req.clone({ headers: req.headers.set(this.headerName, token) });\n        }\n        return next.handle(req);\n    }\n}\nHttpXsrfInterceptor.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nHttpXsrfInterceptor.ctorParameters = () => [\n    { type: HttpXsrfTokenExtractor },\n    { type: String, decorators: [{ type: Inject, args: [XSRF_HEADER_NAME,] }] }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpXsrfInterceptor.prototype.tokenService;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpXsrfInterceptor.prototype.headerName;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * An injectable `HttpHandler` that applies multiple interceptors\n * to a request before passing it to the given `HttpBackend`.\n *\n * The interceptors are loaded lazily from the injector, to allow\n * interceptors to themselves inject classes depending indirectly\n * on `HttpInterceptingHandler` itself.\n * @see `HttpInterceptor`\n */\nclass HttpInterceptingHandler {\n    /**\n     * @param {?} backend\n     * @param {?} injector\n     */\n    constructor(backend, injector) {\n        this.backend = backend;\n        this.injector = injector;\n        this.chain = null;\n    }\n    /**\n     * @param {?} req\n     * @return {?}\n     */\n    handle(req) {\n        if (this.chain === null) {\n            /** @type {?} */\n            const interceptors = this.injector.get(HTTP_INTERCEPTORS, []);\n            this.chain = interceptors.reduceRight((/**\n             * @param {?} next\n             * @param {?} interceptor\n             * @return {?}\n             */\n            (next, interceptor) => new HttpInterceptorHandler(next, interceptor)), this.backend);\n        }\n        return this.chain.handle(req);\n    }\n}\nHttpInterceptingHandler.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nHttpInterceptingHandler.ctorParameters = () => [\n    { type: HttpBackend },\n    { type: Injector }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpInterceptingHandler.prototype.chain;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpInterceptingHandler.prototype.backend;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpInterceptingHandler.prototype.injector;\n}\n/**\n * Constructs an `HttpHandler` that applies interceptors\n * to a request before passing it to the given `HttpBackend`.\n *\n * Use as a factory function within `HttpClientModule`.\n *\n *\n * @param {?} backend\n * @param {?=} interceptors\n * @return {?}\n */\nfunction interceptingHandler(backend, interceptors = []) {\n    if (!interceptors) {\n        return backend;\n    }\n    return interceptors.reduceRight((/**\n     * @param {?} next\n     * @param {?} interceptor\n     * @return {?}\n     */\n    (next, interceptor) => new HttpInterceptorHandler(next, interceptor)), backend);\n}\n/**\n * Factory function that determines where to store JSONP callbacks.\n *\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\n *\n *\n * @return {?}\n */\nfunction jsonpCallbackContext() {\n    if (typeof window === 'object') {\n        return window;\n    }\n    return {};\n}\n/**\n * Configures XSRF protection support for outgoing requests.\n *\n * For a server that supports a cookie-based XSRF protection system,\n * use directly to configure XSRF protection with the correct\n * cookie and header names.\n *\n * If no names are supplied, the default cookie name is `XSRF-TOKEN`\n * and the default header name is `X-XSRF-TOKEN`.\n *\n * \\@publicApi\n */\nclass HttpClientXsrfModule {\n    /**\n     * Disable the default XSRF protection.\n     * @return {?}\n     */\n    static disable() {\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: [\n                { provide: HttpXsrfInterceptor, useClass: NoopInterceptor },\n            ],\n        };\n    }\n    /**\n     * Configure XSRF protection.\n     * @param {?=} options An object that can specify either or both\n     * cookie name or header name.\n     * - Cookie name default is `XSRF-TOKEN`.\n     * - Header name default is `X-XSRF-TOKEN`.\n     *\n     * @return {?}\n     */\n    static withOptions(options = {}) {\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: [\n                options.cookieName ? { provide: XSRF_COOKIE_NAME, useValue: options.cookieName } : [],\n                options.headerName ? { provide: XSRF_HEADER_NAME, useValue: options.headerName } : [],\n            ],\n        };\n    }\n}\nHttpClientXsrfModule.decorators = [\n    { type: NgModule, args: [{\n                providers: [\n                    HttpXsrfInterceptor,\n                    { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\n                    { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\n                    { provide: XSRF_COOKIE_NAME, useValue: 'XSRF-TOKEN' },\n                    { provide: XSRF_HEADER_NAME, useValue: 'X-XSRF-TOKEN' },\n                ],\n            },] }\n];\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for XSRF. Automatically imported by `HttpClientModule`.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * \\@publicApi\n */\nclass HttpClientModule {\n}\nHttpClientModule.decorators = [\n    { type: NgModule, args: [{\n                /**\n                 * Optional configuration for XSRF protection.\n                 */\n                imports: [\n                    HttpClientXsrfModule.withOptions({\n                        cookieName: 'XSRF-TOKEN',\n                        headerName: 'X-XSRF-TOKEN',\n                    }),\n                ],\n                /**\n                 * Configures the [dependency injector](guide/glossary#injector) where it is imported\n                 * with supporting services for HTTP communications.\n                 */\n                providers: [\n                    HttpClient,\n                    { provide: HttpHandler, useClass: HttpInterceptingHandler },\n                    HttpXhrBackend,\n                    { provide: HttpBackend, useExisting: HttpXhrBackend },\n                    BrowserXhr,\n                    { provide: XhrFactory, useExisting: BrowserXhr },\n                ],\n            },] }\n];\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for JSONP.\n * Without this module, Jsonp requests reach the backend\n * with method JSONP, where they are rejected.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * \\@publicApi\n */\nclass HttpClientJsonpModule {\n}\nHttpClientJsonpModule.decorators = [\n    { type: NgModule, args: [{\n                providers: [\n                    JsonpClientBackend,\n                    { provide: JsonpCallbackContext, useFactory: jsonpCallbackContext },\n                    { provide: HTTP_INTERCEPTORS, useClass: JsonpInterceptor, multi: true },\n                ],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NoopInterceptor as ɵangular_packages_common_http_http_a, JsonpCallbackContext as ɵangular_packages_common_http_http_b, jsonpCallbackContext as ɵangular_packages_common_http_http_c, BrowserXhr as ɵangular_packages_common_http_http_d, HttpXsrfCookieExtractor as ɵangular_packages_common_http_http_g, HttpXsrfInterceptor as ɵangular_packages_common_http_http_h, XSRF_COOKIE_NAME as ɵangular_packages_common_http_http_e, XSRF_HEADER_NAME as ɵangular_packages_common_http_http_f, HttpBackend, HttpHandler, HttpClient, HttpHeaders, HTTP_INTERCEPTORS, JsonpClientBackend, JsonpInterceptor, HttpClientJsonpModule, HttpClientModule, HttpClientXsrfModule, HttpInterceptingHandler as ɵHttpInterceptingHandler, HttpParams, HttpUrlEncodingCodec, HttpRequest, HttpErrorResponse, HttpEventType, HttpHeaderResponse, HttpResponse, HttpResponseBase, HttpXhrBackend, XhrFactory, HttpXsrfTokenExtractor };\n//# sourceMappingURL=http.js.map\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { ChangeDetectionStrategy, Component, ElementRef, ViewChild, ViewEncapsulation, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { MatRipple, mixinColor, mixinDisabled, mixinDisableRipple, MatCommonModule, MatRippleModule } from '@angular/material/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Default color palette for round buttons (mat-fab and mat-mini-fab)\n * @type {?}\n */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n * @type {?}\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n    'mat-button',\n    'mat-flat-button',\n    'mat-icon-button',\n    'mat-raised-button',\n    'mat-stroked-button',\n    'mat-mini-fab',\n    'mat-fab',\n];\n// Boilerplate for applying mixins to MatButton.\n/**\n * \\@docs-private\n */\nclass MatButtonBase {\n    /**\n     * @param {?} _elementRef\n     */\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\n/** @type {?} */\nconst _MatButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n/**\n * Material design button.\n */\nclass MatButton extends _MatButtonMixinBase {\n    /**\n     * @param {?} elementRef\n     * @param {?} _focusMonitor\n     * @param {?} _animationMode\n     */\n    constructor(elementRef, _focusMonitor, _animationMode) {\n        super(elementRef);\n        this._focusMonitor = _focusMonitor;\n        this._animationMode = _animationMode;\n        /**\n         * Whether the button is round.\n         */\n        this.isRoundButton = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n        /**\n         * Whether the button is icon button.\n         */\n        this.isIconButton = this._hasHostAttributes('mat-icon-button');\n        // For each of the variant selectors that is present in the button's host\n        // attributes, add the correct corresponding class.\n        for (const attr of BUTTON_HOST_ATTRIBUTES) {\n            if (this._hasHostAttributes(attr)) {\n                ((/** @type {?} */ (this._getHostElement()))).classList.add(attr);\n            }\n        }\n        // Add a class that applies to all buttons. This makes it easier to target if somebody\n        // wants to target all Material buttons. We do it here rather than `host` to ensure that\n        // the class is applied to derived classes.\n        elementRef.nativeElement.classList.add('mat-button-base');\n        this._focusMonitor.monitor(this._elementRef, true);\n        if (this.isRoundButton) {\n            this.color = DEFAULT_ROUND_BUTTON_COLOR;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n    /**\n     * Focuses the button.\n     * @param {?=} origin\n     * @param {?=} options\n     * @return {?}\n     */\n    focus(origin = 'program', options) {\n        this._focusMonitor.focusVia(this._getHostElement(), origin, options);\n    }\n    /**\n     * @return {?}\n     */\n    _getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n    /**\n     * @return {?}\n     */\n    _isRippleDisabled() {\n        return this.disableRipple || this.disabled;\n    }\n    /**\n     * Gets whether the button has one of the given attributes.\n     * @param {...?} attributes\n     * @return {?}\n     */\n    _hasHostAttributes(...attributes) {\n        return attributes.some((/**\n         * @param {?} attribute\n         * @return {?}\n         */\n        attribute => this._getHostElement().hasAttribute(attribute)));\n    }\n}\nMatButton.decorators = [\n    { type: Component, args: [{selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n                exportAs: 'matButton',\n                host: {\n                    '[attr.disabled]': 'disabled || null',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                },\n                template: \"<span class=\\\"mat-button-wrapper\\\"><ng-content></ng-content></span><div matRipple class=\\\"mat-button-ripple\\\" [class.mat-button-ripple-round]=\\\"isRoundButton || isIconButton\\\" [matRippleDisabled]=\\\"_isRippleDisabled()\\\" [matRippleCentered]=\\\"isIconButton\\\" [matRippleTrigger]=\\\"_getHostElement()\\\"></div><div class=\\\"mat-button-focus-overlay\\\"></div>\",\n                styles: [\".mat-button .mat-button-focus-overlay,.mat-icon-button .mat-button-focus-overlay{opacity:0}.mat-button:hover .mat-button-focus-overlay,.mat-stroked-button:hover .mat-button-focus-overlay{opacity:.04}@media (hover:none){.mat-button:hover .mat-button-focus-overlay,.mat-stroked-button:hover .mat-button-focus-overlay{opacity:0}}.mat-button,.mat-flat-button,.mat-icon-button,.mat-stroked-button{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:0;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible}.mat-button::-moz-focus-inner,.mat-flat-button::-moz-focus-inner,.mat-icon-button::-moz-focus-inner,.mat-stroked-button::-moz-focus-inner{border:0}.mat-button[disabled],.mat-flat-button[disabled],.mat-icon-button[disabled],.mat-stroked-button[disabled]{cursor:default}.mat-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-button.cdk-program-focused .mat-button-focus-overlay,.mat-flat-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-flat-button.cdk-program-focused .mat-button-focus-overlay,.mat-icon-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-icon-button.cdk-program-focused .mat-button-focus-overlay,.mat-stroked-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-stroked-button.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-button::-moz-focus-inner,.mat-flat-button::-moz-focus-inner,.mat-icon-button::-moz-focus-inner,.mat-stroked-button::-moz-focus-inner{border:0}.mat-raised-button{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:0;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0,0,0);transition:background .4s cubic-bezier(.25,.8,.25,1),box-shadow 280ms cubic-bezier(.4,0,.2,1)}.mat-raised-button::-moz-focus-inner{border:0}.mat-raised-button[disabled]{cursor:default}.mat-raised-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-raised-button.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-raised-button::-moz-focus-inner{border:0}._mat-animation-noopable.mat-raised-button{transition:none;animation:none}.mat-stroked-button{border:1px solid currentColor;padding:0 15px;line-height:34px}.mat-stroked-button .mat-button-focus-overlay,.mat-stroked-button .mat-button-ripple.mat-ripple{top:-1px;left:-1px;right:-1px;bottom:-1px}.mat-fab{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:0;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0,0,0);transition:background .4s cubic-bezier(.25,.8,.25,1),box-shadow 280ms cubic-bezier(.4,0,.2,1);min-width:0;border-radius:50%;width:56px;height:56px;padding:0;flex-shrink:0}.mat-fab::-moz-focus-inner{border:0}.mat-fab[disabled]{cursor:default}.mat-fab.cdk-keyboard-focused .mat-button-focus-overlay,.mat-fab.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-fab::-moz-focus-inner{border:0}._mat-animation-noopable.mat-fab{transition:none;animation:none}.mat-fab .mat-button-wrapper{padding:16px 0;display:inline-block;line-height:24px}.mat-mini-fab{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:0;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0,0,0);transition:background .4s cubic-bezier(.25,.8,.25,1),box-shadow 280ms cubic-bezier(.4,0,.2,1);min-width:0;border-radius:50%;width:40px;height:40px;padding:0;flex-shrink:0}.mat-mini-fab::-moz-focus-inner{border:0}.mat-mini-fab[disabled]{cursor:default}.mat-mini-fab.cdk-keyboard-focused .mat-button-focus-overlay,.mat-mini-fab.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-mini-fab::-moz-focus-inner{border:0}._mat-animation-noopable.mat-mini-fab{transition:none;animation:none}.mat-mini-fab .mat-button-wrapper{padding:8px 0;display:inline-block;line-height:24px}.mat-icon-button{padding:0;min-width:0;width:40px;height:40px;flex-shrink:0;line-height:40px;border-radius:50%}.mat-icon-button .mat-icon,.mat-icon-button i{line-height:24px}.mat-button-focus-overlay,.mat-button-ripple.mat-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit}.mat-button-ripple.mat-ripple:not(:empty){transform:translateZ(0)}.mat-button-focus-overlay{opacity:0;transition:opacity .2s cubic-bezier(.35,0,.25,1),background-color .2s cubic-bezier(.35,0,.25,1)}._mat-animation-noopable .mat-button-focus-overlay{transition:none}@media (-ms-high-contrast:active){.mat-button-focus-overlay{background-color:#fff}}@media (-ms-high-contrast:black-on-white){.mat-button-focus-overlay{background-color:#000}}.mat-button-ripple-round{border-radius:50%;z-index:1}.mat-button .mat-button-wrapper>*,.mat-fab .mat-button-wrapper>*,.mat-flat-button .mat-button-wrapper>*,.mat-icon-button .mat-button-wrapper>*,.mat-mini-fab .mat-button-wrapper>*,.mat-raised-button .mat-button-wrapper>*,.mat-stroked-button .mat-button-wrapper>*{vertical-align:middle}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button{display:block;font-size:inherit;width:2.5em;height:2.5em}@media (-ms-high-contrast:active){.mat-button,.mat-fab,.mat-flat-button,.mat-icon-button,.mat-mini-fab,.mat-raised-button{outline:solid 1px}}\"],\n                inputs: ['disabled', 'disableRipple', 'color'],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n            },] },\n];\n/** @nocollapse */\nMatButton.ctorParameters = () => [\n    { type: ElementRef },\n    { type: FocusMonitor },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nMatButton.propDecorators = {\n    ripple: [{ type: ViewChild, args: [MatRipple, { static: false },] }]\n};\n/**\n * Material design anchor button.\n */\nclass MatAnchor extends MatButton {\n    /**\n     * @param {?} focusMonitor\n     * @param {?} elementRef\n     * @param {?} animationMode\n     */\n    constructor(focusMonitor, elementRef, animationMode) {\n        super(elementRef, focusMonitor, animationMode);\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _haltDisabledEvents(event) {\n        // A disabled button shouldn't apply any actions\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopImmediatePropagation();\n        }\n    }\n}\nMatAnchor.decorators = [\n    { type: Component, args: [{selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n                exportAs: 'matButton, matAnchor',\n                host: {\n                    // Note that we ignore the user-specified tabindex when it's disabled for\n                    // consistency with the `mat-button` applied on native buttons where even\n                    // though they have an index, they're not tabbable.\n                    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n                    '[attr.disabled]': 'disabled || null',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '(click)': '_haltDisabledEvents($event)',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                },\n                inputs: ['disabled', 'disableRipple', 'color'],\n                template: \"<span class=\\\"mat-button-wrapper\\\"><ng-content></ng-content></span><div matRipple class=\\\"mat-button-ripple\\\" [class.mat-button-ripple-round]=\\\"isRoundButton || isIconButton\\\" [matRippleDisabled]=\\\"_isRippleDisabled()\\\" [matRippleCentered]=\\\"isIconButton\\\" [matRippleTrigger]=\\\"_getHostElement()\\\"></div><div class=\\\"mat-button-focus-overlay\\\"></div>\",\n                styles: [\".mat-button .mat-button-focus-overlay,.mat-icon-button .mat-button-focus-overlay{opacity:0}.mat-button:hover .mat-button-focus-overlay,.mat-stroked-button:hover .mat-button-focus-overlay{opacity:.04}@media (hover:none){.mat-button:hover .mat-button-focus-overlay,.mat-stroked-button:hover .mat-button-focus-overlay{opacity:0}}.mat-button,.mat-flat-button,.mat-icon-button,.mat-stroked-button{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:0;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible}.mat-button::-moz-focus-inner,.mat-flat-button::-moz-focus-inner,.mat-icon-button::-moz-focus-inner,.mat-stroked-button::-moz-focus-inner{border:0}.mat-button[disabled],.mat-flat-button[disabled],.mat-icon-button[disabled],.mat-stroked-button[disabled]{cursor:default}.mat-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-button.cdk-program-focused .mat-button-focus-overlay,.mat-flat-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-flat-button.cdk-program-focused .mat-button-focus-overlay,.mat-icon-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-icon-button.cdk-program-focused .mat-button-focus-overlay,.mat-stroked-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-stroked-button.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-button::-moz-focus-inner,.mat-flat-button::-moz-focus-inner,.mat-icon-button::-moz-focus-inner,.mat-stroked-button::-moz-focus-inner{border:0}.mat-raised-button{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:0;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0,0,0);transition:background .4s cubic-bezier(.25,.8,.25,1),box-shadow 280ms cubic-bezier(.4,0,.2,1)}.mat-raised-button::-moz-focus-inner{border:0}.mat-raised-button[disabled]{cursor:default}.mat-raised-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-raised-button.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-raised-button::-moz-focus-inner{border:0}._mat-animation-noopable.mat-raised-button{transition:none;animation:none}.mat-stroked-button{border:1px solid currentColor;padding:0 15px;line-height:34px}.mat-stroked-button .mat-button-focus-overlay,.mat-stroked-button .mat-button-ripple.mat-ripple{top:-1px;left:-1px;right:-1px;bottom:-1px}.mat-fab{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:0;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0,0,0);transition:background .4s cubic-bezier(.25,.8,.25,1),box-shadow 280ms cubic-bezier(.4,0,.2,1);min-width:0;border-radius:50%;width:56px;height:56px;padding:0;flex-shrink:0}.mat-fab::-moz-focus-inner{border:0}.mat-fab[disabled]{cursor:default}.mat-fab.cdk-keyboard-focused .mat-button-focus-overlay,.mat-fab.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-fab::-moz-focus-inner{border:0}._mat-animation-noopable.mat-fab{transition:none;animation:none}.mat-fab .mat-button-wrapper{padding:16px 0;display:inline-block;line-height:24px}.mat-mini-fab{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:0;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0,0,0);transition:background .4s cubic-bezier(.25,.8,.25,1),box-shadow 280ms cubic-bezier(.4,0,.2,1);min-width:0;border-radius:50%;width:40px;height:40px;padding:0;flex-shrink:0}.mat-mini-fab::-moz-focus-inner{border:0}.mat-mini-fab[disabled]{cursor:default}.mat-mini-fab.cdk-keyboard-focused .mat-button-focus-overlay,.mat-mini-fab.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-mini-fab::-moz-focus-inner{border:0}._mat-animation-noopable.mat-mini-fab{transition:none;animation:none}.mat-mini-fab .mat-button-wrapper{padding:8px 0;display:inline-block;line-height:24px}.mat-icon-button{padding:0;min-width:0;width:40px;height:40px;flex-shrink:0;line-height:40px;border-radius:50%}.mat-icon-button .mat-icon,.mat-icon-button i{line-height:24px}.mat-button-focus-overlay,.mat-button-ripple.mat-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit}.mat-button-ripple.mat-ripple:not(:empty){transform:translateZ(0)}.mat-button-focus-overlay{opacity:0;transition:opacity .2s cubic-bezier(.35,0,.25,1),background-color .2s cubic-bezier(.35,0,.25,1)}._mat-animation-noopable .mat-button-focus-overlay{transition:none}@media (-ms-high-contrast:active){.mat-button-focus-overlay{background-color:#fff}}@media (-ms-high-contrast:black-on-white){.mat-button-focus-overlay{background-color:#000}}.mat-button-ripple-round{border-radius:50%;z-index:1}.mat-button .mat-button-wrapper>*,.mat-fab .mat-button-wrapper>*,.mat-flat-button .mat-button-wrapper>*,.mat-icon-button .mat-button-wrapper>*,.mat-mini-fab .mat-button-wrapper>*,.mat-raised-button .mat-button-wrapper>*,.mat-stroked-button .mat-button-wrapper>*{vertical-align:middle}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button{display:block;font-size:inherit;width:2.5em;height:2.5em}@media (-ms-high-contrast:active){.mat-button,.mat-fab,.mat-flat-button,.mat-icon-button,.mat-mini-fab,.mat-raised-button{outline:solid 1px}}\"],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n            },] },\n];\n/** @nocollapse */\nMatAnchor.ctorParameters = () => [\n    { type: FocusMonitor },\n    { type: ElementRef },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nMatAnchor.propDecorators = {\n    tabIndex: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatButtonModule {\n}\nMatButtonModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [\n                    CommonModule,\n                    MatRippleModule,\n                    MatCommonModule,\n                ],\n                exports: [\n                    MatButton,\n                    MatAnchor,\n                    MatCommonModule,\n                ],\n                declarations: [\n                    MatButton,\n                    MatAnchor,\n                ],\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatButtonModule, MatButton, MatAnchor };\n//# sourceMappingURL=button.js.map\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { DOCUMENT } from '@angular/common';\nimport { HttpClient } from '@angular/common/http';\nimport { ErrorHandler, Inject, Injectable, Optional, SecurityContext, SkipSelf, NgModule, Attribute, ChangeDetectionStrategy, Component, ElementRef, inject, InjectionToken, Input, ViewEncapsulation, ɵɵdefineInjectable, ɵɵinject } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { forkJoin, of, throwError } from 'rxjs';\nimport { catchError, finalize, map, share, tap, take } from 'rxjs/operators';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * \\@docs-private\n * @param {?} iconName\n * @return {?}\n */\nfunction getMatIconNameNotFoundError(iconName) {\n    return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including \\@angular/common/http.\n * \\@docs-private\n * @return {?}\n */\nfunction getMatIconNoHttpProviderError() {\n    return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n        'Please include the HttpClientModule from @angular/common/http in your ' +\n        'app imports.');\n}\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * \\@docs-private\n * @param {?} url URL that was attempted to be sanitized.\n * @return {?}\n */\nfunction getMatIconFailedToSanitizeUrlError(url) {\n    return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n        `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * \\@docs-private\n * @param {?} literal HTML that was attempted to be sanitized.\n * @return {?}\n */\nfunction getMatIconFailedToSanitizeLiteralError(literal) {\n    return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n        `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * \\@docs-private\n */\nclass SvgIconConfig {\n    /**\n     * @param {?} data\n     * @param {?=} options\n     */\n    constructor(data, options) {\n        this.options = options;\n        // Note that we can't use `instanceof SVGElement` here,\n        // because it'll break during server-side rendering.\n        if (!!((/** @type {?} */ (data))).nodeName) {\n            this.svgElement = (/** @type {?} */ (data));\n        }\n        else {\n            this.url = (/** @type {?} */ (data));\n        }\n    }\n}\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\nclass MatIconRegistry {\n    /**\n     * @param {?} _httpClient\n     * @param {?} _sanitizer\n     * @param {?} document\n     * @param {?=} _errorHandler\n     */\n    constructor(_httpClient, _sanitizer, document, _errorHandler) {\n        this._httpClient = _httpClient;\n        this._sanitizer = _sanitizer;\n        this._errorHandler = _errorHandler;\n        /**\n         * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n         */\n        this._svgIconConfigs = new Map();\n        /**\n         * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n         * Multiple icon sets can be registered under the same namespace.\n         */\n        this._iconSetConfigs = new Map();\n        /**\n         * Cache for icons loaded by direct URLs.\n         */\n        this._cachedIconsByUrl = new Map();\n        /**\n         * In-progress icon fetches. Used to coalesce multiple requests to the same URL.\n         */\n        this._inProgressUrlFetches = new Map();\n        /**\n         * Map from font identifiers to their CSS class names. Used for icon fonts.\n         */\n        this._fontCssClassesByAlias = new Map();\n        /**\n         * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n         * The default 'material-icons' value assumes that the material icon font has been loaded as\n         * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n         */\n        this._defaultFontSetClass = 'material-icons';\n        this._document = document;\n    }\n    /**\n     * Registers an icon by URL in the default namespace.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} iconName Name under which the icon should be registered.\n     * @param {?} url\n     * @param {?=} options\n     * @return {THIS}\n     */\n    addSvgIcon(iconName, url, options) {\n        return (/** @type {?} */ (this)).addSvgIconInNamespace('', iconName, url, options);\n    }\n    /**\n     * Registers an icon using an HTML string in the default namespace.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} iconName Name under which the icon should be registered.\n     * @param {?} literal SVG source of the icon.\n     * @param {?=} options\n     * @return {THIS}\n     */\n    addSvgIconLiteral(iconName, literal, options) {\n        return (/** @type {?} */ (this)).addSvgIconLiteralInNamespace('', iconName, literal, options);\n    }\n    /**\n     * Registers an icon by URL in the specified namespace.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} namespace Namespace in which the icon should be registered.\n     * @param {?} iconName Name under which the icon should be registered.\n     * @param {?} url\n     * @param {?=} options\n     * @return {THIS}\n     */\n    addSvgIconInNamespace(namespace, iconName, url, options) {\n        return (/** @type {?} */ (this))._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url, options));\n    }\n    /**\n     * Registers an icon using an HTML string in the specified namespace.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} namespace Namespace in which the icon should be registered.\n     * @param {?} iconName Name under which the icon should be registered.\n     * @param {?} literal SVG source of the icon.\n     * @param {?=} options\n     * @return {THIS}\n     */\n    addSvgIconLiteralInNamespace(namespace, iconName, literal, options) {\n        /** @type {?} */\n        const sanitizedLiteral = (/** @type {?} */ (this))._sanitizer.sanitize(SecurityContext.HTML, literal);\n        if (!sanitizedLiteral) {\n            throw getMatIconFailedToSanitizeLiteralError(literal);\n        }\n        /** @type {?} */\n        const svgElement = (/** @type {?} */ (this))._createSvgElementForSingleIcon(sanitizedLiteral, options);\n        return (/** @type {?} */ (this))._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement, options));\n    }\n    /**\n     * Registers an icon set by URL in the default namespace.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} url\n     * @param {?=} options\n     * @return {THIS}\n     */\n    addSvgIconSet(url, options) {\n        return (/** @type {?} */ (this)).addSvgIconSetInNamespace('', url, options);\n    }\n    /**\n     * Registers an icon set using an HTML string in the default namespace.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} literal SVG source of the icon set.\n     * @param {?=} options\n     * @return {THIS}\n     */\n    addSvgIconSetLiteral(literal, options) {\n        return (/** @type {?} */ (this)).addSvgIconSetLiteralInNamespace('', literal, options);\n    }\n    /**\n     * Registers an icon set by URL in the specified namespace.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} namespace Namespace in which to register the icon set.\n     * @param {?} url\n     * @param {?=} options\n     * @return {THIS}\n     */\n    addSvgIconSetInNamespace(namespace, url, options) {\n        return (/** @type {?} */ (this))._addSvgIconSetConfig(namespace, new SvgIconConfig(url, options));\n    }\n    /**\n     * Registers an icon set using an HTML string in the specified namespace.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} namespace Namespace in which to register the icon set.\n     * @param {?} literal SVG source of the icon set.\n     * @param {?=} options\n     * @return {THIS}\n     */\n    addSvgIconSetLiteralInNamespace(namespace, literal, options) {\n        /** @type {?} */\n        const sanitizedLiteral = (/** @type {?} */ (this))._sanitizer.sanitize(SecurityContext.HTML, literal);\n        if (!sanitizedLiteral) {\n            throw getMatIconFailedToSanitizeLiteralError(literal);\n        }\n        /** @type {?} */\n        const svgElement = (/** @type {?} */ (this))._svgElementFromString(sanitizedLiteral);\n        return (/** @type {?} */ (this))._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement, options));\n    }\n    /**\n     * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n     * component with the alias as the fontSet input will cause the class name to be applied\n     * to the `<mat-icon>` element.\n     *\n     * @template THIS\n     * @this {THIS}\n     * @param {?} alias Alias for the font.\n     * @param {?=} className Class name override to be used instead of the alias.\n     * @return {THIS}\n     */\n    registerFontClassAlias(alias, className = alias) {\n        (/** @type {?} */ (this))._fontCssClassesByAlias.set(alias, className);\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Returns the CSS class name associated with the alias by a previous call to\n     * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n     * @param {?} alias\n     * @return {?}\n     */\n    classNameForFontAlias(alias) {\n        return this._fontCssClassesByAlias.get(alias) || alias;\n    }\n    /**\n     * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     *\n     * @template THIS\n     * @this {THIS}\n     * @param {?} className\n     * @return {THIS}\n     */\n    setDefaultFontSetClass(className) {\n        (/** @type {?} */ (this))._defaultFontSetClass = className;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     * @return {?}\n     */\n    getDefaultFontSetClass() {\n        return this._defaultFontSetClass;\n    }\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n     * The response from the URL may be cached so this will not always cause an HTTP request, but\n     * the produced element will always be a new copy of the originally fetched icon. (That is,\n     * it will not contain any modifications made to elements previously returned).\n     *\n     * @param {?} safeUrl URL from which to fetch the SVG icon.\n     * @return {?}\n     */\n    getSvgIconFromUrl(safeUrl) {\n        /** @type {?} */\n        const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n        if (!url) {\n            throw getMatIconFailedToSanitizeUrlError(safeUrl);\n        }\n        /** @type {?} */\n        const cachedIcon = this._cachedIconsByUrl.get(url);\n        if (cachedIcon) {\n            return of(cloneSvg(cachedIcon));\n        }\n        return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(tap((/**\n         * @param {?} svg\n         * @return {?}\n         */\n        svg => this._cachedIconsByUrl.set((/** @type {?} */ (url)), svg))), map((/**\n         * @param {?} svg\n         * @return {?}\n         */\n        svg => cloneSvg(svg))));\n    }\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n     * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n     * if not, the Observable will throw an error.\n     *\n     * @param {?} name Name of the icon to be retrieved.\n     * @param {?=} namespace Namespace in which to look for the icon.\n     * @return {?}\n     */\n    getNamedSvgIcon(name, namespace = '') {\n        // Return (copy of) cached icon if possible.\n        /** @type {?} */\n        const key = iconKey(namespace, name);\n        /** @type {?} */\n        const config = this._svgIconConfigs.get(key);\n        if (config) {\n            return this._getSvgFromConfig(config);\n        }\n        // See if we have any icon sets registered for the namespace.\n        /** @type {?} */\n        const iconSetConfigs = this._iconSetConfigs.get(namespace);\n        if (iconSetConfigs) {\n            return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n        }\n        return throwError(getMatIconNameNotFoundError(key));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._svgIconConfigs.clear();\n        this._iconSetConfigs.clear();\n        this._cachedIconsByUrl.clear();\n    }\n    /**\n     * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n     * @private\n     * @param {?} config\n     * @return {?}\n     */\n    _getSvgFromConfig(config) {\n        if (config.svgElement) {\n            // We already have the SVG element for this icon, return a copy.\n            return of(cloneSvg(config.svgElement));\n        }\n        else {\n            // Fetch the icon from the config's URL, cache it, and return a copy.\n            return this._loadSvgIconFromConfig(config).pipe(tap((/**\n             * @param {?} svg\n             * @return {?}\n             */\n            svg => config.svgElement = svg)), map((/**\n             * @param {?} svg\n             * @return {?}\n             */\n            svg => cloneSvg(svg))));\n        }\n    }\n    /**\n     * Attempts to find an icon with the specified name in any of the SVG icon sets.\n     * First searches the available cached icons for a nested element with a matching name, and\n     * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n     * that have not been cached, and searches again after all fetches are completed.\n     * The returned Observable produces the SVG element if possible, and throws\n     * an error if no icon with the specified name can be found.\n     * @private\n     * @param {?} name\n     * @param {?} iconSetConfigs\n     * @return {?}\n     */\n    _getSvgFromIconSetConfigs(name, iconSetConfigs) {\n        // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n        // requested name.\n        /** @type {?} */\n        const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n        if (namedIcon) {\n            // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n            // time anyway, there's probably not much advantage compared to just always extracting\n            // it from the icon set.\n            return of(namedIcon);\n        }\n        // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n        // fetched, fetch them now and look for iconName in the results.\n        /** @type {?} */\n        const iconSetFetchRequests = iconSetConfigs\n            .filter((/**\n         * @param {?} iconSetConfig\n         * @return {?}\n         */\n        iconSetConfig => !iconSetConfig.svgElement))\n            .map((/**\n         * @param {?} iconSetConfig\n         * @return {?}\n         */\n        iconSetConfig => {\n            return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(catchError((/**\n             * @param {?} err\n             * @return {?}\n             */\n            (err) => {\n                /** @type {?} */\n                const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n                // Swallow errors fetching individual URLs so the\n                // combined Observable won't necessarily fail.\n                /** @type {?} */\n                const errorMessage = `Loading icon set URL: ${url} failed: ${err.message}`;\n                // @breaking-change 9.0.0 _errorHandler parameter to be made required\n                if (this._errorHandler) {\n                    this._errorHandler.handleError(new Error(errorMessage));\n                }\n                else {\n                    console.error(errorMessage);\n                }\n                return of(null);\n            })));\n        }));\n        // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n        // cached SVG element (unless the request failed), and we can check again for the icon.\n        return forkJoin(iconSetFetchRequests).pipe(map((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n            if (!foundIcon) {\n                throw getMatIconNameNotFoundError(name);\n            }\n            return foundIcon;\n        })));\n    }\n    /**\n     * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     * @private\n     * @param {?} iconName\n     * @param {?} iconSetConfigs\n     * @return {?}\n     */\n    _extractIconWithNameFromAnySet(iconName, iconSetConfigs) {\n        // Iterate backwards, so icon sets added later have precedence.\n        for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n            /** @type {?} */\n            const config = iconSetConfigs[i];\n            if (config.svgElement) {\n                /** @type {?} */\n                const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName, config.options);\n                if (foundIcon) {\n                    return foundIcon;\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n     * from it.\n     * @private\n     * @param {?} config\n     * @return {?}\n     */\n    _loadSvgIconFromConfig(config) {\n        return this._fetchUrl(config.url)\n            .pipe(map((/**\n         * @param {?} svgText\n         * @return {?}\n         */\n        svgText => this._createSvgElementForSingleIcon(svgText, config.options))));\n    }\n    /**\n     * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n     * from it.\n     * @private\n     * @param {?} config\n     * @return {?}\n     */\n    _loadSvgIconSetFromConfig(config) {\n        // If the SVG for this icon set has already been parsed, do nothing.\n        if (config.svgElement) {\n            return of(config.svgElement);\n        }\n        return this._fetchUrl(config.url).pipe(map((/**\n         * @param {?} svgText\n         * @return {?}\n         */\n        svgText => {\n            // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n            // only needs to occur if the cache is yet unset.\n            if (!config.svgElement) {\n                config.svgElement = this._svgElementFromString(svgText);\n            }\n            return config.svgElement;\n        })));\n    }\n    /**\n     * Creates a DOM element from the given SVG string, and adds default attributes.\n     * @private\n     * @param {?} responseText\n     * @param {?=} options\n     * @return {?}\n     */\n    _createSvgElementForSingleIcon(responseText, options) {\n        /** @type {?} */\n        const svg = this._svgElementFromString(responseText);\n        this._setSvgAttributes(svg, options);\n        return svg;\n    }\n    /**\n     * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     * @private\n     * @param {?} iconSet\n     * @param {?} iconName\n     * @param {?=} options\n     * @return {?}\n     */\n    _extractSvgIconFromSet(iconSet, iconName, options) {\n        // Use the `id=\"iconName\"` syntax in order to escape special\n        // characters in the ID (versus using the #iconName syntax).\n        /** @type {?} */\n        const iconSource = iconSet.querySelector(`[id=\"${iconName}\"]`);\n        if (!iconSource) {\n            return null;\n        }\n        // Clone the element and remove the ID to prevent multiple elements from being added\n        // to the page with the same ID.\n        /** @type {?} */\n        const iconElement = (/** @type {?} */ (iconSource.cloneNode(true)));\n        iconElement.removeAttribute('id');\n        // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n        // the content of a new <svg> node.\n        if (iconElement.nodeName.toLowerCase() === 'svg') {\n            return this._setSvgAttributes((/** @type {?} */ (iconElement)), options);\n        }\n        // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n        // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n        // tag is problematic on Firefox, because it needs to include the current page path.\n        if (iconElement.nodeName.toLowerCase() === 'symbol') {\n            return this._setSvgAttributes(this._toSvgElement(iconElement), options);\n        }\n        // createElement('SVG') doesn't work as expected; the DOM ends up with\n        // the correct nodes, but the SVG content doesn't render. Instead we\n        // have to create an empty SVG node using innerHTML and append its content.\n        // Elements created using DOMParser.parseFromString have the same problem.\n        // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n        /** @type {?} */\n        const svg = this._svgElementFromString('<svg></svg>');\n        // Clone the node so we don't remove it from the parent icon set element.\n        svg.appendChild(iconElement);\n        return this._setSvgAttributes(svg, options);\n    }\n    /**\n     * Creates a DOM element from the given SVG string.\n     * @private\n     * @param {?} str\n     * @return {?}\n     */\n    _svgElementFromString(str) {\n        /** @type {?} */\n        const div = this._document.createElement('DIV');\n        div.innerHTML = str;\n        /** @type {?} */\n        const svg = (/** @type {?} */ (div.querySelector('svg')));\n        if (!svg) {\n            throw Error('<svg> tag not found');\n        }\n        return svg;\n    }\n    /**\n     * Converts an element into an SVG node by cloning all of its children.\n     * @private\n     * @param {?} element\n     * @return {?}\n     */\n    _toSvgElement(element) {\n        /** @type {?} */\n        const svg = this._svgElementFromString('<svg></svg>');\n        /** @type {?} */\n        const attributes = element.attributes;\n        // Copy over all the attributes from the `symbol` to the new SVG, except the id.\n        for (let i = 0; i < attributes.length; i++) {\n            const { name, value } = attributes[i];\n            if (name !== 'id') {\n                svg.setAttribute(name, value);\n            }\n        }\n        for (let i = 0; i < element.childNodes.length; i++) {\n            if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n                svg.appendChild(element.childNodes[i].cloneNode(true));\n            }\n        }\n        return svg;\n    }\n    /**\n     * Sets the default attributes for an SVG element to be used as an icon.\n     * @private\n     * @param {?} svg\n     * @param {?=} options\n     * @return {?}\n     */\n    _setSvgAttributes(svg, options) {\n        svg.setAttribute('fit', '');\n        svg.setAttribute('height', '100%');\n        svg.setAttribute('width', '100%');\n        svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n        svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n        if (options && options.viewBox) {\n            svg.setAttribute('viewBox', options.viewBox);\n        }\n        return svg;\n    }\n    /**\n     * Returns an Observable which produces the string contents of the given URL. Results may be\n     * cached, so future calls with the same URL may not cause another HTTP request.\n     * @private\n     * @param {?} safeUrl\n     * @return {?}\n     */\n    _fetchUrl(safeUrl) {\n        if (!this._httpClient) {\n            throw getMatIconNoHttpProviderError();\n        }\n        if (safeUrl == null) {\n            throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n        }\n        /** @type {?} */\n        const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n        if (!url) {\n            throw getMatIconFailedToSanitizeUrlError(safeUrl);\n        }\n        // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n        // already a request in progress for that URL. It's necessary to call share() on the\n        // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n        /** @type {?} */\n        const inProgressFetch = this._inProgressUrlFetches.get(url);\n        if (inProgressFetch) {\n            return inProgressFetch;\n        }\n        // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n        // Observable. Figure out why and fix it.\n        /** @type {?} */\n        const req = this._httpClient.get(url, { responseType: 'text' }).pipe(finalize((/**\n         * @return {?}\n         */\n        () => this._inProgressUrlFetches.delete(url))), share());\n        this._inProgressUrlFetches.set(url, req);\n        return req;\n    }\n    /**\n     * Registers an icon config by name in the specified namespace.\n     * @private\n     * @template THIS\n     * @this {THIS}\n     * @param {?} namespace Namespace in which to register the icon config.\n     * @param {?} iconName Name under which to register the config.\n     * @param {?} config Config to be registered.\n     * @return {THIS}\n     */\n    _addSvgIconConfig(namespace, iconName, config) {\n        (/** @type {?} */ (this))._svgIconConfigs.set(iconKey(namespace, iconName), config);\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Registers an icon set config in the specified namespace.\n     * @private\n     * @template THIS\n     * @this {THIS}\n     * @param {?} namespace Namespace in which to register the icon config.\n     * @param {?} config Config to be registered.\n     * @return {THIS}\n     */\n    _addSvgIconSetConfig(namespace, config) {\n        /** @type {?} */\n        const configNamespace = (/** @type {?} */ (this))._iconSetConfigs.get(namespace);\n        if (configNamespace) {\n            configNamespace.push(config);\n        }\n        else {\n            (/** @type {?} */ (this))._iconSetConfigs.set(namespace, [config]);\n        }\n        return (/** @type {?} */ (this));\n    }\n}\nMatIconRegistry.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] },\n];\n/** @nocollapse */\nMatIconRegistry.ctorParameters = () => [\n    { type: HttpClient, decorators: [{ type: Optional }] },\n    { type: DomSanitizer },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: ErrorHandler, decorators: [{ type: Optional }] }\n];\n/** @nocollapse */ MatIconRegistry.ngInjectableDef = ɵɵdefineInjectable({ factory: function MatIconRegistry_Factory() { return new MatIconRegistry(ɵɵinject(HttpClient, 8), ɵɵinject(DomSanitizer), ɵɵinject(DOCUMENT, 8), ɵɵinject(ErrorHandler, 8)); }, token: MatIconRegistry, providedIn: \"root\" });\n/**\n * \\@docs-private\n * @param {?} parentRegistry\n * @param {?} httpClient\n * @param {?} sanitizer\n * @param {?=} document\n * @param {?=} errorHandler\n * @return {?}\n */\nfunction ICON_REGISTRY_PROVIDER_FACTORY(parentRegistry, httpClient, sanitizer, document, errorHandler) {\n    return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document, errorHandler);\n}\n/**\n * \\@docs-private\n * @type {?}\n */\nconst ICON_REGISTRY_PROVIDER = {\n    // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n    provide: MatIconRegistry,\n    deps: [\n        [new Optional(), new SkipSelf(), MatIconRegistry],\n        [new Optional(), HttpClient],\n        DomSanitizer,\n        [new Optional(), ErrorHandler],\n        [new Optional(), (/** @type {?} */ (DOCUMENT))],\n    ],\n    useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n/**\n * Clones an SVGElement while preserving type information.\n * @param {?} svg\n * @return {?}\n */\nfunction cloneSvg(svg) {\n    return (/** @type {?} */ (svg.cloneNode(true)));\n}\n/**\n * Returns the cache key to use for an icon namespace and name.\n * @param {?} namespace\n * @param {?} name\n * @return {?}\n */\nfunction iconKey(namespace, name) {\n    return namespace + ':' + name;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Boilerplate for applying mixins to MatIcon.\n/**\n * \\@docs-private\n */\nclass MatIconBase {\n    /**\n     * @param {?} _elementRef\n     */\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\n/** @type {?} */\nconst _MatIconMixinBase = mixinColor(MatIconBase);\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * \\@docs-private\n * @type {?}\n */\nconst MAT_ICON_LOCATION = new InjectionToken('mat-icon-location', {\n    providedIn: 'root',\n    factory: MAT_ICON_LOCATION_FACTORY\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction MAT_ICON_LOCATION_FACTORY() {\n    /** @type {?} */\n    const _document = inject(DOCUMENT);\n    /** @type {?} */\n    const _location = _document ? _document.location : null;\n    return {\n        // Note that this needs to be a function, rather than a property, because Angular\n        // will only resolve it once, but we want the current path on each call.\n        getPathname: (/**\n         * @return {?}\n         */\n        () => _location ? (_location.pathname + _location.search) : '')\n    };\n}\n/**\n * SVG attributes that accept a FuncIRI (e.g. `url(<something>)`).\n * @type {?}\n */\nconst funcIriAttributes = [\n    'clip-path',\n    'color-profile',\n    'src',\n    'cursor',\n    'fill',\n    'filter',\n    'marker',\n    'marker-start',\n    'marker-mid',\n    'marker-end',\n    'mask',\n    'stroke'\n];\nconst ɵ0 = /**\n * @param {?} attr\n * @return {?}\n */\nattr => `[${attr}]`;\n/**\n * Selector that can be used to find all elements that are using a `FuncIRI`.\n * @type {?}\n */\nconst funcIriAttributeSelector = funcIriAttributes.map((ɵ0)).join(', ');\n/**\n * Regex that can be used to extract the id out of a FuncIRI.\n * @type {?}\n */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\nclass MatIcon extends _MatIconMixinBase {\n    /**\n     * @param {?} elementRef\n     * @param {?} _iconRegistry\n     * @param {?} ariaHidden\n     * @param {?=} _location\n     * @param {?=} _errorHandler\n     */\n    constructor(elementRef, _iconRegistry, ariaHidden, _location, _errorHandler) {\n        super(elementRef);\n        this._iconRegistry = _iconRegistry;\n        this._location = _location;\n        this._errorHandler = _errorHandler;\n        this._inline = false;\n        // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n        // the right thing to do for the majority of icon use-cases.\n        if (!ariaHidden) {\n            elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n        }\n    }\n    /**\n     * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n     * the element the icon is contained in.\n     * @return {?}\n     */\n    get inline() {\n        return this._inline;\n    }\n    /**\n     * @param {?} inline\n     * @return {?}\n     */\n    set inline(inline) {\n        this._inline = coerceBooleanProperty(inline);\n    }\n    /**\n     * Font set that the icon is a part of.\n     * @return {?}\n     */\n    get fontSet() { return this._fontSet; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set fontSet(value) {\n        this._fontSet = this._cleanupFontValue(value);\n    }\n    /**\n     * Name of an icon within a font set.\n     * @return {?}\n     */\n    get fontIcon() { return this._fontIcon; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set fontIcon(value) {\n        this._fontIcon = this._cleanupFontValue(value);\n    }\n    /**\n     * Splits an svgIcon binding value into its icon set and icon name components.\n     * Returns a 2-element array of [(icon set), (icon name)].\n     * The separator for the two fields is ':'. If there is no separator, an empty\n     * string is returned for the icon set and the entire value is returned for\n     * the icon name. If the argument is falsy, returns an array of two empty strings.\n     * Throws an error if the name contains two or more ':' separators.\n     * Examples:\n     *   `'social:cake' -> ['social', 'cake']\n     *   'penguin' -> ['', 'penguin']\n     *   null -> ['', '']\n     *   'a:b:c' -> (throws Error)`\n     * @private\n     * @param {?} iconName\n     * @return {?}\n     */\n    _splitIconName(iconName) {\n        if (!iconName) {\n            return ['', ''];\n        }\n        /** @type {?} */\n        const parts = iconName.split(':');\n        switch (parts.length) {\n            case 1: return ['', parts[0]]; // Use default namespace.\n            case 2: return (/** @type {?} */ (parts));\n            default: throw Error(`Invalid icon name: \"${iconName}\"`);\n        }\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n        /** @type {?} */\n        const svgIconChanges = changes['svgIcon'];\n        if (svgIconChanges) {\n            if (this.svgIcon) {\n                const [namespace, iconName] = this._splitIconName(this.svgIcon);\n                this._iconRegistry.getNamedSvgIcon(iconName, namespace)\n                    .pipe(take(1))\n                    .subscribe((/**\n                 * @param {?} svg\n                 * @return {?}\n                 */\n                svg => this._setSvgElement(svg)), (/**\n                 * @param {?} err\n                 * @return {?}\n                 */\n                (err) => {\n                    /** @type {?} */\n                    const errorMessage = `Error retrieving icon ${namespace}:${iconName}! ${err.message}`;\n                    // @breaking-change 9.0.0 _errorHandler parameter to be made required.\n                    if (this._errorHandler) {\n                        this._errorHandler.handleError(new Error(errorMessage));\n                    }\n                    else {\n                        console.error(errorMessage);\n                    }\n                }));\n            }\n            else if (svgIconChanges.previousValue) {\n                this._clearSvgElement();\n            }\n        }\n        if (this._usingFontIcon()) {\n            this._updateFontIconClasses();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n        // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n        if (this._usingFontIcon()) {\n            this._updateFontIconClasses();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewChecked() {\n        /** @type {?} */\n        const cachedElements = this._elementsWithExternalReferences;\n        if (cachedElements && this._location && cachedElements.size) {\n            /** @type {?} */\n            const newPath = this._location.getPathname();\n            // We need to check whether the URL has changed on each change detection since\n            // the browser doesn't have an API that will let us react on link clicks and\n            // we can't depend on the Angular router. The references need to be updated,\n            // because while most browsers don't care whether the URL is correct after\n            // the first render, Safari will break if the user navigates to a different\n            // page and the SVG isn't re-rendered.\n            if (newPath !== this._previousPath) {\n                this._previousPath = newPath;\n                this._prependPathToReferences(newPath);\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this._elementsWithExternalReferences) {\n            this._elementsWithExternalReferences.clear();\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _usingFontIcon() {\n        return !this.svgIcon;\n    }\n    /**\n     * @private\n     * @param {?} svg\n     * @return {?}\n     */\n    _setSvgElement(svg) {\n        this._clearSvgElement();\n        // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n        // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n        // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n        /** @type {?} */\n        const styleTags = (/** @type {?} */ (svg.querySelectorAll('style')));\n        for (let i = 0; i < styleTags.length; i++) {\n            styleTags[i].textContent += ' ';\n        }\n        // Note: we do this fix here, rather than the icon registry, because the\n        // references have to point to the URL at the time that the icon was created.\n        if (this._location) {\n            /** @type {?} */\n            const path = this._location.getPathname();\n            this._previousPath = path;\n            this._cacheChildrenWithExternalReferences(svg);\n            this._prependPathToReferences(path);\n        }\n        this._elementRef.nativeElement.appendChild(svg);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _clearSvgElement() {\n        /** @type {?} */\n        const layoutElement = this._elementRef.nativeElement;\n        /** @type {?} */\n        let childCount = layoutElement.childNodes.length;\n        if (this._elementsWithExternalReferences) {\n            this._elementsWithExternalReferences.clear();\n        }\n        // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n        // we can't use innerHTML, because IE will throw if the element has a data binding.\n        while (childCount--) {\n            /** @type {?} */\n            const child = layoutElement.childNodes[childCount];\n            // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n            // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n            if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n                layoutElement.removeChild(child);\n            }\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _updateFontIconClasses() {\n        if (!this._usingFontIcon()) {\n            return;\n        }\n        /** @type {?} */\n        const elem = this._elementRef.nativeElement;\n        /** @type {?} */\n        const fontSetClass = this.fontSet ?\n            this._iconRegistry.classNameForFontAlias(this.fontSet) :\n            this._iconRegistry.getDefaultFontSetClass();\n        if (fontSetClass != this._previousFontSetClass) {\n            if (this._previousFontSetClass) {\n                elem.classList.remove(this._previousFontSetClass);\n            }\n            if (fontSetClass) {\n                elem.classList.add(fontSetClass);\n            }\n            this._previousFontSetClass = fontSetClass;\n        }\n        if (this.fontIcon != this._previousFontIconClass) {\n            if (this._previousFontIconClass) {\n                elem.classList.remove(this._previousFontIconClass);\n            }\n            if (this.fontIcon) {\n                elem.classList.add(this.fontIcon);\n            }\n            this._previousFontIconClass = this.fontIcon;\n        }\n    }\n    /**\n     * Cleans up a value to be used as a fontIcon or fontSet.\n     * Since the value ends up being assigned as a CSS class, we\n     * have to trim the value and omit space-separated values.\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    _cleanupFontValue(value) {\n        return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n    }\n    /**\n     * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n     * reference. This is required because WebKit browsers require references to be prefixed with\n     * the current path, if the page has a `base` tag.\n     * @private\n     * @param {?} path\n     * @return {?}\n     */\n    _prependPathToReferences(path) {\n        /** @type {?} */\n        const elements = this._elementsWithExternalReferences;\n        if (elements) {\n            elements.forEach((/**\n             * @param {?} attrs\n             * @param {?} element\n             * @return {?}\n             */\n            (attrs, element) => {\n                attrs.forEach((/**\n                 * @param {?} attr\n                 * @return {?}\n                 */\n                attr => {\n                    element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n                }));\n            }));\n        }\n    }\n    /**\n     * Caches the children of an SVG element that have `url()`\n     * references that we need to prefix with the current path.\n     * @private\n     * @param {?} element\n     * @return {?}\n     */\n    _cacheChildrenWithExternalReferences(element) {\n        /** @type {?} */\n        const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n        /** @type {?} */\n        const elements = this._elementsWithExternalReferences =\n            this._elementsWithExternalReferences || new Map();\n        for (let i = 0; i < elementsWithFuncIri.length; i++) {\n            funcIriAttributes.forEach((/**\n             * @param {?} attr\n             * @return {?}\n             */\n            attr => {\n                /** @type {?} */\n                const elementWithReference = elementsWithFuncIri[i];\n                /** @type {?} */\n                const value = elementWithReference.getAttribute(attr);\n                /** @type {?} */\n                const match = value ? value.match(funcIriPattern) : null;\n                if (match) {\n                    /** @type {?} */\n                    let attributes = elements.get(elementWithReference);\n                    if (!attributes) {\n                        attributes = [];\n                        elements.set(elementWithReference, attributes);\n                    }\n                    (/** @type {?} */ (attributes)).push({ name: attr, value: match[1] });\n                }\n            }));\n        }\n    }\n}\nMatIcon.decorators = [\n    { type: Component, args: [{template: '<ng-content></ng-content>',\n                selector: 'mat-icon',\n                exportAs: 'matIcon',\n                styles: [\".mat-icon{background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1,1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\"],\n                inputs: ['color'],\n                host: {\n                    'role': 'img',\n                    'class': 'mat-icon notranslate',\n                    '[class.mat-icon-inline]': 'inline',\n                    '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"',\n                },\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n            },] },\n];\n/** @nocollapse */\nMatIcon.ctorParameters = () => [\n    { type: ElementRef },\n    { type: MatIconRegistry },\n    { type: String, decorators: [{ type: Attribute, args: ['aria-hidden',] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_ICON_LOCATION,] }] },\n    { type: ErrorHandler, decorators: [{ type: Optional }] }\n];\nMatIcon.propDecorators = {\n    inline: [{ type: Input }],\n    svgIcon: [{ type: Input }],\n    fontSet: [{ type: Input }],\n    fontIcon: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatIconModule {\n}\nMatIconModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [MatCommonModule],\n                exports: [MatIcon, MatCommonModule],\n                declarations: [MatIcon],\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatIconModule, MAT_ICON_LOCATION_FACTORY, MAT_ICON_LOCATION, MatIcon, getMatIconNameNotFoundError, getMatIconNoHttpProviderError, getMatIconFailedToSanitizeUrlError, getMatIconFailedToSanitizeLiteralError, ICON_REGISTRY_PROVIDER_FACTORY, MatIconRegistry, ICON_REGISTRY_PROVIDER };\n//# sourceMappingURL=icon.js.map\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Directive, Injectable, Optional, SkipSelf, NgModule, ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, Input, ViewEncapsulation, ContentChild, ContentChildren, EventEmitter, forwardRef, Inject, Output, ViewChildren, TemplateRef, ɵɵdefineInjectable } from '@angular/core';\nimport { CdkStepLabel, CdkStepHeader, CdkStep, CdkStepper, STEPPER_GLOBAL_OPTIONS, CdkStepperNext, CdkStepperPrevious, CdkStepperModule } from '@angular/cdk/stepper';\nimport { Subject } from 'rxjs';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { ErrorStateMatcher, MatCommonModule, MatRippleModule } from '@angular/material/core';\nimport { takeUntil, distinctUntilChanged } from 'rxjs/operators';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatStepLabel extends CdkStepLabel {\n}\nMatStepLabel.decorators = [\n    { type: Directive, args: [{\n                selector: '[matStepLabel]',\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Stepper data that is required for internationalization.\n */\nclass MatStepperIntl {\n    constructor() {\n        /**\n         * Stream that emits whenever the labels here are changed. Use this to notify\n         * components if the labels have changed after initialization.\n         */\n        this.changes = new Subject();\n        /**\n         * Label that is rendered below optional steps.\n         */\n        this.optionalLabel = 'Optional';\n    }\n}\nMatStepperIntl.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] },\n];\n/** @nocollapse */ MatStepperIntl.ngInjectableDef = ɵɵdefineInjectable({ factory: function MatStepperIntl_Factory() { return new MatStepperIntl(); }, token: MatStepperIntl, providedIn: \"root\" });\n/**\n * \\@docs-private\n * @param {?} parentIntl\n * @return {?}\n */\nfunction MAT_STEPPER_INTL_PROVIDER_FACTORY(parentIntl) {\n    return parentIntl || new MatStepperIntl();\n}\n/**\n * \\@docs-private\n * @type {?}\n */\nconst MAT_STEPPER_INTL_PROVIDER = {\n    provide: MatStepperIntl,\n    deps: [[new Optional(), new SkipSelf(), MatStepperIntl]],\n    useFactory: MAT_STEPPER_INTL_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatStepHeader extends CdkStepHeader {\n    /**\n     * @param {?} _intl\n     * @param {?} _focusMonitor\n     * @param {?} _elementRef\n     * @param {?} changeDetectorRef\n     */\n    constructor(_intl, _focusMonitor, _elementRef, changeDetectorRef) {\n        super(_elementRef);\n        this._intl = _intl;\n        this._focusMonitor = _focusMonitor;\n        _focusMonitor.monitor(_elementRef, true);\n        this._intlSubscription = _intl.changes.subscribe((/**\n         * @return {?}\n         */\n        () => changeDetectorRef.markForCheck()));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._intlSubscription.unsubscribe();\n        this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n    /**\n     * Focuses the step header.\n     * @return {?}\n     */\n    focus() {\n        this._focusMonitor.focusVia(this._elementRef, 'program');\n    }\n    /**\n     * Returns string label of given step if it is a text label.\n     * @return {?}\n     */\n    _stringLabel() {\n        return this.label instanceof MatStepLabel ? null : this.label;\n    }\n    /**\n     * Returns MatStepLabel if the label of given step is a template label.\n     * @return {?}\n     */\n    _templateLabel() {\n        return this.label instanceof MatStepLabel ? this.label : null;\n    }\n    /**\n     * Returns the host HTML element.\n     * @return {?}\n     */\n    _getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n    /**\n     * Template context variables that are exposed to the `matStepperIcon` instances.\n     * @return {?}\n     */\n    _getIconContext() {\n        return {\n            index: this.index,\n            active: this.active,\n            optional: this.optional\n        };\n    }\n    /**\n     * @param {?} state\n     * @return {?}\n     */\n    _getDefaultTextForState(state$$1) {\n        if (state$$1 == 'number') {\n            return `${this.index + 1}`;\n        }\n        if (state$$1 == 'edit') {\n            return 'create';\n        }\n        if (state$$1 == 'error') {\n            return 'warning';\n        }\n        return state$$1;\n    }\n}\nMatStepHeader.decorators = [\n    { type: Component, args: [{selector: 'mat-step-header',\n                template: \"<div class=\\\"mat-step-header-ripple\\\" matRipple [matRippleTrigger]=\\\"_getHostElement()\\\" [matRippleDisabled]=\\\"disableRipple\\\"></div><div class=\\\"mat-step-icon-state-{{state}} mat-step-icon\\\" [class.mat-step-icon-selected]=\\\"selected\\\"><div class=\\\"mat-step-icon-content\\\" [ngSwitch]=\\\"!!(iconOverrides && iconOverrides[state])\\\"><ng-container *ngSwitchCase=\\\"true\\\" [ngTemplateOutlet]=\\\"iconOverrides[state]\\\" [ngTemplateOutletContext]=\\\"_getIconContext()\\\"></ng-container><ng-container *ngSwitchDefault [ngSwitch]=\\\"state\\\"><span *ngSwitchCase=\\\"'number'\\\">{{_getDefaultTextForState(state)}}</span><mat-icon *ngSwitchDefault>{{_getDefaultTextForState(state)}}</mat-icon></ng-container></div></div><div class=\\\"mat-step-label\\\" [class.mat-step-label-active]=\\\"active\\\" [class.mat-step-label-selected]=\\\"selected\\\" [class.mat-step-label-error]=\\\"state == 'error'\\\"><ng-container *ngIf=\\\"_templateLabel()\\\" [ngTemplateOutlet]=\\\"_templateLabel()!.template\\\"></ng-container><div class=\\\"mat-step-text-label\\\" *ngIf=\\\"_stringLabel()\\\">{{label}}</div><div class=\\\"mat-step-optional\\\" *ngIf=\\\"optional && state != 'error'\\\">{{_intl.optionalLabel}}</div><div class=\\\"mat-step-sub-label-error\\\" *ngIf=\\\"state == 'error'\\\">{{errorMessage}}</div></div>\",\n                styles: [\".mat-step-header{overflow:hidden;outline:0;cursor:pointer;position:relative;box-sizing:content-box;-webkit-tap-highlight-color:transparent}.mat-step-optional,.mat-step-sub-label-error{font-size:12px}.mat-step-icon{border-radius:50%;height:24px;width:24px;flex-shrink:0;position:relative}.mat-step-icon .mat-icon,.mat-step-icon-content{position:absolute;top:50%;left:50%;transform:translate(-50%,-50%)}.mat-step-icon .mat-icon{font-size:16px;height:16px;width:16px}.mat-step-icon-state-error .mat-icon{font-size:24px;height:24px;width:24px}.mat-step-label{display:inline-block;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;min-width:50px;vertical-align:middle}.mat-step-text-label{text-overflow:ellipsis;overflow:hidden}.mat-step-header .mat-step-header-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}\"],\n                host: {\n                    'class': 'mat-step-header',\n                    'role': 'tab',\n                },\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n            },] },\n];\n/** @nocollapse */\nMatStepHeader.ctorParameters = () => [\n    { type: MatStepperIntl },\n    { type: FocusMonitor },\n    { type: ElementRef },\n    { type: ChangeDetectorRef }\n];\nMatStepHeader.propDecorators = {\n    state: [{ type: Input }],\n    label: [{ type: Input }],\n    errorMessage: [{ type: Input }],\n    iconOverrides: [{ type: Input }],\n    index: [{ type: Input }],\n    selected: [{ type: Input }],\n    active: [{ type: Input }],\n    optional: [{ type: Input }],\n    disableRipple: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Animations used by the Material steppers.\n * \\@docs-private\n * @type {?}\n */\nconst matStepperAnimations = {\n    /**\n     * Animation that transitions the step along the X axis in a horizontal stepper.\n     */\n    horizontalStepTransition: trigger('stepTransition', [\n        state('previous', style({ transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden' })),\n        state('current', style({ transform: 'none', visibility: 'visible' })),\n        state('next', style({ transform: 'translate3d(100%, 0, 0)', visibility: 'hidden' })),\n        transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n    ]),\n    /**\n     * Animation that transitions the step along the Y axis in a vertical stepper.\n     */\n    verticalStepTransition: trigger('stepTransition', [\n        state('previous', style({ height: '0px', visibility: 'hidden' })),\n        state('next', style({ height: '0px', visibility: 'hidden' })),\n        state('current', style({ height: '*', visibility: 'visible' })),\n        transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n    ])\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Template to be used to override the icons inside the step header.\n */\nclass MatStepperIcon {\n    /**\n     * @param {?} templateRef\n     */\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n    }\n}\nMatStepperIcon.decorators = [\n    { type: Directive, args: [{\n                selector: 'ng-template[matStepperIcon]',\n            },] },\n];\n/** @nocollapse */\nMatStepperIcon.ctorParameters = () => [\n    { type: TemplateRef }\n];\nMatStepperIcon.propDecorators = {\n    name: [{ type: Input, args: ['matStepperIcon',] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatStep extends CdkStep {\n    /**\n     * \\@breaking-change 8.0.0 remove the `?` after `stepperOptions`\n     * @param {?} stepper\n     * @param {?} _errorStateMatcher\n     * @param {?=} stepperOptions\n     */\n    constructor(stepper, _errorStateMatcher, stepperOptions) {\n        super(stepper, stepperOptions);\n        this._errorStateMatcher = _errorStateMatcher;\n    }\n    /**\n     * Custom error state matcher that additionally checks for validity of interacted form.\n     * @param {?} control\n     * @param {?} form\n     * @return {?}\n     */\n    isErrorState(control, form) {\n        /** @type {?} */\n        const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n        // Custom error state checks for the validity of form that is not submitted or touched\n        // since user can trigger a form change by calling for another step without directly\n        // interacting with the current form.\n        /** @type {?} */\n        const customErrorState = !!(control && control.invalid && this.interacted);\n        return originalErrorState || customErrorState;\n    }\n}\nMatStep.decorators = [\n    { type: Component, args: [{selector: 'mat-step',\n                template: \"<ng-template><ng-content></ng-content></ng-template>\",\n                providers: [{ provide: ErrorStateMatcher, useExisting: MatStep }],\n                encapsulation: ViewEncapsulation.None,\n                exportAs: 'matStep',\n                changeDetection: ChangeDetectionStrategy.OnPush,\n            },] },\n];\n/** @nocollapse */\nMatStep.ctorParameters = () => [\n    { type: MatStepper, decorators: [{ type: Inject, args: [forwardRef((/**\n                     * @return {?}\n                     */\n                    () => MatStepper)),] }] },\n    { type: ErrorStateMatcher, decorators: [{ type: SkipSelf }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [STEPPER_GLOBAL_OPTIONS,] }] }\n];\nMatStep.propDecorators = {\n    stepLabel: [{ type: ContentChild, args: [MatStepLabel, { static: false },] }]\n};\nclass MatStepper extends CdkStepper {\n    constructor() {\n        super(...arguments);\n        /**\n         * Event emitted when the current step is done transitioning in.\n         */\n        this.animationDone = new EventEmitter();\n        /**\n         * Consumer-specified template-refs to be used to override the header icons.\n         */\n        this._iconOverrides = {};\n        /**\n         * Stream of animation `done` events when the body expands/collapses.\n         */\n        this._animationDone = new Subject();\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._icons.forEach((/**\n         * @param {?} __0\n         * @return {?}\n         */\n        ({ name, templateRef }) => this._iconOverrides[name] = templateRef));\n        // Mark the component for change detection whenever the content children query changes\n        this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe((/**\n         * @return {?}\n         */\n        () => this._stateChanged()));\n        this._animationDone.pipe(\n        // This needs a `distinctUntilChanged` in order to avoid emitting the same event twice due\n        // to a bug in animations where the `.done` callback gets invoked twice on some browsers.\n        // See https://github.com/angular/angular/issues/24084\n        distinctUntilChanged((/**\n         * @param {?} x\n         * @param {?} y\n         * @return {?}\n         */\n        (x, y) => x.fromState === y.fromState && x.toState === y.toState)), takeUntil(this._destroyed)).subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            if (((/** @type {?} */ (event.toState))) === 'current') {\n                this.animationDone.emit();\n            }\n        }));\n    }\n}\nMatStepper.decorators = [\n    { type: Directive, args: [{ selector: '[matStepper]', providers: [{ provide: CdkStepper, useExisting: MatStepper }] },] },\n];\nMatStepper.propDecorators = {\n    _stepHeader: [{ type: ViewChildren, args: [MatStepHeader,] }],\n    _steps: [{ type: ContentChildren, args: [MatStep,] }],\n    _icons: [{ type: ContentChildren, args: [MatStepperIcon,] }],\n    animationDone: [{ type: Output }],\n    disableRipple: [{ type: Input }]\n};\nclass MatHorizontalStepper extends MatStepper {\n    constructor() {\n        super(...arguments);\n        /**\n         * Whether the label should display in bottom or end position.\n         */\n        this.labelPosition = 'end';\n    }\n}\nMatHorizontalStepper.decorators = [\n    { type: Component, args: [{selector: 'mat-horizontal-stepper',\n                exportAs: 'matHorizontalStepper',\n                template: \"<div class=\\\"mat-horizontal-stepper-header-container\\\"><ng-container *ngFor=\\\"let step of steps; let i = index; let isLast = last\\\"><mat-step-header class=\\\"mat-horizontal-stepper-header\\\" (click)=\\\"step.select()\\\" (keydown)=\\\"_onKeydown($event)\\\" [tabIndex]=\\\"_getFocusIndex() === i ? 0 : -1\\\" [id]=\\\"_getStepLabelId(i)\\\" [attr.aria-posinset]=\\\"i + 1\\\" [attr.aria-setsize]=\\\"steps.length\\\" [attr.aria-controls]=\\\"_getStepContentId(i)\\\" [attr.aria-selected]=\\\"selectedIndex == i\\\" [attr.aria-label]=\\\"step.ariaLabel || null\\\" [attr.aria-labelledby]=\\\"(!step.ariaLabel && step.ariaLabelledby) ? step.ariaLabelledby : null\\\" [index]=\\\"i\\\" [state]=\\\"_getIndicatorType(i, step.state)\\\" [label]=\\\"step.stepLabel || step.label\\\" [selected]=\\\"selectedIndex === i\\\" [active]=\\\"step.completed || selectedIndex === i || !linear\\\" [optional]=\\\"step.optional\\\" [errorMessage]=\\\"step.errorMessage\\\" [iconOverrides]=\\\"_iconOverrides\\\" [disableRipple]=\\\"disableRipple\\\"></mat-step-header><div *ngIf=\\\"!isLast\\\" class=\\\"mat-stepper-horizontal-line\\\"></div></ng-container></div><div class=\\\"mat-horizontal-content-container\\\"><div *ngFor=\\\"let step of steps; let i = index\\\" [attr.tabindex]=\\\"selectedIndex === i ? 0 : null\\\" class=\\\"mat-horizontal-stepper-content\\\" role=\\\"tabpanel\\\" [@stepTransition]=\\\"_getAnimationDirection(i)\\\" (@stepTransition.done)=\\\"_animationDone.next($event)\\\" [id]=\\\"_getStepContentId(i)\\\" [attr.aria-labelledby]=\\\"_getStepLabelId(i)\\\" [attr.aria-expanded]=\\\"selectedIndex === i\\\"><ng-container [ngTemplateOutlet]=\\\"step.content\\\"></ng-container></div></div>\",\n                styles: [\".mat-stepper-horizontal,.mat-stepper-vertical{display:block}.mat-horizontal-stepper-header-container{white-space:nowrap;display:flex;align-items:center}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header-container{align-items:flex-start}.mat-stepper-horizontal-line{border-top-width:1px;border-top-style:solid;flex:auto;height:0;margin:0 -16px;min-width:32px}.mat-stepper-label-position-bottom .mat-stepper-horizontal-line{margin:0;min-width:0;position:relative;top:36px}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:first-child)::before,.mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:last-child)::after,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:first-child)::after,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:last-child)::before{border-top-width:1px;border-top-style:solid;content:'';display:inline-block;height:0;position:absolute;top:36px;width:calc(50% - 20px)}.mat-horizontal-stepper-header{display:flex;height:72px;overflow:hidden;align-items:center;padding:0 24px}.mat-horizontal-stepper-header .mat-step-icon{margin-right:8px;flex:none}[dir=rtl] .mat-horizontal-stepper-header .mat-step-icon{margin-right:0;margin-left:8px}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header{box-sizing:border-box;flex-direction:column;height:auto;padding:24px}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:last-child)::after,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:first-child)::after{right:0}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:first-child)::before,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:last-child)::before{left:0}[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:first-child::after,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:last-child::before{display:none}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header .mat-step-icon{margin-right:0;margin-left:0}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header .mat-step-label{padding:16px 0 0 0;text-align:center;width:100%}.mat-vertical-stepper-header{display:flex;align-items:center;padding:24px;height:24px}.mat-vertical-stepper-header .mat-step-icon{margin-right:12px}[dir=rtl] .mat-vertical-stepper-header .mat-step-icon{margin-right:0;margin-left:12px}.mat-horizontal-stepper-content{outline:0}.mat-horizontal-stepper-content[aria-expanded=false]{height:0;overflow:hidden}.mat-horizontal-content-container{overflow:hidden;padding:0 24px 24px 24px}.mat-vertical-content-container{margin-left:36px;border:0;position:relative}[dir=rtl] .mat-vertical-content-container{margin-left:0;margin-right:36px}.mat-stepper-vertical-line::before{content:'';position:absolute;top:-16px;bottom:-16px;left:0;border-left-width:1px;border-left-style:solid}[dir=rtl] .mat-stepper-vertical-line::before{left:auto;right:0}.mat-vertical-stepper-content{overflow:hidden;outline:0}.mat-vertical-content{padding:0 24px 24px 24px}.mat-step:last-child .mat-vertical-content-container{border:none}\"],\n                inputs: ['selectedIndex'],\n                host: {\n                    'class': 'mat-stepper-horizontal',\n                    '[class.mat-stepper-label-position-end]': 'labelPosition == \"end\"',\n                    '[class.mat-stepper-label-position-bottom]': 'labelPosition == \"bottom\"',\n                    'aria-orientation': 'horizontal',\n                    'role': 'tablist',\n                },\n                animations: [matStepperAnimations.horizontalStepTransition],\n                providers: [\n                    { provide: MatStepper, useExisting: MatHorizontalStepper },\n                    { provide: CdkStepper, useExisting: MatHorizontalStepper }\n                ],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n            },] },\n];\nMatHorizontalStepper.propDecorators = {\n    labelPosition: [{ type: Input }]\n};\nclass MatVerticalStepper extends MatStepper {\n    /**\n     * @param {?} dir\n     * @param {?} changeDetectorRef\n     * @param {?=} elementRef\n     * @param {?=} _document\n     */\n    constructor(dir, changeDetectorRef, \n    // @breaking-change 8.0.0 `elementRef` and `_document` parameters to become required.\n    elementRef, _document) {\n        super(dir, changeDetectorRef, elementRef, _document);\n        this._orientation = 'vertical';\n    }\n}\nMatVerticalStepper.decorators = [\n    { type: Component, args: [{selector: 'mat-vertical-stepper',\n                exportAs: 'matVerticalStepper',\n                template: \"<div class=\\\"mat-step\\\" *ngFor=\\\"let step of steps; let i = index; let isLast = last\\\"><mat-step-header class=\\\"mat-vertical-stepper-header\\\" (click)=\\\"step.select()\\\" (keydown)=\\\"_onKeydown($event)\\\" [tabIndex]=\\\"_getFocusIndex() == i ? 0 : -1\\\" [id]=\\\"_getStepLabelId(i)\\\" [attr.aria-posinset]=\\\"i + 1\\\" [attr.aria-setsize]=\\\"steps.length\\\" [attr.aria-controls]=\\\"_getStepContentId(i)\\\" [attr.aria-selected]=\\\"selectedIndex === i\\\" [attr.aria-label]=\\\"step.ariaLabel || null\\\" [attr.aria-labelledby]=\\\"(!step.ariaLabel && step.ariaLabelledby) ? step.ariaLabelledby : null\\\" [index]=\\\"i\\\" [state]=\\\"_getIndicatorType(i, step.state)\\\" [label]=\\\"step.stepLabel || step.label\\\" [selected]=\\\"selectedIndex === i\\\" [active]=\\\"step.completed || selectedIndex === i || !linear\\\" [optional]=\\\"step.optional\\\" [errorMessage]=\\\"step.errorMessage\\\" [iconOverrides]=\\\"_iconOverrides\\\" [disableRipple]=\\\"disableRipple\\\"></mat-step-header><div class=\\\"mat-vertical-content-container\\\" [class.mat-stepper-vertical-line]=\\\"!isLast\\\"><div class=\\\"mat-vertical-stepper-content\\\" role=\\\"tabpanel\\\" [attr.tabindex]=\\\"selectedIndex === i ? 0 : null\\\" [@stepTransition]=\\\"_getAnimationDirection(i)\\\" (@stepTransition.done)=\\\"_animationDone.next($event)\\\" [id]=\\\"_getStepContentId(i)\\\" [attr.aria-labelledby]=\\\"_getStepLabelId(i)\\\" [attr.aria-expanded]=\\\"selectedIndex === i\\\"><div class=\\\"mat-vertical-content\\\"><ng-container [ngTemplateOutlet]=\\\"step.content\\\"></ng-container></div></div></div></div>\",\n                styles: [\".mat-stepper-horizontal,.mat-stepper-vertical{display:block}.mat-horizontal-stepper-header-container{white-space:nowrap;display:flex;align-items:center}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header-container{align-items:flex-start}.mat-stepper-horizontal-line{border-top-width:1px;border-top-style:solid;flex:auto;height:0;margin:0 -16px;min-width:32px}.mat-stepper-label-position-bottom .mat-stepper-horizontal-line{margin:0;min-width:0;position:relative;top:36px}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:first-child)::before,.mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:last-child)::after,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:first-child)::after,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:last-child)::before{border-top-width:1px;border-top-style:solid;content:'';display:inline-block;height:0;position:absolute;top:36px;width:calc(50% - 20px)}.mat-horizontal-stepper-header{display:flex;height:72px;overflow:hidden;align-items:center;padding:0 24px}.mat-horizontal-stepper-header .mat-step-icon{margin-right:8px;flex:none}[dir=rtl] .mat-horizontal-stepper-header .mat-step-icon{margin-right:0;margin-left:8px}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header{box-sizing:border-box;flex-direction:column;height:auto;padding:24px}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:last-child)::after,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:first-child)::after{right:0}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:first-child)::before,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:last-child)::before{left:0}[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:first-child::after,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:last-child::before{display:none}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header .mat-step-icon{margin-right:0;margin-left:0}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header .mat-step-label{padding:16px 0 0 0;text-align:center;width:100%}.mat-vertical-stepper-header{display:flex;align-items:center;padding:24px;height:24px}.mat-vertical-stepper-header .mat-step-icon{margin-right:12px}[dir=rtl] .mat-vertical-stepper-header .mat-step-icon{margin-right:0;margin-left:12px}.mat-horizontal-stepper-content{outline:0}.mat-horizontal-stepper-content[aria-expanded=false]{height:0;overflow:hidden}.mat-horizontal-content-container{overflow:hidden;padding:0 24px 24px 24px}.mat-vertical-content-container{margin-left:36px;border:0;position:relative}[dir=rtl] .mat-vertical-content-container{margin-left:0;margin-right:36px}.mat-stepper-vertical-line::before{content:'';position:absolute;top:-16px;bottom:-16px;left:0;border-left-width:1px;border-left-style:solid}[dir=rtl] .mat-stepper-vertical-line::before{left:auto;right:0}.mat-vertical-stepper-content{overflow:hidden;outline:0}.mat-vertical-content{padding:0 24px 24px 24px}.mat-step:last-child .mat-vertical-content-container{border:none}\"],\n                inputs: ['selectedIndex'],\n                host: {\n                    'class': 'mat-stepper-vertical',\n                    'aria-orientation': 'vertical',\n                    'role': 'tablist',\n                },\n                animations: [matStepperAnimations.verticalStepTransition],\n                providers: [\n                    { provide: MatStepper, useExisting: MatVerticalStepper },\n                    { provide: CdkStepper, useExisting: MatVerticalStepper }\n                ],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n            },] },\n];\n/** @nocollapse */\nMatVerticalStepper.ctorParameters = () => [\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: ChangeDetectorRef },\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Button that moves to the next step in a stepper workflow.\n */\nclass MatStepperNext extends CdkStepperNext {\n}\nMatStepperNext.decorators = [\n    { type: Directive, args: [{\n                selector: 'button[matStepperNext]',\n                host: {\n                    '[type]': 'type',\n                },\n                inputs: ['type']\n            },] },\n];\n/**\n * Button that moves to the previous step in a stepper workflow.\n */\nclass MatStepperPrevious extends CdkStepperPrevious {\n}\nMatStepperPrevious.decorators = [\n    { type: Directive, args: [{\n                selector: 'button[matStepperPrevious]',\n                host: {\n                    '[type]': 'type',\n                },\n                inputs: ['type']\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatStepperModule {\n}\nMatStepperModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [\n                    MatCommonModule,\n                    CommonModule,\n                    PortalModule,\n                    MatButtonModule,\n                    CdkStepperModule,\n                    MatIconModule,\n                    MatRippleModule,\n                ],\n                exports: [\n                    MatCommonModule,\n                    MatHorizontalStepper,\n                    MatVerticalStepper,\n                    MatStep,\n                    MatStepLabel,\n                    MatStepper,\n                    MatStepperNext,\n                    MatStepperPrevious,\n                    MatStepHeader,\n                    MatStepperIcon,\n                ],\n                declarations: [\n                    MatHorizontalStepper,\n                    MatVerticalStepper,\n                    MatStep,\n                    MatStepLabel,\n                    MatStepper,\n                    MatStepperNext,\n                    MatStepperPrevious,\n                    MatStepHeader,\n                    MatStepperIcon,\n                ],\n                providers: [MAT_STEPPER_INTL_PROVIDER, ErrorStateMatcher],\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatStepperModule, MatStepLabel, MatStep, MatStepper, MatHorizontalStepper, MatVerticalStepper, MatStepperNext, MatStepperPrevious, MatStepHeader, MAT_STEPPER_INTL_PROVIDER_FACTORY, MatStepperIntl, MAT_STEPPER_INTL_PROVIDER, matStepperAnimations, MatStepperIcon };\n//# sourceMappingURL=stepper.js.map\n"]}