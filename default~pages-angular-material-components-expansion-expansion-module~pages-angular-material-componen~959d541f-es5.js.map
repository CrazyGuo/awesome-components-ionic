{"version":3,"sources":["default~pages-angular-material-components-expansion-expansion-module~pages-angular-material-componen~959d541f-es5.js","webpack:///node_modules/@angular/cdk/esm2015/collections.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,CAAC,MAAM,CAAC,cAAc,CAAC,GAAG,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,+GAA+G,CAAC,EAAC;QAEhL,KAAK,CAAC,oDAAoD;QAC1D;;sEAE8D;QAC9D,sJAAsJ;QACtJ,KAAK,CAAC,CAAC,UAAS,MAAM,EAAE,mBAAmB,EAAE,mBAAmB;YAEhE,YAAY,CAAC;YCTb;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;;;;;;eAMG;YAIH;;;eAGG;YAEH;;;eAGG;YACH;gBAAA;gBACA,CAAC;gBAAD,iBAAC;YAAD,CAAC;YACD;;;;eAIG;YACH,SAAS,YAAY,CAAC,KAAK;gBACvB,uFAAuF;gBACvF,uFAAuF;gBACvF,yDAAyD;gBACzD,OAAO,KAAK,IAAI,OAAO,KAAK,CAAC,OAAO,KAAK,UAAU,CAAC;YACxD,CAAC;YAED;;;eAGG;YACH;;;eAGG;YACH;gBAA8B,mCAAU;gBACpC;;mBAEG;gBACH,yBAAY,KAAK;oBAAjB,YACI,iBAAO,SAEV;oBADG,KAAI,CAAC,KAAK,GAAG,KAAK,CAAC;;gBACvB,CAAC;gBACD;;mBAEG;gBACH,iCAAO,GAAP;oBACI,OAAO,IAAI,CAAC,KAAK,YAAY,+CAAU,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,+CAAE,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAC1E,CAAC;gBACD;;mBAEG;gBACH,oCAAU,GAAV,cAAe,CAAC;gBACpB,sBAAC;YAAD,CAAC,CAlB6B,UAAU,GAkBvC;YAED;;;eAGG;YAEH;;;eAGG;YACH;;;eAGG;YACH;gBACI;;;;mBAIG;gBACH,wBAAY,SAAiB,EAAE,uBAAuB,EAAE,YAAmB;oBAA3E,iBAuCC;oBAvCW,6CAAiB;oBAA2B,kDAAmB;oBACvE,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;oBAC3B,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;oBACjC;;uBAEG;oBACH,IAAI,CAAC,UAAU,GAAG,IAAI,GAAG,EAAE,CAAC;oBAC5B;;uBAEG;oBACH,IAAI,CAAC,iBAAiB,GAAG,EAAE,CAAC;oBAC5B;;uBAEG;oBACH,IAAI,CAAC,eAAe,GAAG,EAAE,CAAC;oBAC1B;;uBAEG;oBACH,IAAI,CAAC,OAAO,GAAG,IAAI,4CAAO,EAAE,CAAC;oBAC7B;;;;uBAIG;oBACH,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC;oBAC7B,IAAI,uBAAuB,IAAI,uBAAuB,CAAC,MAAM,EAAE;wBAC3D,IAAI,SAAS,EAAE;4BACX,uBAAuB,CAAC,OAAO,CAAC,EAAC;;;+BAIjC,UAJiC;;;+BAG9B,CACH,KAAK,IAAI,YAAI,CAAC,aAAa,CAAC,KAAK,CAAC,EAAzB,CAAyB,CAAC,CAAC,CAAC;yBACxC;6BACI;4BACD,IAAI,CAAC,aAAa,CAAC,uBAAuB,CAAC,CAAC,CAAC,CAAC,CAAC;yBAClD;wBACD,oFAAoF;wBACpF,IAAI,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC,CAAC;qBACnC;gBACL,CAAC;gBAKD,sBAAI,oCAAQ;oBAJZ;;;uBAGG;yBACH;wBACI,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;4BACjB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,CAAC;yBACzD;wBACD,OAAO,IAAI,CAAC,SAAS,CAAC;oBAC1B,CAAC;;;mBAAA;gBACD;;;;mBAIG;gBACH,+BAAM,GAAN;oBAAA,iBAQC;oBARM,gBAAS;yBAAT,UAAS,EAAT,qBAAS,EAAT,IAAS;wBAAT,2BAAS;;oBACZ,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,CAAC;oBACpC,MAAM,CAAC,OAAO,CAAC,EAAC;;;uBAIhB,UAJgB;;;uBAGb,CACH,KAAK,IAAI,YAAI,CAAC,aAAa,CAAC,KAAK,CAAC,EAAzB,CAAyB,CAAC,CAAC,CAAC;oBACrC,IAAI,CAAC,gBAAgB,EAAE,CAAC;gBAC5B,CAAC;gBACD;;;;mBAIG;gBACH,iCAAQ,GAAR;oBAAA,iBAQC;oBARQ,gBAAS;yBAAT,UAAS,EAAT,qBAAS,EAAT,IAAS;wBAAT,2BAAS;;oBACd,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,CAAC;oBACpC,MAAM,CAAC,OAAO,CAAC,EAAC;;;uBAIhB,UAJgB;;;uBAGb,CACH,KAAK,IAAI,YAAI,CAAC,eAAe,CAAC,KAAK,CAAC,EAA3B,CAA2B,CAAC,CAAC,CAAC;oBACvC,IAAI,CAAC,gBAAgB,EAAE,CAAC;gBAC5B,CAAC;gBACD;;;;mBAIG;gBACH,+BAAM,GAAN,UAAO,KAAK;oBACR,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;gBACvE,CAAC;gBACD;;;mBAGG;gBACH,8BAAK,GAAL;oBACI,IAAI,CAAC,UAAU,EAAE,CAAC;oBAClB,IAAI,CAAC,gBAAgB,EAAE,CAAC;gBAC5B,CAAC;gBACD;;;;mBAIG;gBACH,mCAAU,GAAV,UAAW,KAAK;oBACZ,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;gBACtC,CAAC;gBACD;;;mBAGG;gBACH,gCAAO,GAAP;oBACI,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,KAAK,CAAC,CAAC;gBACtC,CAAC;gBACD;;;mBAGG;gBACH,iCAAQ,GAAR;oBACI,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;gBAC3B,CAAC;gBACD;;;;mBAIG;gBACH,6BAAI,GAAJ,UAAK,SAAS;oBACV,IAAI,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,QAAQ,EAAE;wBACjC,EAAC,gBAAiB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;qBACvD;gBACL,CAAC;gBACD;;;mBAGG;gBACH,4CAAmB,GAAnB;oBACI,OAAO,IAAI,CAAC,SAAS,CAAC;gBAC1B,CAAC;gBACD;;;;mBAIG;gBACH,yCAAgB,GAAhB;oBACI,sDAAsD;oBACtD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;oBACtB,IAAI,IAAI,CAAC,eAAe,CAAC,MAAM,IAAI,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE;wBAC9D,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;4BACd,MAAM,EAAE,IAAI;4BACZ,KAAK,EAAE,IAAI,CAAC,eAAe;4BAC3B,OAAO,EAAE,IAAI,CAAC,iBAAiB;yBAClC,CAAC,CAAC;wBACH,IAAI,CAAC,iBAAiB,GAAG,EAAE,CAAC;wBAC5B,IAAI,CAAC,eAAe,GAAG,EAAE,CAAC;qBAC7B;gBACL,CAAC;gBACD;;;;;mBAKG;gBACH,sCAAa,GAAb,UAAc,KAAK;oBACf,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE;wBACzB,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;4BACjB,IAAI,CAAC,UAAU,EAAE,CAAC;yBACrB;wBACD,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;wBAC3B,IAAI,IAAI,CAAC,YAAY,EAAE;4BACnB,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;yBACpC;qBACJ;gBACL,CAAC;gBACD;;;;;mBAKG;gBACH,wCAAe,GAAf,UAAgB,KAAK;oBACjB,IAAI,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE;wBACxB,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;wBAC9B,IAAI,IAAI,CAAC,YAAY,EAAE;4BACnB,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;yBACtC;qBACJ;gBACL,CAAC;gBACD;;;;mBAIG;gBACH,mCAAU,GAAV;oBAAA,iBAQC;oBAPG,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE;wBACjB,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,EAAC;;;2BAIzB,UAJyB;;;2BAGtB,CACH,KAAK,IAAI,YAAI,CAAC,eAAe,CAAC,KAAK,CAAC,EAA3B,CAA2B,CAAC,CAAC,CAAC;qBAC1C;gBACL,CAAC;gBACD;;;;;;mBAMG;gBACH,+CAAsB,GAAtB,UAAuB,MAAM;oBACzB,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;wBACtC,MAAM,uCAAuC,EAAE,CAAC;qBACnD;gBACL,CAAC;gBACL,qBAAC;YAAD,CAAC;YACD;;;;;eAKG;YACH,SAAS,uCAAuC;gBAC5C,OAAO,KAAK,CAAC,yEAAyE,CAAC,CAAC;YAC5F,CAAC;YAED;;;eAGG;YACH;;;;;;;;eAQG;YACH;gBACI;oBACI,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;gBACzB,CAAC;gBACD;;;;;mBAKG;gBACH,0CAAM,GAAN,UAAO,EAAE,EAAE,IAAI;;;wBACX,KAAqB,sBAAI,CAAC,UAAU,6CAAE;4BAAjC,IAAI,QAAQ;4BACb,QAAQ,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;yBACtB;;;;;;;;;gBACL,CAAC;gBACD;;;;mBAIG;gBACH,0CAAM,GAAN,UAAO,QAAQ;oBAAf,iBAcC;oBAbG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;oBAC/B,OAAO,EAAC;;uBAGR;wBACI,KAAI,CAAC,UAAU,GAAG,KAAI,CAAC,UAAU,CAAC,MAAM,CAAC,EAAC;;;2BAI1C,UAAC,UAAU;4BACP,OAAO,QAAQ,KAAK,UAAU,CAAC;wBACnC,CAAC,CAAC,CAAC,CAAC;oBACR,CAAC,CAAC,CAAC;gBACP,CAAC;gBACD;;mBAEG;gBACH,+CAAW,GAAX;oBACI,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;gBACzB,CAAC;gBACL,gCAAC;YAAD,CAAC;YACD,yBAAyB,CAAC,UAAU,GAAG;gBACnC,EAAE,IAAI,EAAE,wDAAU,EAAE,IAAI,EAAE,CAAC,EAAE,UAAU,EAAE,MAAM,EAAE,EAAE,EAAE;aACxD,CAAC;YACF,kBAAkB,CAAC,yBAAyB,CAAC,eAAe,GAAG,wEAAkB,CAAC,EAAE,OAAO,EAAE,SAAS,iCAAiC,KAAK,OAAO,IAAI,yBAAyB,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,yBAAyB,EAAE,UAAU,EAAE,MAAM,EAAE,CAAC,CAAC;YAE/O;;;eAGG;YAEH;;;eAGG;YAEH;;;eAGG;YAGH,uCAAuC;YDsBvC,KAAK;QAAC,CAAC,CAAC;KAEP,CAAC,CAAC,CAAC;AACJ,gJAAgJ","file":"x","sourcesContent":["(window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || []).push([[\"default~pages-angular-material-components-expansion-expansion-module~pages-angular-material-componen~959d541f\"],{\n\n/***/ \"./node_modules/@angular/cdk/esm2015/collections.js\":\n/*!**********************************************************!*\\\n  !*** ./node_modules/@angular/cdk/esm2015/collections.js ***!\n  \\**********************************************************/\n/*! exports provided: UniqueSelectionDispatcher, ArrayDataSource, isDataSource, DataSource, getMultipleValuesInSingleSelectionError, SelectionModel */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"UniqueSelectionDispatcher\", function() { return UniqueSelectionDispatcher; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ArrayDataSource\", function() { return ArrayDataSource; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isDataSource\", function() { return isDataSource; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DataSource\", function() { return DataSource; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getMultipleValuesInSingleSelectionError\", function() { return getMultipleValuesInSingleSelectionError; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SelectionModel\", function() { return SelectionModel; });\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rxjs */ \"./node_modules/rxjs/_esm2015/index.js\");\n/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ \"./node_modules/@angular/core/fesm2015/core.js\");\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @abstract\n * @template T\n */\nclass DataSource {\n}\n/**\n * Checks whether an object is a data source.\n * @param {?} value\n * @return {?}\n */\nfunction isDataSource(value) {\n    // Check if the value is a DataSource by observing if it has a connect function. Cannot\n    // be checked as an `instanceof DataSource` since people could create their own sources\n    // that match the interface, but don't extend DataSource.\n    return value && typeof value.connect === 'function';\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * DataSource wrapper for a native array.\n * @template T\n */\nclass ArrayDataSource extends DataSource {\n    /**\n     * @param {?} _data\n     */\n    constructor(_data) {\n        super();\n        this._data = _data;\n    }\n    /**\n     * @return {?}\n     */\n    connect() {\n        return this._data instanceof rxjs__WEBPACK_IMPORTED_MODULE_0__[\"Observable\"] ? this._data : Object(rxjs__WEBPACK_IMPORTED_MODULE_0__[\"of\"])(this._data);\n    }\n    /**\n     * @return {?}\n     */\n    disconnect() { }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Class to be used to power selecting one or more options from a list.\n * @template T\n */\nclass SelectionModel {\n    /**\n     * @param {?=} _multiple\n     * @param {?=} initiallySelectedValues\n     * @param {?=} _emitChanges\n     */\n    constructor(_multiple = false, initiallySelectedValues, _emitChanges = true) {\n        this._multiple = _multiple;\n        this._emitChanges = _emitChanges;\n        /**\n         * Currently-selected values.\n         */\n        this._selection = new Set();\n        /**\n         * Keeps track of the deselected options that haven't been emitted by the change event.\n         */\n        this._deselectedToEmit = [];\n        /**\n         * Keeps track of the selected options that haven't been emitted by the change event.\n         */\n        this._selectedToEmit = [];\n        /**\n         * Event emitted when the value has changed.\n         */\n        this.changed = new rxjs__WEBPACK_IMPORTED_MODULE_0__[\"Subject\"]();\n        /**\n         * Event emitted when the value has changed.\n         * @deprecated Use `changed` instead.\n         * \\@breaking-change 8.0.0 To be changed to `changed`\n         */\n        this.onChange = this.changed;\n        if (initiallySelectedValues && initiallySelectedValues.length) {\n            if (_multiple) {\n                initiallySelectedValues.forEach((/**\n                 * @param {?} value\n                 * @return {?}\n                 */\n                value => this._markSelected(value)));\n            }\n            else {\n                this._markSelected(initiallySelectedValues[0]);\n            }\n            // Clear the array in order to avoid firing the change event for preselected values.\n            this._selectedToEmit.length = 0;\n        }\n    }\n    /**\n     * Selected values.\n     * @return {?}\n     */\n    get selected() {\n        if (!this._selected) {\n            this._selected = Array.from(this._selection.values());\n        }\n        return this._selected;\n    }\n    /**\n     * Selects a value or an array of values.\n     * @param {...?} values\n     * @return {?}\n     */\n    select(...values) {\n        this._verifyValueAssignment(values);\n        values.forEach((/**\n         * @param {?} value\n         * @return {?}\n         */\n        value => this._markSelected(value)));\n        this._emitChangeEvent();\n    }\n    /**\n     * Deselects a value or an array of values.\n     * @param {...?} values\n     * @return {?}\n     */\n    deselect(...values) {\n        this._verifyValueAssignment(values);\n        values.forEach((/**\n         * @param {?} value\n         * @return {?}\n         */\n        value => this._unmarkSelected(value)));\n        this._emitChangeEvent();\n    }\n    /**\n     * Toggles a value between selected and deselected.\n     * @param {?} value\n     * @return {?}\n     */\n    toggle(value) {\n        this.isSelected(value) ? this.deselect(value) : this.select(value);\n    }\n    /**\n     * Clears all of the selected values.\n     * @return {?}\n     */\n    clear() {\n        this._unmarkAll();\n        this._emitChangeEvent();\n    }\n    /**\n     * Determines whether a value is selected.\n     * @param {?} value\n     * @return {?}\n     */\n    isSelected(value) {\n        return this._selection.has(value);\n    }\n    /**\n     * Determines whether the model does not have a value.\n     * @return {?}\n     */\n    isEmpty() {\n        return this._selection.size === 0;\n    }\n    /**\n     * Determines whether the model has a value.\n     * @return {?}\n     */\n    hasValue() {\n        return !this.isEmpty();\n    }\n    /**\n     * Sorts the selected values based on a predicate function.\n     * @param {?=} predicate\n     * @return {?}\n     */\n    sort(predicate) {\n        if (this._multiple && this.selected) {\n            (/** @type {?} */ (this._selected)).sort(predicate);\n        }\n    }\n    /**\n     * Gets whether multiple values can be selected.\n     * @return {?}\n     */\n    isMultipleSelection() {\n        return this._multiple;\n    }\n    /**\n     * Emits a change event and clears the records of selected and deselected values.\n     * @private\n     * @return {?}\n     */\n    _emitChangeEvent() {\n        // Clear the selected values so they can be re-cached.\n        this._selected = null;\n        if (this._selectedToEmit.length || this._deselectedToEmit.length) {\n            this.changed.next({\n                source: this,\n                added: this._selectedToEmit,\n                removed: this._deselectedToEmit\n            });\n            this._deselectedToEmit = [];\n            this._selectedToEmit = [];\n        }\n    }\n    /**\n     * Selects a value.\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    _markSelected(value) {\n        if (!this.isSelected(value)) {\n            if (!this._multiple) {\n                this._unmarkAll();\n            }\n            this._selection.add(value);\n            if (this._emitChanges) {\n                this._selectedToEmit.push(value);\n            }\n        }\n    }\n    /**\n     * Deselects a value.\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    _unmarkSelected(value) {\n        if (this.isSelected(value)) {\n            this._selection.delete(value);\n            if (this._emitChanges) {\n                this._deselectedToEmit.push(value);\n            }\n        }\n    }\n    /**\n     * Clears out the selected values.\n     * @private\n     * @return {?}\n     */\n    _unmarkAll() {\n        if (!this.isEmpty()) {\n            this._selection.forEach((/**\n             * @param {?} value\n             * @return {?}\n             */\n            value => this._unmarkSelected(value)));\n        }\n    }\n    /**\n     * Verifies the value assignment and throws an error if the specified value array is\n     * including multiple values while the selection model is not supporting multiple values.\n     * @private\n     * @param {?} values\n     * @return {?}\n     */\n    _verifyValueAssignment(values) {\n        if (values.length > 1 && !this._multiple) {\n            throw getMultipleValuesInSingleSelectionError();\n        }\n    }\n}\n/**\n * Returns an error that reports that multiple values are passed into a selection model\n * with a single value.\n * \\@docs-private\n * @return {?}\n */\nfunction getMultipleValuesInSingleSelectionError() {\n    return Error('Cannot pass multiple values into SelectionModel with single-value mode.');\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Class to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n *\n * This service does not *store* any IDs and names because they may change at any time, so it is\n * less error-prone if they are simply passed through when the events occur.\n */\nclass UniqueSelectionDispatcher {\n    constructor() {\n        this._listeners = [];\n    }\n    /**\n     * Notify other items that selection for the given name has been set.\n     * @param {?} id ID of the item.\n     * @param {?} name Name of the item.\n     * @return {?}\n     */\n    notify(id, name) {\n        for (let listener of this._listeners) {\n            listener(id, name);\n        }\n    }\n    /**\n     * Listen for future changes to item selection.\n     * @param {?} listener\n     * @return {?} Function used to deregister listener\n     */\n    listen(listener) {\n        this._listeners.push(listener);\n        return (/**\n         * @return {?}\n         */\n        () => {\n            this._listeners = this._listeners.filter((/**\n             * @param {?} registered\n             * @return {?}\n             */\n            (registered) => {\n                return listener !== registered;\n            }));\n        });\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._listeners = [];\n    }\n}\nUniqueSelectionDispatcher.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Injectable\"], args: [{ providedIn: 'root' },] },\n];\n/** @nocollapse */ UniqueSelectionDispatcher.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ɵɵdefineInjectable\"])({ factory: function UniqueSelectionDispatcher_Factory() { return new UniqueSelectionDispatcher(); }, token: UniqueSelectionDispatcher, providedIn: \"root\" });\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\n//# sourceMappingURL=collections.js.map\n\n\n/***/ })\n\n}]);\n//# sourceMappingURL=default~pages-angular-material-components-expansion-expansion-module~pages-angular-material-componen~959d541f-es2015.js.map","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Observable, of, Subject } from 'rxjs';\nimport { Injectable, ɵɵdefineInjectable } from '@angular/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @abstract\n * @template T\n */\nclass DataSource {\n}\n/**\n * Checks whether an object is a data source.\n * @param {?} value\n * @return {?}\n */\nfunction isDataSource(value) {\n    // Check if the value is a DataSource by observing if it has a connect function. Cannot\n    // be checked as an `instanceof DataSource` since people could create their own sources\n    // that match the interface, but don't extend DataSource.\n    return value && typeof value.connect === 'function';\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * DataSource wrapper for a native array.\n * @template T\n */\nclass ArrayDataSource extends DataSource {\n    /**\n     * @param {?} _data\n     */\n    constructor(_data) {\n        super();\n        this._data = _data;\n    }\n    /**\n     * @return {?}\n     */\n    connect() {\n        return this._data instanceof Observable ? this._data : of(this._data);\n    }\n    /**\n     * @return {?}\n     */\n    disconnect() { }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Class to be used to power selecting one or more options from a list.\n * @template T\n */\nclass SelectionModel {\n    /**\n     * @param {?=} _multiple\n     * @param {?=} initiallySelectedValues\n     * @param {?=} _emitChanges\n     */\n    constructor(_multiple = false, initiallySelectedValues, _emitChanges = true) {\n        this._multiple = _multiple;\n        this._emitChanges = _emitChanges;\n        /**\n         * Currently-selected values.\n         */\n        this._selection = new Set();\n        /**\n         * Keeps track of the deselected options that haven't been emitted by the change event.\n         */\n        this._deselectedToEmit = [];\n        /**\n         * Keeps track of the selected options that haven't been emitted by the change event.\n         */\n        this._selectedToEmit = [];\n        /**\n         * Event emitted when the value has changed.\n         */\n        this.changed = new Subject();\n        /**\n         * Event emitted when the value has changed.\n         * @deprecated Use `changed` instead.\n         * \\@breaking-change 8.0.0 To be changed to `changed`\n         */\n        this.onChange = this.changed;\n        if (initiallySelectedValues && initiallySelectedValues.length) {\n            if (_multiple) {\n                initiallySelectedValues.forEach((/**\n                 * @param {?} value\n                 * @return {?}\n                 */\n                value => this._markSelected(value)));\n            }\n            else {\n                this._markSelected(initiallySelectedValues[0]);\n            }\n            // Clear the array in order to avoid firing the change event for preselected values.\n            this._selectedToEmit.length = 0;\n        }\n    }\n    /**\n     * Selected values.\n     * @return {?}\n     */\n    get selected() {\n        if (!this._selected) {\n            this._selected = Array.from(this._selection.values());\n        }\n        return this._selected;\n    }\n    /**\n     * Selects a value or an array of values.\n     * @param {...?} values\n     * @return {?}\n     */\n    select(...values) {\n        this._verifyValueAssignment(values);\n        values.forEach((/**\n         * @param {?} value\n         * @return {?}\n         */\n        value => this._markSelected(value)));\n        this._emitChangeEvent();\n    }\n    /**\n     * Deselects a value or an array of values.\n     * @param {...?} values\n     * @return {?}\n     */\n    deselect(...values) {\n        this._verifyValueAssignment(values);\n        values.forEach((/**\n         * @param {?} value\n         * @return {?}\n         */\n        value => this._unmarkSelected(value)));\n        this._emitChangeEvent();\n    }\n    /**\n     * Toggles a value between selected and deselected.\n     * @param {?} value\n     * @return {?}\n     */\n    toggle(value) {\n        this.isSelected(value) ? this.deselect(value) : this.select(value);\n    }\n    /**\n     * Clears all of the selected values.\n     * @return {?}\n     */\n    clear() {\n        this._unmarkAll();\n        this._emitChangeEvent();\n    }\n    /**\n     * Determines whether a value is selected.\n     * @param {?} value\n     * @return {?}\n     */\n    isSelected(value) {\n        return this._selection.has(value);\n    }\n    /**\n     * Determines whether the model does not have a value.\n     * @return {?}\n     */\n    isEmpty() {\n        return this._selection.size === 0;\n    }\n    /**\n     * Determines whether the model has a value.\n     * @return {?}\n     */\n    hasValue() {\n        return !this.isEmpty();\n    }\n    /**\n     * Sorts the selected values based on a predicate function.\n     * @param {?=} predicate\n     * @return {?}\n     */\n    sort(predicate) {\n        if (this._multiple && this.selected) {\n            (/** @type {?} */ (this._selected)).sort(predicate);\n        }\n    }\n    /**\n     * Gets whether multiple values can be selected.\n     * @return {?}\n     */\n    isMultipleSelection() {\n        return this._multiple;\n    }\n    /**\n     * Emits a change event and clears the records of selected and deselected values.\n     * @private\n     * @return {?}\n     */\n    _emitChangeEvent() {\n        // Clear the selected values so they can be re-cached.\n        this._selected = null;\n        if (this._selectedToEmit.length || this._deselectedToEmit.length) {\n            this.changed.next({\n                source: this,\n                added: this._selectedToEmit,\n                removed: this._deselectedToEmit\n            });\n            this._deselectedToEmit = [];\n            this._selectedToEmit = [];\n        }\n    }\n    /**\n     * Selects a value.\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    _markSelected(value) {\n        if (!this.isSelected(value)) {\n            if (!this._multiple) {\n                this._unmarkAll();\n            }\n            this._selection.add(value);\n            if (this._emitChanges) {\n                this._selectedToEmit.push(value);\n            }\n        }\n    }\n    /**\n     * Deselects a value.\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    _unmarkSelected(value) {\n        if (this.isSelected(value)) {\n            this._selection.delete(value);\n            if (this._emitChanges) {\n                this._deselectedToEmit.push(value);\n            }\n        }\n    }\n    /**\n     * Clears out the selected values.\n     * @private\n     * @return {?}\n     */\n    _unmarkAll() {\n        if (!this.isEmpty()) {\n            this._selection.forEach((/**\n             * @param {?} value\n             * @return {?}\n             */\n            value => this._unmarkSelected(value)));\n        }\n    }\n    /**\n     * Verifies the value assignment and throws an error if the specified value array is\n     * including multiple values while the selection model is not supporting multiple values.\n     * @private\n     * @param {?} values\n     * @return {?}\n     */\n    _verifyValueAssignment(values) {\n        if (values.length > 1 && !this._multiple) {\n            throw getMultipleValuesInSingleSelectionError();\n        }\n    }\n}\n/**\n * Returns an error that reports that multiple values are passed into a selection model\n * with a single value.\n * \\@docs-private\n * @return {?}\n */\nfunction getMultipleValuesInSingleSelectionError() {\n    return Error('Cannot pass multiple values into SelectionModel with single-value mode.');\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Class to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n *\n * This service does not *store* any IDs and names because they may change at any time, so it is\n * less error-prone if they are simply passed through when the events occur.\n */\nclass UniqueSelectionDispatcher {\n    constructor() {\n        this._listeners = [];\n    }\n    /**\n     * Notify other items that selection for the given name has been set.\n     * @param {?} id ID of the item.\n     * @param {?} name Name of the item.\n     * @return {?}\n     */\n    notify(id, name) {\n        for (let listener of this._listeners) {\n            listener(id, name);\n        }\n    }\n    /**\n     * Listen for future changes to item selection.\n     * @param {?} listener\n     * @return {?} Function used to deregister listener\n     */\n    listen(listener) {\n        this._listeners.push(listener);\n        return (/**\n         * @return {?}\n         */\n        () => {\n            this._listeners = this._listeners.filter((/**\n             * @param {?} registered\n             * @return {?}\n             */\n            (registered) => {\n                return listener !== registered;\n            }));\n        });\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._listeners = [];\n    }\n}\nUniqueSelectionDispatcher.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] },\n];\n/** @nocollapse */ UniqueSelectionDispatcher.ngInjectableDef = ɵɵdefineInjectable({ factory: function UniqueSelectionDispatcher_Factory() { return new UniqueSelectionDispatcher(); }, token: UniqueSelectionDispatcher, providedIn: \"root\" });\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { UniqueSelectionDispatcher, ArrayDataSource, isDataSource, DataSource, getMultipleValuesInSingleSelectionError, SelectionModel };\n//# sourceMappingURL=collections.js.map\n"]}