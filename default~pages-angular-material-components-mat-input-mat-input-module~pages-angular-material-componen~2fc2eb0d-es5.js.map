{"version":3,"sources":["default~pages-angular-material-components-mat-input-mat-input-module~pages-angular-material-componen~2fc2eb0d-es5.js","webpack:///node_modules/@angular/material/esm2015/sort.js"],"names":[],"mappings":"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","file":"x","sourcesContent":["(window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || []).push([[\"default~pages-angular-material-components-mat-input-mat-input-module~pages-angular-material-componen~2fc2eb0d\"],{\n\n/***/ \"./node_modules/@angular/material/esm2015/sort.js\":\n/*!********************************************************!*\\\n  !*** ./node_modules/@angular/material/esm2015/sort.js ***!\n  \\********************************************************/\n/*! exports provided: MatSortModule, MatSortHeader, MAT_SORT_HEADER_INTL_PROVIDER_FACTORY, MatSortHeaderIntl, MAT_SORT_HEADER_INTL_PROVIDER, MatSort, matSortAnimations */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MatSortModule\", function() { return MatSortModule; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MatSortHeader\", function() { return MatSortHeader; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\", function() { return MAT_SORT_HEADER_INTL_PROVIDER_FACTORY; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MatSortHeaderIntl\", function() { return MatSortHeaderIntl; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MAT_SORT_HEADER_INTL_PROVIDER\", function() { return MAT_SORT_HEADER_INTL_PROVIDER; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MatSort\", function() { return MatSort; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"matSortAnimations\", function() { return matSortAnimations; });\n/* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/cdk/coercion */ \"./node_modules/@angular/cdk/esm2015/coercion.js\");\n/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ \"./node_modules/@angular/core/fesm2015/core.js\");\n/* harmony import */ var _angular_material_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/material/core */ \"./node_modules/@angular/material/esm2015/core.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs */ \"./node_modules/rxjs/_esm2015/index.js\");\n/* harmony import */ var _angular_animations__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/animations */ \"./node_modules/@angular/animations/fesm2015/animations.js\");\n/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/common */ \"./node_modules/@angular/common/fesm2015/common.js\");\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n\n\n\n\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * \\@docs-private\n * @param {?} id\n * @return {?}\n */\nfunction getSortDuplicateSortableIdError(id) {\n    return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction getSortHeaderNotContainedWithinSortError() {\n    return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction getSortHeaderMissingIdError() {\n    return Error(`MatSortHeader must be provided with a unique id.`);\n}\n/**\n * \\@docs-private\n * @param {?} direction\n * @return {?}\n */\nfunction getSortInvalidDirectionError(direction) {\n    return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Boilerplate for applying mixins to MatSort.\n/**\n * \\@docs-private\n */\nclass MatSortBase {\n}\n/** @type {?} */\nconst _MatSortMixinBase = Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_2__[\"mixinInitialized\"])(Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_2__[\"mixinDisabled\"])(MatSortBase));\n/**\n * Container for MatSortables to manage the sort state and provide default sort parameters.\n */\nclass MatSort extends _MatSortMixinBase {\n    constructor() {\n        super(...arguments);\n        /**\n         * Collection of all registered sortables that this directive manages.\n         */\n        this.sortables = new Map();\n        /**\n         * Used to notify any child components listening to state changes.\n         */\n        this._stateChanges = new rxjs__WEBPACK_IMPORTED_MODULE_3__[\"Subject\"]();\n        /**\n         * The direction to set when an MatSortable is initially sorted.\n         * May be overriden by the MatSortable's sort start.\n         */\n        this.start = 'asc';\n        this._direction = '';\n        /**\n         * Event emitted when the user changes either the active sort or sort direction.\n         */\n        this.sortChange = new _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"EventEmitter\"]();\n    }\n    /**\n     * The sort direction of the currently active MatSortable.\n     * @return {?}\n     */\n    get direction() { return this._direction; }\n    /**\n     * @param {?} direction\n     * @return {?}\n     */\n    set direction(direction) {\n        if (Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__[\"isDevMode\"])() && direction && direction !== 'asc' && direction !== 'desc') {\n            throw getSortInvalidDirectionError(direction);\n        }\n        this._direction = direction;\n    }\n    /**\n     * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n     * May be overriden by the MatSortable's disable clear input.\n     * @return {?}\n     */\n    get disableClear() { return this._disableClear; }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    set disableClear(v) { this._disableClear = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__[\"coerceBooleanProperty\"])(v); }\n    /**\n     * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n     * collection of MatSortables.\n     * @param {?} sortable\n     * @return {?}\n     */\n    register(sortable) {\n        if (!sortable.id) {\n            throw getSortHeaderMissingIdError();\n        }\n        if (this.sortables.has(sortable.id)) {\n            throw getSortDuplicateSortableIdError(sortable.id);\n        }\n        this.sortables.set(sortable.id, sortable);\n    }\n    /**\n     * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n     * collection of contained MatSortables.\n     * @param {?} sortable\n     * @return {?}\n     */\n    deregister(sortable) {\n        this.sortables.delete(sortable.id);\n    }\n    /**\n     * Sets the active sort id and determines the new sort direction.\n     * @param {?} sortable\n     * @return {?}\n     */\n    sort(sortable) {\n        if (this.active != sortable.id) {\n            this.active = sortable.id;\n            this.direction = sortable.start ? sortable.start : this.start;\n        }\n        else {\n            this.direction = this.getNextSortDirection(sortable);\n        }\n        this.sortChange.emit({ active: this.active, direction: this.direction });\n    }\n    /**\n     * Returns the next sort direction of the active sortable, checking for potential overrides.\n     * @param {?} sortable\n     * @return {?}\n     */\n    getNextSortDirection(sortable) {\n        if (!sortable) {\n            return '';\n        }\n        // Get the sort direction cycle with the potential sortable overrides.\n        /** @type {?} */\n        const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n        /** @type {?} */\n        let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n        // Get and return the next direction in the cycle\n        /** @type {?} */\n        let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n        if (nextDirectionIndex >= sortDirectionCycle.length) {\n            nextDirectionIndex = 0;\n        }\n        return sortDirectionCycle[nextDirectionIndex];\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._markInitialized();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnChanges() {\n        this._stateChanges.next();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n}\nMatSort.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Directive\"], args: [{\n                selector: '[matSort]',\n                exportAs: 'matSort',\n                inputs: ['disabled: matSortDisabled']\n            },] },\n];\nMatSort.propDecorators = {\n    active: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Input\"], args: ['matSortActive',] }],\n    start: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Input\"], args: ['matSortStart',] }],\n    direction: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Input\"], args: ['matSortDirection',] }],\n    disableClear: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Input\"], args: ['matSortDisableClear',] }],\n    sortChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Output\"], args: ['matSortChange',] }]\n};\n/**\n * Returns the sort direction cycle to use given the provided parameters of order and clear.\n * @param {?} start\n * @param {?} disableClear\n * @return {?}\n */\nfunction getSortDirectionCycle(start, disableClear) {\n    /** @type {?} */\n    let sortOrder = ['asc', 'desc'];\n    if (start == 'desc') {\n        sortOrder.reverse();\n    }\n    if (!disableClear) {\n        sortOrder.push('');\n    }\n    return sortOrder;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst SORT_ANIMATION_TRANSITION = _angular_material_core__WEBPACK_IMPORTED_MODULE_2__[\"AnimationDurations\"].ENTERING + ' ' +\n    _angular_material_core__WEBPACK_IMPORTED_MODULE_2__[\"AnimationCurves\"].STANDARD_CURVE;\n/**\n * Animations used by MatSort.\n * \\@docs-private\n * @type {?}\n */\nconst matSortAnimations = {\n    /**\n     * Animation that moves the sort indicator.\n     */\n    indicator: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"trigger\"])('indicator', [\n        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"state\"])('active-asc, asc', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"style\"])({ transform: 'translateY(0px)' })),\n        // 10px is the height of the sort indicator, minus the width of the pointers\n        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"state\"])('active-desc, desc', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"style\"])({ transform: 'translateY(10px)' })),\n        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"transition\"])('active-asc <=> active-desc', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"animate\"])(SORT_ANIMATION_TRANSITION))\n    ]),\n    /**\n     * Animation that rotates the left pointer of the indicator based on the sorting direction.\n     */\n    leftPointer: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"trigger\"])('leftPointer', [\n        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"state\"])('active-asc, asc', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"style\"])({ transform: 'rotate(-45deg)' })),\n        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"state\"])('active-desc, desc', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"style\"])({ transform: 'rotate(45deg)' })),\n        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"transition\"])('active-asc <=> active-desc', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"animate\"])(SORT_ANIMATION_TRANSITION))\n    ]),\n    /**\n     * Animation that rotates the right pointer of the indicator based on the sorting direction.\n     */\n    rightPointer: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"trigger\"])('rightPointer', [\n        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"state\"])('active-asc, asc', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"style\"])({ transform: 'rotate(45deg)' })),\n        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"state\"])('active-desc, desc', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"style\"])({ transform: 'rotate(-45deg)' })),\n        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"transition\"])('active-asc <=> active-desc', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"animate\"])(SORT_ANIMATION_TRANSITION))\n    ]),\n    /**\n     * Animation that controls the arrow opacity.\n     */\n    arrowOpacity: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"trigger\"])('arrowOpacity', [\n        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"state\"])('desc-to-active, asc-to-active, active', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"style\"])({ opacity: 1 })),\n        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"state\"])('desc-to-hint, asc-to-hint, hint', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"style\"])({ opacity: .54 })),\n        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"state\"])('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"style\"])({ opacity: 0 })),\n        // Transition between all states except for immediate transitions\n        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"transition\"])('* => asc, * => desc, * => active, * => hint, * => void', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"animate\"])('0ms')),\n        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"transition\"])('* <=> *', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"animate\"])(SORT_ANIMATION_TRANSITION)),\n    ]),\n    /**\n     * Animation for the translation of the arrow as a whole. States are separated into two\n     * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n     * peek, and active. The other states define a specific animation (source-to-destination)\n     * and are determined as a function of their prev user-perceived state and what the next state\n     * should be.\n     */\n    arrowPosition: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"trigger\"])('arrowPosition', [\n        // Hidden Above => Hint Center\n        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"transition\"])('* => desc-to-hint, * => desc-to-active', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"animate\"])(SORT_ANIMATION_TRANSITION, Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"keyframes\"])([\n            Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"style\"])({ transform: 'translateY(-25%)' }),\n            Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"style\"])({ transform: 'translateY(0)' })\n        ]))),\n        // Hint Center => Hidden Below\n        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"transition\"])('* => hint-to-desc, * => active-to-desc', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"animate\"])(SORT_ANIMATION_TRANSITION, Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"keyframes\"])([\n            Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"style\"])({ transform: 'translateY(0)' }),\n            Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"style\"])({ transform: 'translateY(25%)' })\n        ]))),\n        // Hidden Below => Hint Center\n        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"transition\"])('* => asc-to-hint, * => asc-to-active', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"animate\"])(SORT_ANIMATION_TRANSITION, Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"keyframes\"])([\n            Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"style\"])({ transform: 'translateY(25%)' }),\n            Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"style\"])({ transform: 'translateY(0)' })\n        ]))),\n        // Hint Center => Hidden Above\n        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"transition\"])('* => hint-to-asc, * => active-to-asc', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"animate\"])(SORT_ANIMATION_TRANSITION, Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"keyframes\"])([\n            Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"style\"])({ transform: 'translateY(0)' }),\n            Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"style\"])({ transform: 'translateY(-25%)' })\n        ]))),\n        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"state\"])('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"style\"])({ transform: 'translateY(0)' })),\n        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"state\"])('hint-to-desc, active-to-desc, desc', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"style\"])({ transform: 'translateY(-25%)' })),\n        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"state\"])('hint-to-asc, active-to-asc, asc', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"style\"])({ transform: 'translateY(25%)' })),\n    ]),\n    /**\n     * Necessary trigger that calls animate on children animations.\n     */\n    allowChildren: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"trigger\"])('allowChildren', [\n        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"transition\"])('* <=> *', [\n            Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"query\"])('@*', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__[\"animateChild\"])(), { optional: true })\n        ])\n    ]),\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\nclass MatSortHeaderIntl {\n    constructor() {\n        /**\n         * Stream that emits whenever the labels here are changed. Use this to notify\n         * components if the labels have changed after initialization.\n         */\n        this.changes = new rxjs__WEBPACK_IMPORTED_MODULE_3__[\"Subject\"]();\n        /**\n         * ARIA label for the sorting button.\n         */\n        this.sortButtonLabel = (/**\n         * @param {?} id\n         * @return {?}\n         */\n        (id) => {\n            return `Change sorting for ${id}`;\n        });\n    }\n}\nMatSortHeaderIntl.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Injectable\"], args: [{ providedIn: 'root' },] },\n];\n/** @nocollapse */ MatSortHeaderIntl.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ɵɵdefineInjectable\"])({ factory: function MatSortHeaderIntl_Factory() { return new MatSortHeaderIntl(); }, token: MatSortHeaderIntl, providedIn: \"root\" });\n/**\n * \\@docs-private\n * @param {?} parentIntl\n * @return {?}\n */\nfunction MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl) {\n    return parentIntl || new MatSortHeaderIntl();\n}\n/**\n * \\@docs-private\n * @type {?}\n */\nconst MAT_SORT_HEADER_INTL_PROVIDER = {\n    // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n    provide: MatSortHeaderIntl,\n    deps: [[new _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Optional\"](), new _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"SkipSelf\"](), MatSortHeaderIntl]],\n    useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Boilerplate for applying mixins to the sort header.\n/**\n * \\@docs-private\n */\nclass MatSortHeaderBase {\n}\n/** @type {?} */\nconst _MatSortHeaderMixinBase = Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_2__[\"mixinDisabled\"])(MatSortHeaderBase);\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\nclass MatSortHeader extends _MatSortHeaderMixinBase {\n    /**\n     * @param {?} _intl\n     * @param {?} changeDetectorRef\n     * @param {?} _sort\n     * @param {?} _columnDef\n     */\n    constructor(_intl, changeDetectorRef, _sort, _columnDef) {\n        // Note that we use a string token for the `_columnDef`, because the value is provided both by\n        // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\n        // and we want to avoid having the sort header depending on the CDK table because\n        // of this single reference.\n        super();\n        this._intl = _intl;\n        this._sort = _sort;\n        this._columnDef = _columnDef;\n        /**\n         * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n         * provide an affordance that the header is sortable by showing on focus and hover.\n         */\n        this._showIndicatorHint = false;\n        /**\n         * The direction the arrow should be facing according to the current state.\n         */\n        this._arrowDirection = '';\n        /**\n         * Whether the view state animation should show the transition between the `from` and `to` states.\n         */\n        this._disableViewStateAnimation = false;\n        /**\n         * Sets the position of the arrow that displays when sorted.\n         */\n        this.arrowPosition = 'after';\n        if (!_sort) {\n            throw getSortHeaderNotContainedWithinSortError();\n        }\n        this._rerenderSubscription = Object(rxjs__WEBPACK_IMPORTED_MODULE_3__[\"merge\"])(_sort.sortChange, _sort._stateChanges, _intl.changes)\n            .subscribe((/**\n         * @return {?}\n         */\n        () => {\n            if (this._isSorted()) {\n                this._updateArrowDirection();\n            }\n            // If this header was recently active and now no longer sorted, animate away the arrow.\n            if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n                this._disableViewStateAnimation = false;\n                this._setAnimationTransitionState({ fromState: 'active', toState: this._arrowDirection });\n            }\n            changeDetectorRef.markForCheck();\n        }));\n    }\n    /**\n     * Overrides the disable clear value of the containing MatSort for this MatSortable.\n     * @return {?}\n     */\n    get disableClear() { return this._disableClear; }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    set disableClear(v) { this._disableClear = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__[\"coerceBooleanProperty\"])(v); }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        if (!this.id && this._columnDef) {\n            this.id = this._columnDef.name;\n        }\n        // Initialize the direction of the arrow and set the view state to be immediately that state.\n        this._updateArrowDirection();\n        this._setAnimationTransitionState({ toState: this._isSorted() ? 'active' : this._arrowDirection });\n        this._sort.register(this);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._sort.deregister(this);\n        this._rerenderSubscription.unsubscribe();\n    }\n    /**\n     * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n     * user showing what the active sort will become. If set to false, the arrow will fade away.\n     * @param {?} visible\n     * @return {?}\n     */\n    _setIndicatorHintVisible(visible) {\n        // No-op if the sort header is disabled - should not make the hint visible.\n        if (this._isDisabled() && visible) {\n            return;\n        }\n        this._showIndicatorHint = visible;\n        if (!this._isSorted()) {\n            this._updateArrowDirection();\n            if (this._showIndicatorHint) {\n                this._setAnimationTransitionState({ fromState: this._arrowDirection, toState: 'hint' });\n            }\n            else {\n                this._setAnimationTransitionState({ fromState: 'hint', toState: this._arrowDirection });\n            }\n        }\n    }\n    /**\n     * Sets the animation transition view state for the arrow's position and opacity. If the\n     * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n     * no animation appears.\n     * @param {?} viewState\n     * @return {?}\n     */\n    _setAnimationTransitionState(viewState) {\n        this._viewState = viewState;\n        // If the animation for arrow position state (opacity/translation) should be disabled,\n        // remove the fromState so that it jumps right to the toState.\n        if (this._disableViewStateAnimation) {\n            this._viewState = { toState: viewState.toState };\n        }\n    }\n    /**\n     * Triggers the sort on this sort header and removes the indicator hint.\n     * @return {?}\n     */\n    _handleClick() {\n        if (this._isDisabled()) {\n            return;\n        }\n        this._sort.sort(this);\n        // Do not show the animation if the header was already shown in the right position.\n        if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = true;\n        }\n        // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n        // the direction it is facing.\n        /** @type {?} */\n        const viewState = this._isSorted() ?\n            { fromState: this._arrowDirection, toState: 'active' } :\n            { fromState: 'active', toState: this._arrowDirection };\n        this._setAnimationTransitionState(viewState);\n        this._showIndicatorHint = false;\n    }\n    /**\n     * Whether this MatSortHeader is currently sorted in either ascending or descending order.\n     * @return {?}\n     */\n    _isSorted() {\n        return this._sort.active == this.id &&\n            (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n    }\n    /**\n     * Returns the animation state for the arrow direction (indicator and pointers).\n     * @return {?}\n     */\n    _getArrowDirectionState() {\n        return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n    }\n    /**\n     * Returns the arrow position state (opacity, translation).\n     * @return {?}\n     */\n    _getArrowViewState() {\n        /** @type {?} */\n        const fromState = this._viewState.fromState;\n        return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n    }\n    /**\n     * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n     * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n     * active sorted direction. The reason this is updated through a function is because the direction\n     * should only be changed at specific times - when deactivated but the hint is displayed and when\n     * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n     * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n     * preserving its direction, even though the next sort direction is actually different and should\n     * only be changed once the arrow displays again (hint or activation).\n     * @return {?}\n     */\n    _updateArrowDirection() {\n        this._arrowDirection = this._isSorted() ?\n            this._sort.direction :\n            (this.start || this._sort.start);\n    }\n    /**\n     * @return {?}\n     */\n    _isDisabled() {\n        return this._sort.disabled || this.disabled;\n    }\n    /**\n     * Gets the aria-sort attribute that should be applied to this sort header. If this header\n     * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n     * says that the aria-sort property should only be present on one header at a time, so removing\n     * ensures this is true.\n     * @return {?}\n     */\n    _getAriaSortAttribute() {\n        if (!this._isSorted()) {\n            return null;\n        }\n        return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n    }\n    /**\n     * Whether the arrow inside the sort header should be rendered.\n     * @return {?}\n     */\n    _renderArrow() {\n        return !this._isDisabled() || this._isSorted();\n    }\n}\nMatSortHeader.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Component\"], args: [{selector: '[mat-sort-header]',\n                exportAs: 'matSortHeader',\n                template: \"<div class=\\\"mat-sort-header-container\\\" [class.mat-sort-header-sorted]=\\\"_isSorted()\\\" [class.mat-sort-header-position-before]=\\\"arrowPosition == 'before'\\\"><button class=\\\"mat-sort-header-button\\\" type=\\\"button\\\" [attr.disabled]=\\\"_isDisabled() || null\\\" [attr.aria-label]=\\\"_intl.sortButtonLabel(id)\\\" (focus)=\\\"_setIndicatorHintVisible(true)\\\" (blur)=\\\"_setIndicatorHintVisible(false)\\\"><ng-content></ng-content></button><div class=\\\"mat-sort-header-arrow\\\" *ngIf=\\\"_renderArrow()\\\" [@arrowOpacity]=\\\"_getArrowViewState()\\\" [@arrowPosition]=\\\"_getArrowViewState()\\\" [@allowChildren]=\\\"_getArrowDirectionState()\\\" (@arrowPosition.start)=\\\"_disableViewStateAnimation = true\\\" (@arrowPosition.done)=\\\"_disableViewStateAnimation = false\\\"><div class=\\\"mat-sort-header-stem\\\"></div><div class=\\\"mat-sort-header-indicator\\\" [@indicator]=\\\"_getArrowDirectionState()\\\"><div class=\\\"mat-sort-header-pointer-left\\\" [@leftPointer]=\\\"_getArrowDirectionState()\\\"></div><div class=\\\"mat-sort-header-pointer-right\\\" [@rightPointer]=\\\"_getArrowDirectionState()\\\"></div><div class=\\\"mat-sort-header-pointer-middle\\\"></div></div></div></div>\",\n                styles: [\".mat-sort-header-container{display:flex;cursor:pointer;align-items:center}.mat-sort-header-disabled .mat-sort-header-container{cursor:default}.mat-sort-header-position-before{flex-direction:row-reverse}.mat-sort-header-button{border:none;background:0 0;display:flex;align-items:center;padding:0;cursor:inherit;outline:0;font:inherit;color:currentColor}.mat-sort-header-button::-moz-focus-inner{border:0}.mat-sort-header-arrow{height:12px;width:12px;min-width:12px;position:relative;display:flex;opacity:0}.mat-sort-header-arrow,[dir=rtl] .mat-sort-header-position-before .mat-sort-header-arrow{margin:0 0 0 6px}.mat-sort-header-position-before .mat-sort-header-arrow,[dir=rtl] .mat-sort-header-arrow{margin:0 6px 0 0}.mat-sort-header-stem{background:currentColor;height:10px;width:2px;margin:auto;display:flex;align-items:center}@media (-ms-high-contrast:active){.mat-sort-header-stem{width:0;border-left:solid 2px}}.mat-sort-header-indicator{width:100%;height:2px;display:flex;align-items:center;position:absolute;top:0;left:0}.mat-sort-header-pointer-middle{margin:auto;height:2px;width:2px;background:currentColor;transform:rotate(45deg)}@media (-ms-high-contrast:active){.mat-sort-header-pointer-middle{width:0;height:0;border-top:solid 2px;border-left:solid 2px}}.mat-sort-header-pointer-left,.mat-sort-header-pointer-right{background:currentColor;width:6px;height:2px;position:absolute;top:0}@media (-ms-high-contrast:active){.mat-sort-header-pointer-left,.mat-sort-header-pointer-right{width:0;height:0;border-left:solid 6px;border-top:solid 2px}}.mat-sort-header-pointer-left{transform-origin:right;left:0}.mat-sort-header-pointer-right{transform-origin:left;right:0}\"],\n                host: {\n                    '(click)': '_handleClick()',\n                    '(mouseenter)': '_setIndicatorHintVisible(true)',\n                    '(mouseleave)': '_setIndicatorHintVisible(false)',\n                    '[attr.aria-sort]': '_getAriaSortAttribute()',\n                    '[class.mat-sort-header-disabled]': '_isDisabled()',\n                },\n                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ViewEncapsulation\"].None,\n                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ChangeDetectionStrategy\"].OnPush,\n                inputs: ['disabled'],\n                animations: [\n                    matSortAnimations.indicator,\n                    matSortAnimations.leftPointer,\n                    matSortAnimations.rightPointer,\n                    matSortAnimations.arrowOpacity,\n                    matSortAnimations.arrowPosition,\n                    matSortAnimations.allowChildren,\n                ]\n            },] },\n];\n/** @nocollapse */\nMatSortHeader.ctorParameters = () => [\n    { type: MatSortHeaderIntl },\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ChangeDetectorRef\"] },\n    { type: MatSort, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Optional\"] }] },\n    { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Inject\"], args: ['MAT_SORT_HEADER_COLUMN_DEF',] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Optional\"] }] }\n];\nMatSortHeader.propDecorators = {\n    id: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Input\"], args: ['mat-sort-header',] }],\n    arrowPosition: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Input\"] }],\n    start: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Input\"] }],\n    disableClear: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Input\"] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatSortModule {\n}\nMatSortModule.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"NgModule\"], args: [{\n                imports: [_angular_common__WEBPACK_IMPORTED_MODULE_5__[\"CommonModule\"]],\n                exports: [MatSort, MatSortHeader],\n                declarations: [MatSort, MatSortHeader],\n                providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\n//# sourceMappingURL=sort.js.map\n\n\n/***/ })\n\n}]);\n//# sourceMappingURL=default~pages-angular-material-components-mat-input-mat-input-module~pages-angular-material-componen~2fc2eb0d-es2015.js.map","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Directive, EventEmitter, Input, isDevMode, Output, Injectable, SkipSelf, Optional, NgModule, ChangeDetectionStrategy, ChangeDetectorRef, Component, ViewEncapsulation, Inject, ɵɵdefineInjectable } from '@angular/core';\nimport { mixinDisabled, mixinInitialized, AnimationCurves, AnimationDurations } from '@angular/material/core';\nimport { Subject, merge } from 'rxjs';\nimport { animate, state, style, transition, trigger, keyframes, query, animateChild } from '@angular/animations';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * \\@docs-private\n * @param {?} id\n * @return {?}\n */\nfunction getSortDuplicateSortableIdError(id) {\n    return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction getSortHeaderNotContainedWithinSortError() {\n    return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction getSortHeaderMissingIdError() {\n    return Error(`MatSortHeader must be provided with a unique id.`);\n}\n/**\n * \\@docs-private\n * @param {?} direction\n * @return {?}\n */\nfunction getSortInvalidDirectionError(direction) {\n    return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Boilerplate for applying mixins to MatSort.\n/**\n * \\@docs-private\n */\nclass MatSortBase {\n}\n/** @type {?} */\nconst _MatSortMixinBase = mixinInitialized(mixinDisabled(MatSortBase));\n/**\n * Container for MatSortables to manage the sort state and provide default sort parameters.\n */\nclass MatSort extends _MatSortMixinBase {\n    constructor() {\n        super(...arguments);\n        /**\n         * Collection of all registered sortables that this directive manages.\n         */\n        this.sortables = new Map();\n        /**\n         * Used to notify any child components listening to state changes.\n         */\n        this._stateChanges = new Subject();\n        /**\n         * The direction to set when an MatSortable is initially sorted.\n         * May be overriden by the MatSortable's sort start.\n         */\n        this.start = 'asc';\n        this._direction = '';\n        /**\n         * Event emitted when the user changes either the active sort or sort direction.\n         */\n        this.sortChange = new EventEmitter();\n    }\n    /**\n     * The sort direction of the currently active MatSortable.\n     * @return {?}\n     */\n    get direction() { return this._direction; }\n    /**\n     * @param {?} direction\n     * @return {?}\n     */\n    set direction(direction) {\n        if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n            throw getSortInvalidDirectionError(direction);\n        }\n        this._direction = direction;\n    }\n    /**\n     * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n     * May be overriden by the MatSortable's disable clear input.\n     * @return {?}\n     */\n    get disableClear() { return this._disableClear; }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n    /**\n     * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n     * collection of MatSortables.\n     * @param {?} sortable\n     * @return {?}\n     */\n    register(sortable) {\n        if (!sortable.id) {\n            throw getSortHeaderMissingIdError();\n        }\n        if (this.sortables.has(sortable.id)) {\n            throw getSortDuplicateSortableIdError(sortable.id);\n        }\n        this.sortables.set(sortable.id, sortable);\n    }\n    /**\n     * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n     * collection of contained MatSortables.\n     * @param {?} sortable\n     * @return {?}\n     */\n    deregister(sortable) {\n        this.sortables.delete(sortable.id);\n    }\n    /**\n     * Sets the active sort id and determines the new sort direction.\n     * @param {?} sortable\n     * @return {?}\n     */\n    sort(sortable) {\n        if (this.active != sortable.id) {\n            this.active = sortable.id;\n            this.direction = sortable.start ? sortable.start : this.start;\n        }\n        else {\n            this.direction = this.getNextSortDirection(sortable);\n        }\n        this.sortChange.emit({ active: this.active, direction: this.direction });\n    }\n    /**\n     * Returns the next sort direction of the active sortable, checking for potential overrides.\n     * @param {?} sortable\n     * @return {?}\n     */\n    getNextSortDirection(sortable) {\n        if (!sortable) {\n            return '';\n        }\n        // Get the sort direction cycle with the potential sortable overrides.\n        /** @type {?} */\n        const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n        /** @type {?} */\n        let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n        // Get and return the next direction in the cycle\n        /** @type {?} */\n        let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n        if (nextDirectionIndex >= sortDirectionCycle.length) {\n            nextDirectionIndex = 0;\n        }\n        return sortDirectionCycle[nextDirectionIndex];\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._markInitialized();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnChanges() {\n        this._stateChanges.next();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n}\nMatSort.decorators = [\n    { type: Directive, args: [{\n                selector: '[matSort]',\n                exportAs: 'matSort',\n                inputs: ['disabled: matSortDisabled']\n            },] },\n];\nMatSort.propDecorators = {\n    active: [{ type: Input, args: ['matSortActive',] }],\n    start: [{ type: Input, args: ['matSortStart',] }],\n    direction: [{ type: Input, args: ['matSortDirection',] }],\n    disableClear: [{ type: Input, args: ['matSortDisableClear',] }],\n    sortChange: [{ type: Output, args: ['matSortChange',] }]\n};\n/**\n * Returns the sort direction cycle to use given the provided parameters of order and clear.\n * @param {?} start\n * @param {?} disableClear\n * @return {?}\n */\nfunction getSortDirectionCycle(start, disableClear) {\n    /** @type {?} */\n    let sortOrder = ['asc', 'desc'];\n    if (start == 'desc') {\n        sortOrder.reverse();\n    }\n    if (!disableClear) {\n        sortOrder.push('');\n    }\n    return sortOrder;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n    AnimationCurves.STANDARD_CURVE;\n/**\n * Animations used by MatSort.\n * \\@docs-private\n * @type {?}\n */\nconst matSortAnimations = {\n    /**\n     * Animation that moves the sort indicator.\n     */\n    indicator: trigger('indicator', [\n        state('active-asc, asc', style({ transform: 'translateY(0px)' })),\n        // 10px is the height of the sort indicator, minus the width of the pointers\n        state('active-desc, desc', style({ transform: 'translateY(10px)' })),\n        transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n    ]),\n    /**\n     * Animation that rotates the left pointer of the indicator based on the sorting direction.\n     */\n    leftPointer: trigger('leftPointer', [\n        state('active-asc, asc', style({ transform: 'rotate(-45deg)' })),\n        state('active-desc, desc', style({ transform: 'rotate(45deg)' })),\n        transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n    ]),\n    /**\n     * Animation that rotates the right pointer of the indicator based on the sorting direction.\n     */\n    rightPointer: trigger('rightPointer', [\n        state('active-asc, asc', style({ transform: 'rotate(45deg)' })),\n        state('active-desc, desc', style({ transform: 'rotate(-45deg)' })),\n        transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n    ]),\n    /**\n     * Animation that controls the arrow opacity.\n     */\n    arrowOpacity: trigger('arrowOpacity', [\n        state('desc-to-active, asc-to-active, active', style({ opacity: 1 })),\n        state('desc-to-hint, asc-to-hint, hint', style({ opacity: .54 })),\n        state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void', style({ opacity: 0 })),\n        // Transition between all states except for immediate transitions\n        transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n        transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n    ]),\n    /**\n     * Animation for the translation of the arrow as a whole. States are separated into two\n     * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n     * peek, and active. The other states define a specific animation (source-to-destination)\n     * and are determined as a function of their prev user-perceived state and what the next state\n     * should be.\n     */\n    arrowPosition: trigger('arrowPosition', [\n        // Hidden Above => Hint Center\n        transition('* => desc-to-hint, * => desc-to-active', animate(SORT_ANIMATION_TRANSITION, keyframes([\n            style({ transform: 'translateY(-25%)' }),\n            style({ transform: 'translateY(0)' })\n        ]))),\n        // Hint Center => Hidden Below\n        transition('* => hint-to-desc, * => active-to-desc', animate(SORT_ANIMATION_TRANSITION, keyframes([\n            style({ transform: 'translateY(0)' }),\n            style({ transform: 'translateY(25%)' })\n        ]))),\n        // Hidden Below => Hint Center\n        transition('* => asc-to-hint, * => asc-to-active', animate(SORT_ANIMATION_TRANSITION, keyframes([\n            style({ transform: 'translateY(25%)' }),\n            style({ transform: 'translateY(0)' })\n        ]))),\n        // Hint Center => Hidden Above\n        transition('* => hint-to-asc, * => active-to-asc', animate(SORT_ANIMATION_TRANSITION, keyframes([\n            style({ transform: 'translateY(0)' }),\n            style({ transform: 'translateY(-25%)' })\n        ]))),\n        state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active', style({ transform: 'translateY(0)' })),\n        state('hint-to-desc, active-to-desc, desc', style({ transform: 'translateY(-25%)' })),\n        state('hint-to-asc, active-to-asc, asc', style({ transform: 'translateY(25%)' })),\n    ]),\n    /**\n     * Necessary trigger that calls animate on children animations.\n     */\n    allowChildren: trigger('allowChildren', [\n        transition('* <=> *', [\n            query('@*', animateChild(), { optional: true })\n        ])\n    ]),\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\nclass MatSortHeaderIntl {\n    constructor() {\n        /**\n         * Stream that emits whenever the labels here are changed. Use this to notify\n         * components if the labels have changed after initialization.\n         */\n        this.changes = new Subject();\n        /**\n         * ARIA label for the sorting button.\n         */\n        this.sortButtonLabel = (/**\n         * @param {?} id\n         * @return {?}\n         */\n        (id) => {\n            return `Change sorting for ${id}`;\n        });\n    }\n}\nMatSortHeaderIntl.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] },\n];\n/** @nocollapse */ MatSortHeaderIntl.ngInjectableDef = ɵɵdefineInjectable({ factory: function MatSortHeaderIntl_Factory() { return new MatSortHeaderIntl(); }, token: MatSortHeaderIntl, providedIn: \"root\" });\n/**\n * \\@docs-private\n * @param {?} parentIntl\n * @return {?}\n */\nfunction MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl) {\n    return parentIntl || new MatSortHeaderIntl();\n}\n/**\n * \\@docs-private\n * @type {?}\n */\nconst MAT_SORT_HEADER_INTL_PROVIDER = {\n    // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n    provide: MatSortHeaderIntl,\n    deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n    useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Boilerplate for applying mixins to the sort header.\n/**\n * \\@docs-private\n */\nclass MatSortHeaderBase {\n}\n/** @type {?} */\nconst _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\nclass MatSortHeader extends _MatSortHeaderMixinBase {\n    /**\n     * @param {?} _intl\n     * @param {?} changeDetectorRef\n     * @param {?} _sort\n     * @param {?} _columnDef\n     */\n    constructor(_intl, changeDetectorRef, _sort, _columnDef) {\n        // Note that we use a string token for the `_columnDef`, because the value is provided both by\n        // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\n        // and we want to avoid having the sort header depending on the CDK table because\n        // of this single reference.\n        super();\n        this._intl = _intl;\n        this._sort = _sort;\n        this._columnDef = _columnDef;\n        /**\n         * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n         * provide an affordance that the header is sortable by showing on focus and hover.\n         */\n        this._showIndicatorHint = false;\n        /**\n         * The direction the arrow should be facing according to the current state.\n         */\n        this._arrowDirection = '';\n        /**\n         * Whether the view state animation should show the transition between the `from` and `to` states.\n         */\n        this._disableViewStateAnimation = false;\n        /**\n         * Sets the position of the arrow that displays when sorted.\n         */\n        this.arrowPosition = 'after';\n        if (!_sort) {\n            throw getSortHeaderNotContainedWithinSortError();\n        }\n        this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n            .subscribe((/**\n         * @return {?}\n         */\n        () => {\n            if (this._isSorted()) {\n                this._updateArrowDirection();\n            }\n            // If this header was recently active and now no longer sorted, animate away the arrow.\n            if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n                this._disableViewStateAnimation = false;\n                this._setAnimationTransitionState({ fromState: 'active', toState: this._arrowDirection });\n            }\n            changeDetectorRef.markForCheck();\n        }));\n    }\n    /**\n     * Overrides the disable clear value of the containing MatSort for this MatSortable.\n     * @return {?}\n     */\n    get disableClear() { return this._disableClear; }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        if (!this.id && this._columnDef) {\n            this.id = this._columnDef.name;\n        }\n        // Initialize the direction of the arrow and set the view state to be immediately that state.\n        this._updateArrowDirection();\n        this._setAnimationTransitionState({ toState: this._isSorted() ? 'active' : this._arrowDirection });\n        this._sort.register(this);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._sort.deregister(this);\n        this._rerenderSubscription.unsubscribe();\n    }\n    /**\n     * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n     * user showing what the active sort will become. If set to false, the arrow will fade away.\n     * @param {?} visible\n     * @return {?}\n     */\n    _setIndicatorHintVisible(visible) {\n        // No-op if the sort header is disabled - should not make the hint visible.\n        if (this._isDisabled() && visible) {\n            return;\n        }\n        this._showIndicatorHint = visible;\n        if (!this._isSorted()) {\n            this._updateArrowDirection();\n            if (this._showIndicatorHint) {\n                this._setAnimationTransitionState({ fromState: this._arrowDirection, toState: 'hint' });\n            }\n            else {\n                this._setAnimationTransitionState({ fromState: 'hint', toState: this._arrowDirection });\n            }\n        }\n    }\n    /**\n     * Sets the animation transition view state for the arrow's position and opacity. If the\n     * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n     * no animation appears.\n     * @param {?} viewState\n     * @return {?}\n     */\n    _setAnimationTransitionState(viewState) {\n        this._viewState = viewState;\n        // If the animation for arrow position state (opacity/translation) should be disabled,\n        // remove the fromState so that it jumps right to the toState.\n        if (this._disableViewStateAnimation) {\n            this._viewState = { toState: viewState.toState };\n        }\n    }\n    /**\n     * Triggers the sort on this sort header and removes the indicator hint.\n     * @return {?}\n     */\n    _handleClick() {\n        if (this._isDisabled()) {\n            return;\n        }\n        this._sort.sort(this);\n        // Do not show the animation if the header was already shown in the right position.\n        if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = true;\n        }\n        // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n        // the direction it is facing.\n        /** @type {?} */\n        const viewState = this._isSorted() ?\n            { fromState: this._arrowDirection, toState: 'active' } :\n            { fromState: 'active', toState: this._arrowDirection };\n        this._setAnimationTransitionState(viewState);\n        this._showIndicatorHint = false;\n    }\n    /**\n     * Whether this MatSortHeader is currently sorted in either ascending or descending order.\n     * @return {?}\n     */\n    _isSorted() {\n        return this._sort.active == this.id &&\n            (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n    }\n    /**\n     * Returns the animation state for the arrow direction (indicator and pointers).\n     * @return {?}\n     */\n    _getArrowDirectionState() {\n        return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n    }\n    /**\n     * Returns the arrow position state (opacity, translation).\n     * @return {?}\n     */\n    _getArrowViewState() {\n        /** @type {?} */\n        const fromState = this._viewState.fromState;\n        return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n    }\n    /**\n     * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n     * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n     * active sorted direction. The reason this is updated through a function is because the direction\n     * should only be changed at specific times - when deactivated but the hint is displayed and when\n     * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n     * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n     * preserving its direction, even though the next sort direction is actually different and should\n     * only be changed once the arrow displays again (hint or activation).\n     * @return {?}\n     */\n    _updateArrowDirection() {\n        this._arrowDirection = this._isSorted() ?\n            this._sort.direction :\n            (this.start || this._sort.start);\n    }\n    /**\n     * @return {?}\n     */\n    _isDisabled() {\n        return this._sort.disabled || this.disabled;\n    }\n    /**\n     * Gets the aria-sort attribute that should be applied to this sort header. If this header\n     * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n     * says that the aria-sort property should only be present on one header at a time, so removing\n     * ensures this is true.\n     * @return {?}\n     */\n    _getAriaSortAttribute() {\n        if (!this._isSorted()) {\n            return null;\n        }\n        return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n    }\n    /**\n     * Whether the arrow inside the sort header should be rendered.\n     * @return {?}\n     */\n    _renderArrow() {\n        return !this._isDisabled() || this._isSorted();\n    }\n}\nMatSortHeader.decorators = [\n    { type: Component, args: [{selector: '[mat-sort-header]',\n                exportAs: 'matSortHeader',\n                template: \"<div class=\\\"mat-sort-header-container\\\" [class.mat-sort-header-sorted]=\\\"_isSorted()\\\" [class.mat-sort-header-position-before]=\\\"arrowPosition == 'before'\\\"><button class=\\\"mat-sort-header-button\\\" type=\\\"button\\\" [attr.disabled]=\\\"_isDisabled() || null\\\" [attr.aria-label]=\\\"_intl.sortButtonLabel(id)\\\" (focus)=\\\"_setIndicatorHintVisible(true)\\\" (blur)=\\\"_setIndicatorHintVisible(false)\\\"><ng-content></ng-content></button><div class=\\\"mat-sort-header-arrow\\\" *ngIf=\\\"_renderArrow()\\\" [@arrowOpacity]=\\\"_getArrowViewState()\\\" [@arrowPosition]=\\\"_getArrowViewState()\\\" [@allowChildren]=\\\"_getArrowDirectionState()\\\" (@arrowPosition.start)=\\\"_disableViewStateAnimation = true\\\" (@arrowPosition.done)=\\\"_disableViewStateAnimation = false\\\"><div class=\\\"mat-sort-header-stem\\\"></div><div class=\\\"mat-sort-header-indicator\\\" [@indicator]=\\\"_getArrowDirectionState()\\\"><div class=\\\"mat-sort-header-pointer-left\\\" [@leftPointer]=\\\"_getArrowDirectionState()\\\"></div><div class=\\\"mat-sort-header-pointer-right\\\" [@rightPointer]=\\\"_getArrowDirectionState()\\\"></div><div class=\\\"mat-sort-header-pointer-middle\\\"></div></div></div></div>\",\n                styles: [\".mat-sort-header-container{display:flex;cursor:pointer;align-items:center}.mat-sort-header-disabled .mat-sort-header-container{cursor:default}.mat-sort-header-position-before{flex-direction:row-reverse}.mat-sort-header-button{border:none;background:0 0;display:flex;align-items:center;padding:0;cursor:inherit;outline:0;font:inherit;color:currentColor}.mat-sort-header-button::-moz-focus-inner{border:0}.mat-sort-header-arrow{height:12px;width:12px;min-width:12px;position:relative;display:flex;opacity:0}.mat-sort-header-arrow,[dir=rtl] .mat-sort-header-position-before .mat-sort-header-arrow{margin:0 0 0 6px}.mat-sort-header-position-before .mat-sort-header-arrow,[dir=rtl] .mat-sort-header-arrow{margin:0 6px 0 0}.mat-sort-header-stem{background:currentColor;height:10px;width:2px;margin:auto;display:flex;align-items:center}@media (-ms-high-contrast:active){.mat-sort-header-stem{width:0;border-left:solid 2px}}.mat-sort-header-indicator{width:100%;height:2px;display:flex;align-items:center;position:absolute;top:0;left:0}.mat-sort-header-pointer-middle{margin:auto;height:2px;width:2px;background:currentColor;transform:rotate(45deg)}@media (-ms-high-contrast:active){.mat-sort-header-pointer-middle{width:0;height:0;border-top:solid 2px;border-left:solid 2px}}.mat-sort-header-pointer-left,.mat-sort-header-pointer-right{background:currentColor;width:6px;height:2px;position:absolute;top:0}@media (-ms-high-contrast:active){.mat-sort-header-pointer-left,.mat-sort-header-pointer-right{width:0;height:0;border-left:solid 6px;border-top:solid 2px}}.mat-sort-header-pointer-left{transform-origin:right;left:0}.mat-sort-header-pointer-right{transform-origin:left;right:0}\"],\n                host: {\n                    '(click)': '_handleClick()',\n                    '(mouseenter)': '_setIndicatorHintVisible(true)',\n                    '(mouseleave)': '_setIndicatorHintVisible(false)',\n                    '[attr.aria-sort]': '_getAriaSortAttribute()',\n                    '[class.mat-sort-header-disabled]': '_isDisabled()',\n                },\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                inputs: ['disabled'],\n                animations: [\n                    matSortAnimations.indicator,\n                    matSortAnimations.leftPointer,\n                    matSortAnimations.rightPointer,\n                    matSortAnimations.arrowOpacity,\n                    matSortAnimations.arrowPosition,\n                    matSortAnimations.allowChildren,\n                ]\n            },] },\n];\n/** @nocollapse */\nMatSortHeader.ctorParameters = () => [\n    { type: MatSortHeaderIntl },\n    { type: ChangeDetectorRef },\n    { type: MatSort, decorators: [{ type: Optional }] },\n    { type: undefined, decorators: [{ type: Inject, args: ['MAT_SORT_HEADER_COLUMN_DEF',] }, { type: Optional }] }\n];\nMatSortHeader.propDecorators = {\n    id: [{ type: Input, args: ['mat-sort-header',] }],\n    arrowPosition: [{ type: Input }],\n    start: [{ type: Input }],\n    disableClear: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatSortModule {\n}\nMatSortModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [CommonModule],\n                exports: [MatSort, MatSortHeader],\n                declarations: [MatSort, MatSortHeader],\n                providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatSortModule, MatSortHeader, MAT_SORT_HEADER_INTL_PROVIDER_FACTORY, MatSortHeaderIntl, MAT_SORT_HEADER_INTL_PROVIDER, MatSort, matSortAnimations };\n//# sourceMappingURL=sort.js.map\n"]}